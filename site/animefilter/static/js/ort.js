/*!
* ONNX Runtime Web v1.9.0
* Copyright (c) Microsoft Corporation. All rights reserved.
* Licensed under the MIT License.
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ort"] = factory();
	else
		root["ort"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../common/dist/lib/backend-impl.js":
/*!******************************************!*\
  !*** ../common/dist/lib/backend-impl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* binding */ registerBackend; },
/* harmony export */   "resolveBackend": function() { return /* binding */ resolveBackend; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const backends = {};
const backendsSortedByPriority = [];
/**
 * Register a backend.
 *
 * @param name - the name as a key to lookup as an execution provider.
 * @param backend - the backend object.
 * @param priority - an integer indicating the priority of the backend. Higher number means higher priority.
 */
const registerBackend = (name, backend, priority) => {
    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {
        const currentBackend = backends[name];
        if (currentBackend === undefined) {
            backends[name] = { backend, priority };
        }
        else if (currentBackend.backend === backend) {
            return;
        }
        else {
            throw new Error(`backend "${name}" is already registered`);
        }
        for (let i = 0; i < backendsSortedByPriority.length; i++) {
            if (backends[backendsSortedByPriority[i]].priority <= priority) {
                backendsSortedByPriority.splice(i, 0, name);
                return;
            }
        }
        backendsSortedByPriority.push(name);
        return;
    }
    throw new TypeError('not a valid backend');
};
/**
 * Resolve backend by specified hints.
 *
 * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.
 * @returns a promise that resolves to the backend.
 */
const resolveBackend = async (backendHints) => {
    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
    const errors = [];
    for (const backendName of backendNames) {
        const backendInfo = backends[backendName];
        if (backendInfo) {
            if (backendInfo.initialized) {
                return backendInfo.backend;
            }
            else if (backendInfo.initializing) {
                throw new Error(`backend "${backendName}" is being initialized; cannot initialize multiple times.`);
            }
            else if (backendInfo.aborted) {
                continue; // current backend is unavailable; try next
            }
            try {
                backendInfo.initializing = true;
                await backendInfo.backend.init();
                backendInfo.initialized = true;
                return backendInfo.backend;
            }
            catch (e) {
                errors.push({ name: backendName, err: e });
                backendInfo.aborted = true;
            }
            finally {
                backendInfo.initializing = false;
            }
        }
    }
    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);
};
//# sourceMappingURL=backend-impl.js.map

/***/ }),

/***/ "../common/dist/lib/backend.js":
/*!*************************************!*\
  !*** ../common/dist/lib/backend.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* reexport safe */ _backend_impl__WEBPACK_IMPORTED_MODULE_0__.registerBackend; }
/* harmony export */ });
/* harmony import */ var _backend_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-impl */ "../common/dist/lib/backend-impl.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//# sourceMappingURL=backend.js.map

/***/ }),

/***/ "../common/dist/lib/env-impl.js":
/*!**************************************!*\
  !*** ../common/dist/lib/env-impl.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EnvImpl": function() { return /* binding */ EnvImpl; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
class EnvImpl {
    constructor() {
        this.wasm = {};
        this.webgl = {};
        this.logLevelInternal = 'warning';
    }
    // TODO standadize the getter and setter convention in env for other fields.
    set logLevel(value) {
        if (value === undefined) {
            return;
        }
        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
        }
        this.logLevelInternal = value;
    }
    get logLevel() {
        return this.logLevelInternal;
    }
}
//# sourceMappingURL=env-impl.js.map

/***/ }),

/***/ "../common/dist/lib/env.js":
/*!*********************************!*\
  !*** ../common/dist/lib/env.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "env": function() { return /* binding */ env; }
/* harmony export */ });
/* harmony import */ var _env_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env-impl */ "../common/dist/lib/env-impl.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * Represent a set of flags as a global singleton.
 */
const env = new _env_impl__WEBPACK_IMPORTED_MODULE_0__.EnvImpl();
//# sourceMappingURL=env.js.map

/***/ }),

/***/ "../common/dist/lib/index.js":
/*!***********************************!*\
  !*** ../common/dist/lib/index.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerBackend": function() { return /* reexport safe */ _backend__WEBPACK_IMPORTED_MODULE_0__.registerBackend; },
/* harmony export */   "env": function() { return /* reexport safe */ _env__WEBPACK_IMPORTED_MODULE_1__.env; },
/* harmony export */   "InferenceSession": function() { return /* reexport safe */ _inference_session__WEBPACK_IMPORTED_MODULE_2__.InferenceSession; },
/* harmony export */   "Tensor": function() { return /* reexport safe */ _tensor__WEBPACK_IMPORTED_MODULE_3__.Tensor; }
/* harmony export */ });
/* harmony import */ var _backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend */ "../common/dist/lib/backend.js");
/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env */ "../common/dist/lib/env.js");
/* harmony import */ var _inference_session__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inference-session */ "../common/dist/lib/inference-session.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tensor */ "../common/dist/lib/tensor.js");
/* harmony import */ var _onnx_value__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onnx-value */ "../common/dist/lib/onnx-value.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../common/dist/lib/inference-session-impl.js":
/*!****************************************************!*\
  !*** ../common/dist/lib/inference-session-impl.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InferenceSession": function() { return /* binding */ InferenceSession; }
/* harmony export */ });
/* harmony import */ var _backend_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-impl */ "../common/dist/lib/backend-impl.js");
/* harmony import */ var _tensor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tensor */ "../common/dist/lib/tensor.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


class InferenceSession {
    constructor(handler) {
        this.handler = handler;
    }
    async run(feeds, arg1, arg2) {
        const fetches = {};
        let options = {};
        // check inputs
        if (typeof feeds !== 'object' || feeds === null || feeds instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor || Array.isArray(feeds)) {
            throw new TypeError('\'feeds\' must be an object that use input names as keys and OnnxValue as corresponding values.');
        }
        let isFetchesEmpty = true;
        // determine which override is being used
        if (typeof arg1 === 'object') {
            if (arg1 === null) {
                throw new TypeError('Unexpected argument[1]: cannot be null.');
            }
            if (arg1 instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                throw new TypeError('\'fetches\' cannot be a Tensor');
            }
            if (Array.isArray(arg1)) {
                if (arg1.length === 0) {
                    throw new TypeError('\'fetches\' cannot be an empty array.');
                }
                isFetchesEmpty = false;
                // output names
                for (const name of arg1) {
                    if (typeof name !== 'string') {
                        throw new TypeError('\'fetches\' must be a string array or an object.');
                    }
                    if (this.outputNames.indexOf(name) === -1) {
                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                    }
                    fetches[name] = null;
                }
                if (typeof arg2 === 'object' && arg2 !== null) {
                    options = arg2;
                }
                else if (typeof arg2 !== 'undefined') {
                    throw new TypeError('\'options\' must be an object.');
                }
            }
            else {
                // decide whether arg1 is fetches or options
                // if any output name is present and its value is valid OnnxValue, we consider it fetches
                let isFetches = false;
                const arg1Keys = Object.getOwnPropertyNames(arg1);
                for (const name of this.outputNames) {
                    if (arg1Keys.indexOf(name) !== -1) {
                        const v = arg1[name];
                        if (v === null || v instanceof _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                            isFetches = true;
                            isFetchesEmpty = false;
                            fetches[name] = v;
                        }
                    }
                }
                if (isFetches) {
                    if (typeof arg2 === 'object' && arg2 !== null) {
                        options = arg2;
                    }
                    else if (typeof arg2 !== 'undefined') {
                        throw new TypeError('\'options\' must be an object.');
                    }
                }
                else {
                    options = arg1;
                }
            }
        }
        else if (typeof arg1 !== 'undefined') {
            throw new TypeError('Unexpected argument[1]: must be \'fetches\' or \'options\'.');
        }
        // check if all inputs are in feed
        for (const name of this.inputNames) {
            if (typeof feeds[name] === 'undefined') {
                throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
        }
        // if no fetches is specified, we use the full output names list
        if (isFetchesEmpty) {
            for (const name of this.outputNames) {
                fetches[name] = null;
            }
        }
        // feeds, fetches and options are prepared
        const results = await this.handler.run(feeds, fetches, options);
        const returnValue = {};
        for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
                returnValue[key] = new _tensor__WEBPACK_IMPORTED_MODULE_1__.Tensor(results[key].type, results[key].data, results[key].dims);
            }
        }
        return returnValue;
    }
    static async create(arg0, arg1, arg2, arg3) {
        // either load from a file or buffer
        let filePathOrUint8Array;
        let options = {};
        if (typeof arg0 === 'string') {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === 'object' && arg1 !== null) {
                options = arg1;
            }
            else if (typeof arg1 !== 'undefined') {
                throw new TypeError('\'options\' must be an object.');
            }
        }
        else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === 'object' && arg1 !== null) {
                options = arg1;
            }
            else if (typeof arg1 !== 'undefined') {
                throw new TypeError('\'options\' must be an object.');
            }
        }
        else if (arg0 instanceof ArrayBuffer ||
            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === 'object' && arg1 !== null) {
                options = arg1;
            }
            else if (typeof arg1 === 'number') {
                byteOffset = arg1;
                if (!Number.isSafeInteger(byteOffset)) {
                    throw new RangeError('\'byteOffset\' must be an integer.');
                }
                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
                }
                byteLength = arg0.byteLength - byteOffset;
                if (typeof arg2 === 'number') {
                    byteLength = arg2;
                    if (!Number.isSafeInteger(byteLength)) {
                        throw new RangeError('\'byteLength\' must be an integer.');
                    }
                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                    }
                    if (typeof arg3 === 'object' && arg3 !== null) {
                        options = arg3;
                    }
                    else if (typeof arg3 !== 'undefined') {
                        throw new TypeError('\'options\' must be an object.');
                    }
                }
                else if (typeof arg2 !== 'undefined') {
                    throw new TypeError('\'byteLength\' must be a number.');
                }
            }
            else if (typeof arg1 !== 'undefined') {
                throw new TypeError('\'options\' must be an object.');
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
        }
        else {
            throw new TypeError('Unexpected argument[0]: must be \'path\' or \'buffer\'.');
        }
        // get backend hints
        const eps = options.executionProviders || [];
        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);
        const backend = await (0,_backend_impl__WEBPACK_IMPORTED_MODULE_0__.resolveBackend)(backendHints);
        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);
        return new InferenceSession(handler);
    }
    startProfiling() {
        this.handler.startProfiling();
    }
    endProfiling() {
        this.handler.endProfiling();
    }
    get inputNames() {
        return this.handler.inputNames;
    }
    get outputNames() {
        return this.handler.outputNames;
    }
}
//# sourceMappingURL=inference-session-impl.js.map

/***/ }),

/***/ "../common/dist/lib/inference-session.js":
/*!***********************************************!*\
  !*** ../common/dist/lib/inference-session.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InferenceSession": function() { return /* binding */ InferenceSession; }
/* harmony export */ });
/* harmony import */ var _inference_session_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inference-session-impl */ "../common/dist/lib/inference-session-impl.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// eslint-disable-next-line @typescript-eslint/naming-convention
const InferenceSession = _inference_session_impl__WEBPACK_IMPORTED_MODULE_0__.InferenceSession;
//# sourceMappingURL=inference-session.js.map

/***/ }),

/***/ "../common/dist/lib/onnx-value.js":
/*!****************************************!*\
  !*** ../common/dist/lib/onnx-value.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//# sourceMappingURL=onnx-value.js.map

/***/ }),

/***/ "../common/dist/lib/tensor-impl.js":
/*!*****************************************!*\
  !*** ../common/dist/lib/tensor-impl.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tensor": function() { return /* binding */ Tensor; }
/* harmony export */ });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';
const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';
// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.
const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([
    ['float32', Float32Array],
    ['uint8', Uint8Array],
    ['int8', Int8Array],
    ['uint16', Uint16Array],
    ['int16', Int16Array],
    ['int32', Int32Array],
    ['bool', Uint8Array],
    ['float64', Float64Array],
    ['uint32', Uint32Array],
]);
// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.
const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([
    [Float32Array, 'float32'],
    [Uint8Array, 'uint8'],
    [Int8Array, 'int8'],
    [Uint16Array, 'uint16'],
    [Int16Array, 'int16'],
    [Int32Array, 'int32'],
    [Float64Array, 'float64'],
    [Uint32Array, 'uint32'],
]);
if (isBigInt64ArrayAvailable) {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');
}
if (isBigUint64ArrayAvailable) {
    NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);
    NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');
}
/**
 * calculate size from dims.
 *
 * @param dims the dims array. May be an illegal input.
 */
const calculateSize = (dims) => {
    let size = 1;
    for (let i = 0; i < dims.length; i++) {
        const dim = dims[i];
        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
        }
        if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
        }
        size *= dim;
    }
    return size;
};
class Tensor {
    constructor(arg0, arg1, arg2) {
        let type;
        let data;
        let dims;
        // check whether arg0 is type or data
        if (typeof arg0 === 'string') {
            //
            // Override: constructor(type, data, ...)
            //
            type = arg0;
            dims = arg2;
            if (arg0 === 'string') {
                // string tensor
                if (!Array.isArray(arg1)) {
                    throw new TypeError('A string tensor\'s data must be a string array.');
                }
                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and
                // error will be populated at inference
                data = arg1;
            }
            else {
                // numeric tensor
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === undefined) {
                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces
                    // incorrect results.
                    // 'typedArrayConstructor' should be one of the typed array prototype objects.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    data = typedArrayConstructor.from(arg1);
                }
                else if (arg1 instanceof typedArrayConstructor) {
                    data = arg1;
                }
                else {
                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
            }
        }
        else {
            //
            // Override: constructor(data, ...)
            //
            dims = arg1;
            if (Array.isArray(arg0)) {
                // only boolean[] and string[] is supported
                if (arg0.length === 0) {
                    throw new TypeError('Tensor type cannot be inferred from an empty array.');
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === 'string') {
                    type = 'string';
                    data = arg0;
                }
                else if (firstElementType === 'boolean') {
                    type = 'bool';
                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is
                    // wrong type. We use 'as any' to make it happy.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    data = Uint8Array.from(arg0);
                }
                else {
                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
            }
            else {
                // get tensor type from TypedArray
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === undefined) {
                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
            }
        }
        // type and data is processed, now processing dims
        if (dims === undefined) {
            // assume 1-D tensor if dims omitted
            dims = [data.length];
        }
        else if (!Array.isArray(dims)) {
            throw new TypeError('A tensor\'s dims must be a number array');
        }
        // perform check
        const size = calculateSize(dims);
        if (size !== data.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);
        }
        this.dims = dims;
        this.type = type;
        this.data = data;
        this.size = size;
    }
    //#endregion
    //#region tensor utilities
    reshape(dims) {
        return new Tensor(this.type, this.data, dims);
    }
}
//# sourceMappingURL=tensor-impl.js.map

/***/ }),

/***/ "../common/dist/lib/tensor.js":
/*!************************************!*\
  !*** ../common/dist/lib/tensor.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tensor": function() { return /* binding */ Tensor; }
/* harmony export */ });
/* harmony import */ var _tensor_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tensor-impl */ "../common/dist/lib/tensor-impl.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// eslint-disable-next-line @typescript-eslint/naming-convention
const Tensor = _tensor_impl__WEBPACK_IMPORTED_MODULE_0__.Tensor;
//# sourceMappingURL=tensor.js.map

/***/ }),

/***/ "./lib/wasm/binding/ort-wasm-threaded.js":
/*!***********************************************!*\
  !*** ./lib/wasm/binding/ort-wasm-threaded.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var __filename = "/index.js";
var __dirname = "/";

var ortWasmThreaded = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(ortWasmThreaded) {
  ortWasmThreaded = ortWasmThreaded || {};


function d(){f.buffer!=l&&n(f.buffer);return aa}function q(){f.buffer!=l&&n(f.buffer);return ba}function t(){f.buffer!=l&&n(f.buffer);return ca}function u(){f.buffer!=l&&n(f.buffer);return da}function ea(){f.buffer!=l&&n(f.buffer);return fa}var v;v||(v=typeof ortWasmThreaded !== 'undefined' ? ortWasmThreaded : {});var ha,ia;v.ready=new Promise(function(a,b){ha=a;ia=b});var y={},z;for(z in v)v.hasOwnProperty(z)&&(y[z]=v[z]);var ja="./this.program";function ka(a,b){throw b;}
var la="object"===typeof window,A="function"===typeof importScripts,B="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node,C=v.ENVIRONMENT_IS_PTHREAD||!1,D="";function ma(a){return v.locateFile?v.locateFile(a,D):D+a}var F,H,I,J,K;
if(B){D=A?__webpack_require__(/*! path */ "?75c6").dirname(D)+"/":__dirname+"/";F=function(a,b){J||(J=__webpack_require__(/*! fs */ "?63c8"));K||(K=__webpack_require__(/*! path */ "?75c6"));a=K.normalize(a);return J.readFileSync(a,b?null:"utf8")};I=function(a){a=F(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a};H=function(a,b,c){J||(J=__webpack_require__(/*! fs */ "?63c8"));K||(K=__webpack_require__(/*! path */ "?75c6"));a=K.normalize(a);J.readFile(a,function(e,h){e?c(e):b(h.buffer)})};1<process.argv.length&&(ja=process.argv[1].replace(/\\/g,"/"));process.argv.slice(2);process.on("uncaughtException",function(a){if(!(a instanceof
L))throw a;});process.on("unhandledRejection",M);ka=function(a,b){if(na())throw process.exitCode=a,b;process.exit(a)};v.inspect=function(){return"[Emscripten Module object]"};var oa;try{oa=__webpack_require__(/*! worker_threads */ "?c6f7")}catch(a){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),a;}__webpack_require__.g.Worker=oa.Worker}else if(la||A)A?D=self.location.href:"undefined"!==typeof document&&document.currentScript&&(D=document.currentScript.src),
_scriptDir&&(D=_scriptDir),0!==D.indexOf("blob:")?D=D.substr(0,D.lastIndexOf("/")+1):D="",B?(F=function(a,b){J||(J=__webpack_require__(/*! fs */ "?63c8"));K||(K=__webpack_require__(/*! path */ "?75c6"));a=K.normalize(a);return J.readFileSync(a,b?null:"utf8")},I=function(a){a=F(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a},H=function(a,b,c){J||(J=__webpack_require__(/*! fs */ "?63c8"));K||(K=__webpack_require__(/*! path */ "?75c6"));a=K.normalize(a);J.readFile(a,function(e,h){e?c(e):b(h.buffer)})}):(F=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText},
A&&(I=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";b.send(null);return new Uint8Array(b.response)}),H=function(a,b,c){var e=new XMLHttpRequest;e.open("GET",a,!0);e.responseType="arraybuffer";e.onload=function(){200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)});B&&"undefined"===typeof performance&&(__webpack_require__.g.performance=__webpack_require__(/*! perf_hooks */ "?674f").performance);var pa=v.print||console.log.bind(console),N=v.printErr||console.warn.bind(console);
for(z in y)y.hasOwnProperty(z)&&(v[z]=y[z]);y=null;v.thisProgram&&(ja=v.thisProgram);v.quit&&(ka=v.quit);var qa,ra;v.wasmBinary&&(ra=v.wasmBinary);var noExitRuntime=v.noExitRuntime||!1;"object"!==typeof WebAssembly&&M("no native wasm support detected");var f,sa,ta=!1,O;function assert(a,b){a||M("Assertion failed: "+b)}function ua(a){var b=new TextDecoder(a);this.decode=function(c){c.buffer instanceof SharedArrayBuffer&&(c=new Uint8Array(c));return b.decode.call(b,c)}}
var va="undefined"!==typeof TextDecoder?new ua("utf8"):void 0;
function wa(a,b,c){var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.subarray&&va)return va.decode(a.subarray(b,c));for(e="";b<c;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))e+=String.fromCharCode((h&31)<<6|k);else{var m=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|m:(h&7)<<18|k<<12|m<<6|a[b++]&63;65536>h?e+=String.fromCharCode(h):(h-=65536,e+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else e+=String.fromCharCode(h)}return e}function P(a,b){return a?wa(q(),a,b):""}
function xa(a,b,c,e){if(!(0<e))return 0;var h=c;e=c+e-1;for(var k=0;k<a.length;++k){var m=a.charCodeAt(k);if(55296<=m&&57343>=m){var r=a.charCodeAt(++k);m=65536+((m&1023)<<10)|r&1023}if(127>=m){if(c>=e)break;b[c++]=m}else{if(2047>=m){if(c+1>=e)break;b[c++]=192|m>>6}else{if(65535>=m){if(c+2>=e)break;b[c++]=224|m>>12}else{if(c+3>=e)break;b[c++]=240|m>>18;b[c++]=128|m>>12&63}b[c++]=128|m>>6&63}b[c++]=128|m&63}}b[c]=0;return c-h}function ya(a,b,c){return xa(a,q(),b,c)}
function za(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:b+4}return b}"undefined"!==typeof TextDecoder&&new ua("utf-16le");function Aa(a){var b=za(a)+1,c=R(b);c&&xa(a,d(),c,b);return c}function Ba(a,b){d().set(a,b)}var l,aa,ba,ca,da,fa;C&&(l=v.buffer);
function n(a){l=a;v.HEAP8=aa=new Int8Array(a);v.HEAP16=new Int16Array(a);v.HEAP32=ca=new Int32Array(a);v.HEAPU8=ba=new Uint8Array(a);v.HEAPU16=new Uint16Array(a);v.HEAPU32=da=new Uint32Array(a);v.HEAPF32=new Float32Array(a);v.HEAPF64=fa=new Float64Array(a)}var Ca=v.INITIAL_MEMORY||16777216;
if(C)f=v.wasmMemory,l=v.buffer;else if(v.wasmMemory)f=v.wasmMemory;else if(f=new WebAssembly.Memory({initial:Ca/65536,maximum:32768,shared:!0}),!(f.buffer instanceof SharedArrayBuffer))throw N("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),B&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),
Error("bad memory");f&&(l=f.buffer);Ca=l.byteLength;n(l);var S,Da=[],Ea=[],Fa=[],Ga=[],Ha=0;function na(){return noExitRuntime||0<Ha}function Ia(){var a=v.preRun.shift();Da.unshift(a)}var T=0,Ja=null,Ka=null;v.preloadedImages={};v.preloadedAudios={};function M(a){if(v.onAbort)v.onAbort(a);assert(!C);N(a);ta=!0;O=1;a=new WebAssembly.RuntimeError("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");ia(a);throw a;}function La(){return U.startsWith("data:application/octet-stream;base64,")}var U;
U="ort-wasm-threaded.wasm";La()||(U=ma(U));function Ma(){var a=U;try{if(a==U&&ra)return new Uint8Array(ra);if(I)return I(a);throw"both async and sync fetching of the wasm failed";}catch(b){M(b)}}
function Na(){if(!ra&&(la||A)){if("function"===typeof fetch&&!U.startsWith("file://"))return fetch(U,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+U+"'";return a.arrayBuffer()}).catch(function(){return Ma()});if(H)return new Promise(function(a,b){H(U,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Ma()})}var Oa={973748:function(){throw"Canceled!";}};
function Pa(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b(v);else{var c=b.Nb;"number"===typeof c?void 0===b.ib?S.get(c)():S.get(c)(b.ib):c(void 0===b.ib?null:b.ib)}}}function Qa(a,b){if(0>=a||a>d().length||a&1||0>b)return-28;if(0==b)return 0;2147483647<=b&&(b=Infinity);var c=Atomics.load(t(),V>>2),e=0;if(c==a&&Atomics.compareExchange(t(),V>>2,c,0)==c&&(--b,e=1,0>=b))return 1;a=Atomics.notify(t(),a>>2,b);if(0<=a)return a+e;throw"Atomics.notify returned an unexpected value "+a;}
v._emscripten_futex_wake=Qa;function Ra(a){if(C)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!a)throw"Internal Error! Null pthread_ptr in cleanupThread!";var b=W.cb[a];b&&(t()[a+12>>2]=0,W.sb(b.worker))}
var W={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var a=R(228),b=0;57>b;++b)u()[a/4+b]=0;t()[a+12>>2]=a;b=a+152;t()[b>>2]=b;var c=R(512);for(b=0;128>b;++b)u()[c/4+b]=0;Atomics.store(u(),a+100>>2,c);Atomics.store(u(),a+40>>2,a);Sa(a,!A,1);Ta(a)},Sb:function(){W.receiveObjectTransfer=W.Xb;W.threadInit=W.hc;W.threadCancel=W.fc;W.threadExit=W.Hb;W.setExitStatus=W.Zb},cb:{},yb:[],Eb:function(){for(;0<W.yb.length;)W.yb.pop()();Ua()},Fb:function(a,b){Atomics.store(u(),a+56>>2,1);Atomics.store(u(),
a+60>>2,0);W.Eb();Atomics.store(u(),a+4>>2,b);Atomics.store(u(),a+0>>2,1);Qa(a+0,2147483647);Sa(0,0,0)},Zb:function(a){O=a},Hb:function(a){var b=X();b&&(W.Fb(b,a),C&&postMessage({cmd:"exit"}))},fc:function(){W.Fb(X(),-1);postMessage({cmd:"cancelDone"})},Gb:function(){for(var a in W.cb){var b=W.cb[a];b&&b.worker&&W.sb(b.worker)}W.cb={};for(a=0;a<W.gb.length;++a){var c=W.gb[a];c.terminate()}W.gb=[];for(a=0;a<W.fb.length;++a)c=W.fb[a],b=c.bb,W.xb(b),c.terminate();W.fb=[]},xb:function(a){if(a){if(a.eb){var b=
t()[a.eb+100>>2];t()[a.eb+100>>2]=0;Va(b);Va(a.eb)}a.eb=0;a.wb&&a.hb&&Va(a.hb);a.hb=0;a.worker&&(a.worker.bb=null)}},sb:function(a){W.Yb(function(){delete W.cb[a.bb.eb];W.gb.push(a);W.fb.splice(W.fb.indexOf(a),1);W.xb(a.bb);a.bb=void 0})},Yb:function(a){t()[Wa>>2]=0;try{a()}finally{t()[Wa>>2]=1}},Xb:function(){},hc:function(){for(var a in W.zb)W.zb[a]()},Ub:function(a,b){a.onmessage=function(c){var e=c.data,h=e.cmd;a.bb&&(W.Lb=a.bb.eb);if(e.targetThread&&e.targetThread!=X()){var k=W.cb[e.Dc];k?k.worker.postMessage(c.data,
e.transferList):N('Internal error! Worker sent a message "'+h+'" to target pthread '+e.targetThread+", but that thread no longer exists!")}else if("processQueuedMainThreadWork"===h)Xa();else if("spawnThread"===h)Ya(c.data);else if("cleanupThread"===h)Ra(e.thread);else if("killThread"===h){c=e.thread;if(C)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!c)throw"Internal Error! Null pthread_ptr in killThread!";t()[c+12>>2]=0;e=W.cb[c];delete W.cb[c];e.worker.terminate();
W.xb(e);W.fb.splice(W.fb.indexOf(e.worker),1);e.worker.bb=void 0}else if("cancelThread"===h){c=e.thread;if(C)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!c)throw"Internal Error! Null pthread_ptr in cancelThread!";W.cb[c].worker.postMessage({cmd:"cancel"})}else if("loaded"===h)a.loaded=!0,b&&b(a),a.mb&&(a.mb(),delete a.mb);else if("print"===h)pa("Thread "+e.threadId+": "+e.text);else if("printErr"===h)N("Thread "+e.threadId+": "+e.text);else if("alert"===
h)alert("Thread "+e.threadId+": "+e.text);else if("exit"===h)a.bb&&Atomics.load(u(),a.bb.eb+64>>2)&&W.sb(a);else if("exitProcess"===h)try{Za(e.returnCode)}catch(m){if(m instanceof L)return;throw m;}else"cancelDone"===h?W.sb(a):"objectTransfer"!==h&&("setimmediate"===c.data.target?a.postMessage(c.data):N("worker sent an unknown command "+h));W.Lb=void 0};a.onerror=function(c){N("pthread sent an error! "+c.filename+":"+c.lineno+": "+c.message)};B&&(a.on("message",function(c){a.onmessage({data:c})}),
a.on("error",function(c){a.onerror(c)}),a.on("exit",function(){}));a.postMessage({cmd:"load",urlOrBlob:v.mainScriptUrlOrBlob||_scriptDir,wasmMemory:f,wasmModule:sa})},Ib:function(){var a=ma("ort-wasm-threaded.worker.js");W.gb.push(new Worker(a))},Ob:function(){0==W.gb.length&&(W.Ib(),W.Ub(W.gb[0]));return W.gb.pop()},nc:function(a){for(a=performance.now()+a;performance.now()<a;);}};v.establishStackSpace=function(a,b){$a(a,b);ab(a)};v.invokeEntryPoint=function(a,b){return S.get(a)(b)};var bb;
bb=B?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:C?function(){return performance.now()-v.__performance_now_clock_drift}:function(){return performance.now()};function cb(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=bb();else return t()[db()>>2]=28,-1;t()[b>>2]=a/1E3|0;t()[b+4>>2]=a%1E3*1E6|0;return 0}function eb(a,b){if(C)return Y(1,1,a,b);Fa.unshift({Nb:a,ib:b})}
function fb(a){this.lb=a-16;this.dc=function(b){t()[this.lb+4>>2]=b};this.ac=function(b){t()[this.lb+8>>2]=b};this.bc=function(){t()[this.lb>>2]=0};this.$b=function(){var b=0;d()[this.lb+12>>0]=b};this.cc=function(){var b=0;d()[this.lb+13>>0]=b};this.Pb=function(b,c){this.dc(b);this.ac(c);this.bc();this.$b();this.cc()}}var gb=0;
function Ya(a){if(C)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var b=W.Ob();if(!b)return 6;if(void 0!==b.bb)throw"Internal error!";if(!a.rb)throw"Internal error, no pthread ptr!";W.fb.push(b);for(var c=R(512),e=0;128>e;++e)t()[c+4*e>>2]=0;var h=a.hb+a.jb;e=W.cb[a.rb]={worker:b,hb:a.hb,jb:a.jb,wb:a.wb,eb:a.rb};var k=e.eb>>2;Atomics.store(u(),k+16,a.detached);Atomics.store(u(),k+25,c);Atomics.store(u(),k+10,e.eb);Atomics.store(u(),k+20,a.jb);Atomics.store(u(),
k+19,h);Atomics.store(u(),k+26,a.jb);Atomics.store(u(),k+28,h);Atomics.store(u(),k+29,a.detached);c=hb()+40;Atomics.store(u(),k+43,c);b.bb=e;var m={cmd:"run",start_routine:a.ec,arg:a.ib,threadInfoStruct:a.rb,stackBase:a.hb,stackSize:a.jb};b.mb=function(){m.time=performance.now();b.postMessage(m,a.mc)};b.loaded&&(b.mb(),delete b.mb);return 0}
function ib(a,b,c){if(0>=a||a>d().length||a&1)return-28;if(la){if(Atomics.load(t(),a>>2)!=b)return-6;var e=performance.now();c=e+c;for(Atomics.exchange(t(),V>>2,a);;){e=performance.now();if(e>c)return Atomics.exchange(t(),V>>2,0),-73;e=Atomics.exchange(t(),V>>2,0);if(0==e)break;Xa();if(Atomics.load(t(),a>>2)!=b)return-6;Atomics.exchange(t(),V>>2,a)}return 0}a=Atomics.wait(t(),a>>2,b,c);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+
a;}function jb(){B||A||(qa||(qa={}),qa["Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread"]||(qa["Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread"]=1,N("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")))}
function kb(a,b){if(!a)return N("pthread_join attempted on a null thread pointer!"),71;if(C&&X()==a)return N("PThread "+a+" is attempting to join to itself!"),16;if(!C&&lb()==a)return N("Main thread "+a+" is attempting to join to itself!"),16;if(t()[a+12>>2]!==a)return N("pthread_join attempted on thread "+a+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),a+64>>2))return N("Attempted to join thread "+a+", which was already detached!"),28;for(jb();;){var c=
Atomics.load(u(),a+0>>2);if(1==c)return c=Atomics.load(u(),a+4>>2),b&&(t()[b>>2]=c),Atomics.store(u(),a+64>>2,1),C?postMessage({cmd:"cleanupThread",thread:a}):Ra(a),0;mb();C||Xa();ib(a+0,c,C?100:1)}}var nb={},ob=[null,[],[]];function pb(a,b){var c=ob[a];0===b||10===b?((1===a?pa:N)(wa(c,0)),c.length=0):c.push(b)}var qb={};function rb(a,b){if(C)return Y(2,1,a,b);a=P(a);return qb.rc(a,b)}function sb(a,b,c){return C?Y(3,1,a,b,c):0}function tb(a,b){if(C)return Y(4,1,a,b)}
function ub(a,b,c){if(C)return Y(5,1,a,b,c)}function vb(a,b,c){return C?Y(6,1,a,b,c):0}function wb(a,b){if(C)return Y(7,1,a,b)}function xb(a,b){if(C)return Y(8,1,a,b);a=P(a);return qb.sc(a,b)}function yb(a,b,c,e,h,k){if(C)b=Y(9,1,a,b,c,e,h,k);else if(k<<=12,0!==(e&16)&&0!==a%65536)b=-28;else if(0!==(e&32)){var m=65536*Math.ceil(b/65536);(a=zb(65536,m))?q().fill(0,a,a+m):a=0;a?(nb[a]={Wb:a,Tb:b,Jb:!0,fd:h,Ac:c,flags:e,offset:k},b=a):b=-48}else b=-52;return b}
function Ab(a,b){if(C)a=Y(10,1,a,b);else{var c=nb[a];0!==b&&c?(b===c.Tb&&(nb[a]=null,c.Jb&&Va(c.Wb)),a=0):a=-28}return a}function Bb(a,b,c){if(C)return Y(11,1,a,b,c)}function Cb(a,b,c){if(C)return Y(12,1,a,b,c);a=P(a);return qb.tc(a,b,c)}function Db(a){if(C)return Y(13,1,a)}function Eb(a,b){if(C)return Y(14,1,a,b)}function Fb(a){if(C)return Y(15,1,a)}function Gb(){if(C)return Y(16,1);M()}var Hb=[];
function Y(a,b){for(var c=arguments.length-2,e=Ib(),h=Jb(8*c),k=h>>3,m=0;m<c;m++){var r=arguments[2+m];ea()[k+m]=r}c=Kb(a,c,h,b);ab(e);return c}var Lb=[],Mb=[0,"undefined"!==typeof document?document:0,"undefined"!==typeof window?window:0];function Nb(a){a=2<a?P(a):a;return Mb[a]||("undefined"!==typeof document?document.querySelector(a):void 0)}
function Ob(a,b,c){var e=Nb(a);if(!e)return-4;e.qb&&(t()[e.qb>>2]=b,t()[e.qb+4>>2]=c);if(e.Db||!e.pc)e.Db&&(e=e.Db),a=!1,e.pb&&e.pb.ob&&(a=e.pb.ob.getParameter(2978),a=0===a[0]&&0===a[1]&&a[2]===e.width&&a[3]===e.height),e.width=b,e.height=c,a&&e.pb.ob.viewport(0,0,b,c);else{if(e.qb){e=t()[e.qb+8>>2];a=a?P(a):"";var h=Ib(),k=Jb(12),m=0;if(a){m=za(a)+1;var r=R(m);ya(a,r,m);m=r}t()[k>>2]=m;t()[k+4>>2]=b;t()[k+8>>2]=c;Pb(0,e,657457152,0,m,k);ab(h);return 1}return-4}return 0}
function Qb(a,b,c){return C?Y(17,1,a,b,c):Ob(a,b,c)}function Rb(a){if(!ta){try{a()}catch(b){if(b instanceof L)return;if("unwind"!==b)throw b&&"object"===typeof b&&b.stack&&N("exception thrown: "+[b,b.stack]),b;}if(!na())try{C?Sb(O):Za(O)}catch(b){if(!(b instanceof L))throw b;}}}
function Tb(a){var b=a.getExtension("ANGLE_instanced_arrays");b&&(a.vertexAttribDivisor=function(c,e){b.vertexAttribDivisorANGLE(c,e)},a.drawArraysInstanced=function(c,e,h,k){b.drawArraysInstancedANGLE(c,e,h,k)},a.drawElementsInstanced=function(c,e,h,k,m){b.drawElementsInstancedANGLE(c,e,h,k,m)})}
function Ub(a){var b=a.getExtension("OES_vertex_array_object");b&&(a.createVertexArray=function(){return b.createVertexArrayOES()},a.deleteVertexArray=function(c){b.deleteVertexArrayOES(c)},a.bindVertexArray=function(c){b.bindVertexArrayOES(c)},a.isVertexArray=function(c){return b.isVertexArrayOES(c)})}function Vb(a){var b=a.getExtension("WEBGL_draw_buffers");b&&(a.drawBuffers=function(c,e){b.drawBuffersWEBGL(c,e)})}
function Wb(a,b){a.Cb||(a.Cb=a.getContext,a.getContext=function(e,h){h=a.Cb(e,h);return"webgl"==e==h instanceof WebGLRenderingContext?h:null});var c=a.getContext("webgl",b);return c?Xb(c,b):0}function Xb(a,b){var c=R(8);t()[c+4>>2]=X();var e={wc:c,attributes:b,version:b.Vb,ob:a};a.canvas&&(a.canvas.pb=e);("undefined"===typeof b.Bb||b.Bb)&&Yb(e);return c}
function Yb(a){a||(a=Zb);if(!a.Qb){a.Qb=!0;var b=a.ob;Tb(b);Ub(b);Vb(b);b.qc=b.getExtension("EXT_disjoint_timer_query");b.zc=b.getExtension("WEBGL_multi_draw");(b.getSupportedExtensions()||[]).forEach(function(c){c.includes("lose_context")||c.includes("debug")||b.getExtension(c)})}}var Zb,$b=["default","low-power","high-performance"],ac={};
function bc(){if(!cc){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:ja||"./this.program"},b;for(b in ac)void 0===ac[b]?delete a[b]:a[b]=ac[b];var c=[];for(b in a)c.push(b+"="+a[b]);cc=c}return cc}var cc;
function dc(a,b){if(C)return Y(18,1,a,b);var c=0;bc().forEach(function(e,h){var k=b+c;h=t()[a+4*h>>2]=k;for(k=0;k<e.length;++k)d()[h++>>0]=e.charCodeAt(k);d()[h>>0]=0;c+=e.length+1});return 0}function ec(a,b){if(C)return Y(19,1,a,b);var c=bc();t()[a>>2]=c.length;var e=0;c.forEach(function(h){e+=h.length+1});t()[b>>2]=e;return 0}function fc(a){return C?Y(20,1,a):0}function jc(a,b){if(C)return Y(21,1,a,b);a=1==a||2==a?2:M();d()[b>>0]=a;return 0}
function kc(a,b,c,e){if(C)return Y(22,1,a,b,c,e);a=qb.vc(a);b=qb.uc(a,b,c);t()[e>>2]=b;return 0}function lc(a,b,c,e,h){if(C)return Y(23,1,a,b,c,e,h)}function mc(a,b,c,e){if(C)return Y(24,1,a,b,c,e);for(var h=0,k=0;k<c;k++){for(var m=t()[b+8*k>>2],r=t()[b+(8*k+4)>>2],x=0;x<r;x++)pb(a,q()[m+x]);h+=r}t()[e>>2]=h;return 0}
function nc(a,b){a=new Date(1E3*t()[a>>2]);t()[b>>2]=a.getUTCSeconds();t()[b+4>>2]=a.getUTCMinutes();t()[b+8>>2]=a.getUTCHours();t()[b+12>>2]=a.getUTCDate();t()[b+16>>2]=a.getUTCMonth();t()[b+20>>2]=a.getUTCFullYear()-1900;t()[b+24>>2]=a.getUTCDay();t()[b+36>>2]=0;t()[b+32>>2]=0;a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;t()[b+28>>2]=a;nc.Ab||(nc.Ab=Aa("GMT"));t()[b+40>>2]=nc.Ab;return b}
function oc(){function a(m){return(m=m.toTimeString().match(/\(([A-Za-z ]+)\)$/))?m[1]:"GMT"}if(C)return Y(25,1);if(!oc.Kb){oc.Kb=!0;var b=(new Date).getFullYear(),c=new Date(b,0,1),e=new Date(b,6,1);b=c.getTimezoneOffset();var h=e.getTimezoneOffset(),k=Math.max(b,h);t()[pc()>>2]=60*k;t()[qc()>>2]=Number(b!=h);c=a(c);e=a(e);c=Aa(c);e=Aa(e);h<b?(t()[Z()>>2]=c,t()[Z()+4>>2]=e):(t()[Z()>>2]=e,t()[Z()+4>>2]=c)}}function rc(a){return 0===a%4&&(0!==a%100||0===a%400)}
function sc(a,b){for(var c=0,e=0;e<=b;c+=a[e++]);return c}var tc=[31,29,31,30,31,30,31,31,30,31,30,31],uc=[31,28,31,30,31,30,31,31,30,31,30,31];function vc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),e=(rc(a.getFullYear())?tc:uc)[c];if(b>e-a.getDate())b-=e-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}
function wc(a,b,c,e){function h(g,p,w){for(g="number"===typeof g?g.toString():g||"";g.length<p;)g=w[0]+g;return g}function k(g,p){return h(g,p,"0")}function m(g,p){function w(gc){return 0>gc?-1:0<gc?1:0}var Q;0===(Q=w(g.getFullYear()-p.getFullYear()))&&0===(Q=w(g.getMonth()-p.getMonth()))&&(Q=w(g.getDate()-p.getDate()));return Q}function r(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),
0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function x(g){g=vc(new Date(g.ab+1900,0,1),g.vb);var p=new Date(g.getFullYear()+1,0,4),w=r(new Date(g.getFullYear(),0,4));p=r(p);return 0>=m(w,g)?0>=m(p,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var E=t()[e+40>>2];e={kc:t()[e>>2],jc:t()[e+4>>2],tb:t()[e+8>>2],nb:t()[e+12>>2],kb:t()[e+16>>2],ab:t()[e+20>>2],ub:t()[e+24>>2],vb:t()[e+28>>2],Ec:t()[e+
32>>2],ic:t()[e+36>>2],lc:E?P(E):""};c=P(c);E={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var G in E)c=c.replace(new RegExp(G,"g"),E[G]);var hc="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
ic="January February March April May June July August September October November December".split(" ");E={"%a":function(g){return hc[g.ub].substring(0,3)},"%A":function(g){return hc[g.ub]},"%b":function(g){return ic[g.kb].substring(0,3)},"%B":function(g){return ic[g.kb]},"%C":function(g){return k((g.ab+1900)/100|0,2)},"%d":function(g){return k(g.nb,2)},"%e":function(g){return h(g.nb,2," ")},"%g":function(g){return x(g).toString().substring(2)},"%G":function(g){return x(g)},"%H":function(g){return k(g.tb,
2)},"%I":function(g){g=g.tb;0==g?g=12:12<g&&(g-=12);return k(g,2)},"%j":function(g){return k(g.nb+sc(rc(g.ab+1900)?tc:uc,g.kb-1),3)},"%m":function(g){return k(g.kb+1,2)},"%M":function(g){return k(g.jc,2)},"%n":function(){return"\n"},"%p":function(g){return 0<=g.tb&&12>g.tb?"AM":"PM"},"%S":function(g){return k(g.kc,2)},"%t":function(){return"\t"},"%u":function(g){return g.ub||7},"%U":function(g){var p=new Date(g.ab+1900,0,1),w=0===p.getDay()?p:vc(p,7-p.getDay());g=new Date(g.ab+1900,g.kb,g.nb);return 0>
m(w,g)?k(Math.ceil((31-w.getDate()+(sc(rc(g.getFullYear())?tc:uc,g.getMonth()-1)-31)+g.getDate())/7),2):0===m(w,p)?"01":"00"},"%V":function(g){var p=new Date(g.ab+1901,0,4),w=r(new Date(g.ab+1900,0,4));p=r(p);var Q=vc(new Date(g.ab+1900,0,1),g.vb);return 0>m(Q,w)?"53":0>=m(p,Q)?"01":k(Math.ceil((w.getFullYear()<g.ab+1900?g.vb+32-w.getDate():g.vb+1-w.getDate())/7),2)},"%w":function(g){return g.ub},"%W":function(g){var p=new Date(g.ab,0,1),w=1===p.getDay()?p:vc(p,0===p.getDay()?1:7-p.getDay()+1);g=
new Date(g.ab+1900,g.kb,g.nb);return 0>m(w,g)?k(Math.ceil((31-w.getDate()+(sc(rc(g.getFullYear())?tc:uc,g.getMonth()-1)-31)+g.getDate())/7),2):0===m(w,p)?"01":"00"},"%y":function(g){return(g.ab+1900).toString().substring(2)},"%Y":function(g){return g.ab+1900},"%z":function(g){g=g.ic;var p=0<=g;g=Math.abs(g)/60;return(p?"+":"-")+String("0000"+(g/60*100+g%60)).slice(-4)},"%Z":function(g){return g.lc},"%%":function(){return"%"}};for(G in E)c.includes(G)&&(c=c.replace(new RegExp(G,"g"),E[G](e)));G=xc(c);
if(G.length>b)return 0;Ba(G,a);return G.length-1}var yc=[null,eb,rb,sb,tb,ub,vb,wb,xb,yb,Ab,Bb,Cb,Db,Eb,Fb,Gb,Qb,dc,ec,fc,jc,kc,lc,mc,oc];function xc(a){var b=Array(za(a)+1);xa(a,b,0,b.length);return b}
var Ac={h:function(a,b,c,e){M("Assertion failed: "+P(a)+", at: "+[b?P(b):"unknown filename",c,e?P(e):"unknown function"])},M:function(a,b){return cb(a,b)},b:function(a){return R(a+16)+16},d:function(a,b){return eb(a,b)},e:function(a,b){W.yb.push(function(){S.get(a)(b)})},c:function(a,b,c){(new fb(a)).Pb(b,c);gb++;throw a;},Z:function(a,b,c,e){if("undefined"===typeof SharedArrayBuffer)return N("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!a)return N("pthread_create called with a null thread pointer!"),
28;var h=[];if(C&&0===h.length)return zc(687865856,a,b,c,e);var k=0,m=0;if(b&&-1!=b){var r=t()[b>>2];r+=81920;k=t()[b+8>>2];m=0!==t()[b+12>>2]}else r=2097152;(b=0==k)?k=zb(16,r):(k-=r,assert(0<k));for(var x=R(228),E=0;57>E;++E)u()[(x>>2)+E]=0;t()[a>>2]=x;t()[x+12>>2]=x;a=x+152;t()[a>>2]=a;c={hb:k,jb:r,wb:b,detached:m,ec:c,rb:x,ib:e,mc:h};return C?(c.oc="spawnThread",postMessage(c,h),0):Ya(c)},X:function(a){C?W.Hb(a):(W.Eb(),Za(a));throw"unwind";},Y:function(a,b){return kb(a,b)},L:rb,s:sb,S:tb,V:ub,
u:function(){return 42},F:vb,Q:wb,P:xb,U:yb,T:Ab,q:Bb,K:Cb,N:Db,v:Eb,O:Fb,da:function(a,b){if(a==b)postMessage({cmd:"processQueuedMainThreadWork"});else if(C)postMessage({targetThread:a,cmd:"processThreadQueue"});else{a=(a=W.cb[a])&&a.worker;if(!a)return;a.postMessage({cmd:"processThreadQueue"})}return 1},f:Gb,w:cb,ga:function(a,b){return a-b},A:function(){M("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},l:function(){M("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},
C:function(){M("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},z:function(){M("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},ea:function(a,b,c){Hb.length=0;var e;for(c>>=2;e=q()[b++];)(e=105>e)&&c&1&&c++,Hb.push(e?ea()[c++>>1]:t()[c]),++c;return Oa[a].apply(null,Hb)},G:jb,n:function(){},k:ib,j:Qa,W:function(){return 2147483648},i:bb,D:function(a,
b,c){q().copyWithin(a,b,b+c)},o:function(){return B?__webpack_require__(/*! os */ "?aedb").cpus().length:navigator.hardwareConcurrency},aa:function(a,b,c){Lb.length=b;c>>=3;for(var e=0;e<b;e++)Lb[e]=ea()[c+e];return(0>a?Oa[-a-1]:yc[a]).apply(null,Lb)},E:function(a){var b=q().length;a>>>=0;if(a<=b||2147483648<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);e=Math.max(a,e);0<e%65536&&(e+=65536-e%65536);a:{try{f.grow(Math.min(2147483648,e)-l.byteLength+65535>>>16);n(f.buffer);var h=1;break a}catch(k){}h=
void 0}if(h)return!0}return!1},ba:function(a,b,c){return Nb(a)?Ob(a,b,c):Qb(a,b,c)},x:function(){},$:function(a,b,c){Ha+=1;return setTimeout(function(){--Ha;Rb(function(){S.get(a)(c)})},b)},ca:function(a,b){b>>=2;var c=t()[b+6];b={alpha:!!t()[b],depth:!!t()[b+1],stencil:!!t()[b+2],antialias:!!t()[b+3],premultipliedAlpha:!!t()[b+4],preserveDrawingBuffer:!!t()[b+5],powerPreference:$b[c],failIfMajorPerformanceCaveat:!!t()[b+7],Vb:t()[b+8],yc:t()[b+9],Bb:t()[b+10],Mb:t()[b+11],Bc:t()[b+12],Cc:t()[b+13]};
a=Nb(a);return!a||b.Mb?0:Wb(a,b)},I:dc,J:ec,m:fc,H:jc,t:kc,B:lc,p:mc,R:function(a){var b=Date.now();t()[a>>2]=b/1E3|0;t()[a+4>>2]=b%1E3*1E3|0;return 0},ha:nc,_:function(){W.Rb()},r:function(a,b){oc();a=new Date(1E3*t()[a>>2]);t()[b>>2]=a.getSeconds();t()[b+4>>2]=a.getMinutes();t()[b+8>>2]=a.getHours();t()[b+12>>2]=a.getDate();t()[b+16>>2]=a.getMonth();t()[b+20>>2]=a.getFullYear()-1900;t()[b+24>>2]=a.getDay();var c=new Date(a.getFullYear(),0,1),e=(a.getTime()-c.getTime())/864E5|0;t()[b+28>>2]=e;t()[b+
36>>2]=-(60*a.getTimezoneOffset());e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();a=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0;t()[b+32>>2]=a;a=t()[Z()+(a?4:0)>>2];t()[b+40>>2]=a;return b},a:f||v.wasmMemory,y:function(a){oc();var b=new Date(t()[a+20>>2]+1900,t()[a+16>>2],t()[a+12>>2],t()[a+8>>2],t()[a+4>>2],t()[a>>2],0),c=t()[a+32>>2],e=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),m=h.getTimezoneOffset(),
r=Math.min(m,k);0>c?t()[a+32>>2]=Number(k!=m&&r==e):0<c!=(r==e)&&(k=Math.max(m,k),b.setTime(b.getTime()+6E4*((0<c?r:k)-e)));t()[a+24>>2]=b.getDay();c=(b.getTime()-h.getTime())/864E5|0;t()[a+28>>2]=c;t()[a>>2]=b.getSeconds();t()[a+4>>2]=b.getMinutes();t()[a+8>>2]=b.getHours();t()[a+12>>2]=b.getDate();t()[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},fa:wc,g:function(a,b,c,e){return wc(a,b,c,e)}};
(function(){function a(h,k){v.asm=h.exports;S=v.asm.Ca;Ea.unshift(v.asm.ia);W.zb.push(v.asm.Ha);sa=k;C||(T--,v.monitorRunDependencies&&v.monitorRunDependencies(T),0==T&&(null!==Ja&&(clearInterval(Ja),Ja=null),Ka&&(h=Ka,Ka=null,h())))}function b(h){a(h.instance,h.module)}function c(h){return Na().then(function(k){return WebAssembly.instantiate(k,e)}).then(h,function(k){N("failed to asynchronously prepare wasm: "+k);M(k)})}var e={a:Ac};C||(T++,v.monitorRunDependencies&&v.monitorRunDependencies(T));
if(v.instantiateWasm)try{return v.instantiateWasm(e,a)}catch(h){return N("Module.instantiateWasm callback failed with error: "+h),!1}(function(){return ra||"function"!==typeof WebAssembly.instantiateStreaming||La()||U.startsWith("file://")||"function"!==typeof fetch?c(b):fetch(U,{credentials:"same-origin"}).then(function(h){return WebAssembly.instantiateStreaming(h,e).then(b,function(k){N("wasm streaming compile failed: "+k);N("falling back to ArrayBuffer instantiation");return c(b)})})})().catch(ia);
return{}})();v.___wasm_call_ctors=function(){return(v.___wasm_call_ctors=v.asm.ia).apply(null,arguments)};v._OrtInit=function(){return(v._OrtInit=v.asm.ja).apply(null,arguments)};v._OrtCreateSessionOptions=function(){return(v._OrtCreateSessionOptions=v.asm.ka).apply(null,arguments)};v._OrtAddSessionConfigEntry=function(){return(v._OrtAddSessionConfigEntry=v.asm.la).apply(null,arguments)};v._OrtReleaseSessionOptions=function(){return(v._OrtReleaseSessionOptions=v.asm.ma).apply(null,arguments)};
v._OrtCreateSession=function(){return(v._OrtCreateSession=v.asm.na).apply(null,arguments)};v._OrtReleaseSession=function(){return(v._OrtReleaseSession=v.asm.oa).apply(null,arguments)};v._OrtGetInputCount=function(){return(v._OrtGetInputCount=v.asm.pa).apply(null,arguments)};v._OrtGetOutputCount=function(){return(v._OrtGetOutputCount=v.asm.qa).apply(null,arguments)};v._OrtGetInputName=function(){return(v._OrtGetInputName=v.asm.ra).apply(null,arguments)};
v._OrtGetOutputName=function(){return(v._OrtGetOutputName=v.asm.sa).apply(null,arguments)};v._OrtFree=function(){return(v._OrtFree=v.asm.ta).apply(null,arguments)};v._OrtCreateTensor=function(){return(v._OrtCreateTensor=v.asm.ua).apply(null,arguments)};v._OrtGetTensorData=function(){return(v._OrtGetTensorData=v.asm.va).apply(null,arguments)};v._OrtReleaseTensor=function(){return(v._OrtReleaseTensor=v.asm.wa).apply(null,arguments)};
v._OrtCreateRunOptions=function(){return(v._OrtCreateRunOptions=v.asm.xa).apply(null,arguments)};v._OrtAddRunConfigEntry=function(){return(v._OrtAddRunConfigEntry=v.asm.ya).apply(null,arguments)};v._OrtReleaseRunOptions=function(){return(v._OrtReleaseRunOptions=v.asm.za).apply(null,arguments)};v._OrtRun=function(){return(v._OrtRun=v.asm.Aa).apply(null,arguments)};v._OrtEndProfiling=function(){return(v._OrtEndProfiling=v.asm.Ba).apply(null,arguments)};
var R=v._malloc=function(){return(R=v._malloc=v.asm.Da).apply(null,arguments)},db=v.___errno_location=function(){return(db=v.___errno_location=v.asm.Ea).apply(null,arguments)},Va=v._free=function(){return(Va=v._free=v.asm.Fa).apply(null,arguments)},X=v._pthread_self=function(){return(X=v._pthread_self=v.asm.Ga).apply(null,arguments)};v._emscripten_tls_init=function(){return(v._emscripten_tls_init=v.asm.Ha).apply(null,arguments)};
v._emscripten_current_thread_process_queued_calls=function(){return(v._emscripten_current_thread_process_queued_calls=v.asm.Ia).apply(null,arguments)};
var Ta=v._emscripten_register_main_browser_thread_id=function(){return(Ta=v._emscripten_register_main_browser_thread_id=v.asm.Ja).apply(null,arguments)},lb=v._emscripten_main_browser_thread_id=function(){return(lb=v._emscripten_main_browser_thread_id=v.asm.Ka).apply(null,arguments)},zc=v._emscripten_sync_run_in_main_thread_4=function(){return(zc=v._emscripten_sync_run_in_main_thread_4=v.asm.La).apply(null,arguments)},Xa=v._emscripten_main_thread_process_queued_calls=function(){return(Xa=v._emscripten_main_thread_process_queued_calls=
v.asm.Ma).apply(null,arguments)},Kb=v._emscripten_run_in_main_runtime_thread_js=function(){return(Kb=v._emscripten_run_in_main_runtime_thread_js=v.asm.Na).apply(null,arguments)},Pb=v.__emscripten_call_on_thread=function(){return(Pb=v.__emscripten_call_on_thread=v.asm.Oa).apply(null,arguments)},mb=v._pthread_testcancel=function(){return(mb=v._pthread_testcancel=v.asm.Pa).apply(null,arguments)},Sb=v._pthread_exit=function(){return(Sb=v._pthread_exit=v.asm.Qa).apply(null,arguments)},Sa=v.__emscripten_thread_init=
function(){return(Sa=v.__emscripten_thread_init=v.asm.Ra).apply(null,arguments)},hb=v._emscripten_get_global_libc=function(){return(hb=v._emscripten_get_global_libc=v.asm.Sa).apply(null,arguments)},Ua=v.___pthread_tsd_run_dtors=function(){return(Ua=v.___pthread_tsd_run_dtors=v.asm.Ta).apply(null,arguments)},Z=v.__get_tzname=function(){return(Z=v.__get_tzname=v.asm.Ua).apply(null,arguments)},qc=v.__get_daylight=function(){return(qc=v.__get_daylight=v.asm.Va).apply(null,arguments)},pc=v.__get_timezone=
function(){return(pc=v.__get_timezone=v.asm.Wa).apply(null,arguments)},Ib=v.stackSave=function(){return(Ib=v.stackSave=v.asm.Xa).apply(null,arguments)},ab=v.stackRestore=function(){return(ab=v.stackRestore=v.asm.Ya).apply(null,arguments)},Jb=v.stackAlloc=function(){return(Jb=v.stackAlloc=v.asm.Za).apply(null,arguments)},$a=v._emscripten_stack_set_limits=function(){return($a=v._emscripten_stack_set_limits=v.asm._a).apply(null,arguments)},zb=v._memalign=function(){return(zb=v._memalign=v.asm.$a).apply(null,
arguments)},Wa=v.__emscripten_allow_main_runtime_queued_calls=973296,V=v.__emscripten_main_thread_futex=977204;v.UTF8ToString=P;v.stringToUTF8=ya;v.lengthBytesUTF8=za;v.keepRuntimeAlive=na;v.PThread=W;v.stackSave=Ib;v.stackRestore=ab;v.stackAlloc=Jb;v.PThread=W;v.wasmMemory=f;v.ExitStatus=L;var Bc;function L(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}Ka=function Cc(){Bc||Dc();Bc||(Ka=Cc)};
function Dc(){function a(){if(!Bc&&(Bc=!0,v.calledRun=!0,!ta)){C||Pa(Ea);ha(v);if(v.onRuntimeInitialized)v.onRuntimeInitialized();if(!C){if(v.postRun)for("function"==typeof v.postRun&&(v.postRun=[v.postRun]);v.postRun.length;){var b=v.postRun.shift();Ga.unshift(b)}Pa(Ga)}}}if(!(0<T))if(C)ha(v),C||Pa(Ea),postMessage({cmd:"loaded"});else{if(!C){if(v.preRun)for("function"==typeof v.preRun&&(v.preRun=[v.preRun]);v.preRun.length;)Ia();Pa(Da)}0<T||(v.setStatus?(v.setStatus("Running..."),setTimeout(function(){setTimeout(function(){v.setStatus("")},
1);a()},1)):a())}}v.run=Dc;function Za(a){O=a;if(C)throw postMessage({cmd:"exitProcess",returnCode:a}),new L(a);na()||(W.Gb(),C||(Pa(Fa),"undefined"!==typeof _fflush&&_fflush(0),ob[1].length&&pb(1,10),ob[2].length&&pb(2,10)));O=a;if(!na()){W.Gb();if(v.onExit)v.onExit(a);ta=!0}ka(a,new L(a))}if(v.preInit)for("function"==typeof v.preInit&&(v.preInit=[v.preInit]);0<v.preInit.length;)v.preInit.pop()();C&&(noExitRuntime=!1,W.Sb());Dc();


  return ortWasmThreaded.ready
}
);
})();
if (true)
  module.exports = ortWasmThreaded;
else {}


/***/ }),

/***/ "./lib/wasm/binding/ort-wasm-threaded.worker.js":
/*!******************************************************!*\
  !*** ./lib/wasm/binding/ort-wasm-threaded.worker.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";
module.exports = "\"use strict\";var Module={};if(typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\"){var nodeWorkerThreads=require(\"worker_threads\");var parentPort=nodeWorkerThreads.parentPort;parentPort.on(\"message\",function(data){onmessage({data:data})});var nodeFS=require(\"fs\");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(nodeFS.readFileSync(f,\"utf8\"))},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(\" \");console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:text,threadId:Module[\"_pthread_self\"]()})}var err=threadPrintErr;self.alert=threadAlert;Module[\"instantiateWasm\"]=function(info,receiveInstance){var instance=new WebAssembly.Instance(Module[\"wasmModule\"],info);receiveInstance(instance);Module[\"wasmModule\"]=null;return instance.exports};function moduleLoaded(){}self.onmessage=function(e){try{if(e.data.cmd===\"load\"){Module[\"wasmModule\"]=e.data.wasmModule;Module[\"wasmMemory\"]=e.data.wasmMemory;Module[\"buffer\"]=Module[\"wasmMemory\"].buffer;Module[\"ENVIRONMENT_IS_PTHREAD\"]=true;if(typeof e.data.urlOrBlob===\"string\"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module).then(function(instance){Module=instance;moduleLoaded()})}else if(e.data.cmd===\"objectTransfer\"){Module[\"PThread\"].receiveObjectTransfer(e.data)}else if(e.data.cmd===\"run\"){Module[\"__performance_now_clock_drift\"]=performance.now()-e.data.time;Module[\"__emscripten_thread_init\"](e.data.threadInfoStruct,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0);var max=e.data.stackBase;var top=e.data.stackBase+e.data.stackSize;Module[\"establishStackSpace\"](top,max);Module[\"PThread\"].receiveObjectTransfer(e.data);Module[\"PThread\"].threadInit();try{var result=Module[\"invokeEntryPoint\"](e.data.start_routine,e.data.arg);if(Module[\"keepRuntimeAlive\"]()){Module[\"PThread\"].setExitStatus(result)}else{Module[\"PThread\"].threadExit(result)}}catch(ex){if(ex===\"Canceled!\"){Module[\"PThread\"].threadCancel()}else if(ex!=\"unwind\"){if(ex instanceof Module[\"ExitStatus\"]){if(Module[\"keepRuntimeAlive\"]()){}else{Module[\"PThread\"].threadExit(ex.status)}}else{Module[\"PThread\"].threadExit(-2);throw ex}}}}else if(e.data.cmd===\"cancel\"){if(Module[\"_pthread_self\"]()){Module[\"PThread\"].threadCancel()}}else if(e.data.target===\"setimmediate\"){}else if(e.data.cmd===\"processThreadQueue\"){if(Module[\"_pthread_self\"]()){Module[\"_emscripten_current_thread_process_queued_calls\"]()}}else{err(\"worker.js received unknown command \"+e.data.cmd);err(e.data)}}catch(ex){err(\"worker.js onmessage() captured an uncaught exception: \"+ex);if(ex&&ex.stack)err(ex.stack);throw ex}};\r\n";

/***/ }),

/***/ "./lib/wasm/binding/ort-wasm.js":
/*!**************************************!*\
  !*** ./lib/wasm/binding/ort-wasm.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var __filename = "/index.js";
var __dirname = "/";

var ortWasm = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(ortWasm) {
  ortWasm = ortWasm || {};


var c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,g;c.ready=new Promise(function(a,b){aa=a;g=b});var r={},t;for(t in c)c.hasOwnProperty(t)&&(r[t]=c[t]);var v="./this.program",ba="object"===typeof window,w="function"===typeof importScripts,ca="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node,x="",y,z,B,C,D;
if(ca)x=w?__webpack_require__(/*! path */ "?75c6").dirname(x)+"/":__dirname+"/",y=function(a,b){C||(C=__webpack_require__(/*! fs */ "?63c8"));D||(D=__webpack_require__(/*! path */ "?75c6"));a=D.normalize(a);return C.readFileSync(a,b?null:"utf8")},B=function(a){a=y(a,!0);a.buffer||(a=new Uint8Array(a));a.buffer||E("Assertion failed: undefined");return a},z=function(a,b,e){C||(C=__webpack_require__(/*! fs */ "?63c8"));D||(D=__webpack_require__(/*! path */ "?75c6"));a=D.normalize(a);C.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(v=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",
function(a){throw a;}),process.on("unhandledRejection",E),c.inspect=function(){return"[Emscripten Module object]"};else if(ba||w)w?x=self.location.href:"undefined"!==typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf("blob:")?x=x.substr(0,x.lastIndexOf("/")+1):x="",y=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.send(null);return b.responseText},w&&(B=function(a){var b=new XMLHttpRequest;b.open("GET",a,!1);b.responseType="arraybuffer";
b.send(null);return new Uint8Array(b.response)}),z=function(a,b,e){var f=new XMLHttpRequest;f.open("GET",a,!0);f.responseType="arraybuffer";f.onload=function(){200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var da=c.print||console.log.bind(console),F=c.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(c[t]=r[t]);r=null;c.thisProgram&&(v=c.thisProgram);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;
"object"!==typeof WebAssembly&&E("no native wasm support detected");var I,ea=!1,fa="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;
function ha(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&fa)return fa.decode(a.subarray(b,e));for(f="";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function J(a,b){return a?ha(K,a,b):""}
function L(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}
function ia(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ja(a){var b=ia(a)+1,e=ka(b);e&&L(a,M,e,b);return e}var la,M,K,N;
function ma(){var a=I.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=K=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[],ra=[];function sa(){var a=c.preRun.shift();oa.unshift(a)}var O=0,ta=null,P=null;c.preloadedImages={};c.preloadedAudios={};
function E(a){if(c.onAbort)c.onAbort(a);F(a);ea=!0;a=new WebAssembly.RuntimeError("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");g(a);throw a;}function ua(){return Q.startsWith("data:application/octet-stream;base64,")}var Q;Q="ort-wasm.wasm";if(!ua()){var va=Q;Q=c.locateFile?c.locateFile(va,x):x+va}function wa(){var a=Q;try{if(a==Q&&H)return new Uint8Array(H);if(B)return B(a);throw"both async and sync fetching of the wasm failed";}catch(b){E(b)}}
function xa(){if(!H&&(ba||w)){if("function"===typeof fetch&&!Q.startsWith("file://"))return fetch(Q,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw"failed to load wasm binary file at '"+Q+"'";return a.arrayBuffer()}).catch(function(){return wa()});if(z)return new Promise(function(a,b){z(Q,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return wa()})}
function ya(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b(c);else{var e=b.Ea;"number"===typeof e?void 0===b.xa?na.get(e)():na.get(e)(b.xa):e(void 0===b.xa?null:b.xa)}}}function za(a){this.ya=a-16;this.Na=function(b){N[this.ya+4>>2]=b};this.Ka=function(b){N[this.ya+8>>2]=b};this.La=function(){N[this.ya>>2]=0};this.Ja=function(){M[this.ya+12>>0]=0};this.Ma=function(){M[this.ya+13>>0]=0};this.Ga=function(b,e){this.Na(b);this.Ka(e);this.La();this.Ja();this.Ma()}}
var Aa=0,Ba={},Ca=[null,[],[]],R={},S;S=ca?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:function(){return performance.now()};var Da={};function Ea(){if(!Fa){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"===typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"},b;for(b in Da)void 0===Da[b]?delete a[b]:a[b]=Da[b];var e=[];for(b in a)e.push(b+"="+a[b]);Fa=e}return Fa}var Fa;
function T(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+36>>2]=0;N[b+32>>2]=0;N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;T.Da||(T.Da=ja("GMT"));N[b+40>>2]=T.Da;return b}
function Ga(){function a(l){return(l=l.toTimeString().match(/\(([A-Za-z ]+)\)$/))?l[1]:"GMT"}if(!Ka){Ka=!0;var b=(new Date).getFullYear(),e=new Date(b,0,1),f=new Date(b,6,1);b=e.getTimezoneOffset();var h=f.getTimezoneOffset(),k=Math.max(b,h);N[La()>>2]=60*k;N[Ma()>>2]=Number(b!=h);e=a(e);f=a(f);e=ja(e);f=ja(f);h<b?(N[U()>>2]=e,N[U()+4>>2]=f):(N[U()>>2]=f,N[U()+4>>2]=e)}}var Ka;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Na(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}
var W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}
function Oa(a,b,e,f){function h(d,m,n){for(d="number"===typeof d?d.toString():d||"";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,"0")}function l(d,m){function n(Ha){return 0>Ha?-1:0<Ha?1:0}var A;0===(A=n(d.getFullYear()-m.getFullYear()))&&0===(A=n(d.getMonth()-m.getMonth()))&&(A=n(d.getDate()-m.getDate()));return A}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),
0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function G(d){d=Y(new Date(d.va+1900,0,1),d.Ca);var m=new Date(d.getFullYear()+1,0,4),n=q(new Date(d.getFullYear(),0,4));m=q(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Qa:N[f>>2],Pa:N[f+4>>2],Aa:N[f+8>>2],za:N[f+12>>2],wa:N[f+16>>2],va:N[f+20>>2],Ba:N[f+24>>2],Ca:N[f+28>>2],Ya:N[f+32>>2],Oa:N[f+
36>>2],Ra:u?J(u):""};e=J(e);u={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var p in u)e=e.replace(new RegExp(p,"g"),u[p]);var Ia="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
Ja="January February March April May June July August September October November December".split(" ");u={"%a":function(d){return Ia[d.Ba].substring(0,3)},"%A":function(d){return Ia[d.Ba]},"%b":function(d){return Ja[d.wa].substring(0,3)},"%B":function(d){return Ja[d.wa]},"%C":function(d){return k((d.va+1900)/100|0,2)},"%d":function(d){return k(d.za,2)},"%e":function(d){return h(d.za,2," ")},"%g":function(d){return G(d).toString().substring(2)},"%G":function(d){return G(d)},"%H":function(d){return k(d.Aa,
2)},"%I":function(d){d=d.Aa;0==d?d=12:12<d&&(d-=12);return k(d,2)},"%j":function(d){return k(d.za+Na(V(d.va+1900)?W:X,d.wa-1),3)},"%m":function(d){return k(d.wa+1,2)},"%M":function(d){return k(d.Pa,2)},"%n":function(){return"\n"},"%p":function(d){return 0<=d.Aa&&12>d.Aa?"AM":"PM"},"%S":function(d){return k(d.Qa,2)},"%t":function(){return"\t"},"%u":function(d){return d.Ba||7},"%U":function(d){var m=new Date(d.va+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.va+1900,d.wa,d.za);return 0>
l(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?"01":"00"},"%V":function(d){var m=new Date(d.va+1901,0,4),n=q(new Date(d.va+1900,0,4));m=q(m);var A=Y(new Date(d.va+1900,0,1),d.Ca);return 0>l(A,n)?"53":0>=l(m,A)?"01":k(Math.ceil((n.getFullYear()<d.va+1900?d.Ca+32-n.getDate():d.Ca+1-n.getDate())/7),2)},"%w":function(d){return d.Ba},"%W":function(d){var m=new Date(d.va,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.va+
1900,d.wa,d.za);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?"01":"00"},"%y":function(d){return(d.va+1900).toString().substring(2)},"%Y":function(d){return d.va+1900},"%z":function(d){d=d.Oa;var m=0<=d;d=Math.abs(d)/60;return(m?"+":"-")+String("0000"+(d/60*100+d%60)).slice(-4)},"%Z":function(d){return d.Ra},"%%":function(){return"%"}};for(p in u)e.includes(p)&&(e=e.replace(new RegExp(p,"g"),u[p](f)));p=Pa(e);if(p.length>b)return 0;
M.set(p,a);return p.length-1}function Pa(a){var b=Array(ia(a)+1);L(a,b,0,b.length);return b}
var Ta={a:function(a){return ka(a+16)+16},c:function(a,b){qa.unshift({Ea:a,xa:b})},d:function(a,b){qa.unshift({Ea:a,xa:b})},b:function(a,b,e){(new za(a)).Ga(b,e);Aa++;throw a;},D:function(a,b){a=J(a);return R.Sa(a,b)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(a,b){a=J(a);return R.Ta(a,b)},K:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Qa(65536,a);
l?(K.fill(0,l,l+a),a=l):a=0;a?(Ba[a]={Ia:a,Ha:b,Fa:!0,fd:h,Xa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},J:function(a,b){var e=Ba[a];0!==b&&e?(b===e.Ha&&(Ba[a]=null,e.Fa&&Ra(e.Ia)),a=0):a=-28;return a},j:function(){},C:function(a,b,e){a=J(a);return R.Ua(a,b,e)},E:function(){},r:function(){},F:function(){},h:function(){E()},p:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=S();else return N[Sa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},s:function(a,b){return a-
b},P:function(){E("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},g:function(){E("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Q:function(){E("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},O:function(){E("To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking")},
M:function(){return 2147483648},v:function(a,b,e){K.copyWithin(a,b,b+e)},i:function(a){var b=K.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{I.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},B:function(a){for(var b=S();S()-b<a;);},z:function(a,b){var e=0;Ea().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>
0]=f.charCodeAt(k);M[h>>0]=0;e+=f.length+1});return 0},A:function(a,b){var e=Ea();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},f:function(){return 0},y:function(a,b){a=1==a||2==a?2:E();M[b>>0]=a;return 0},n:function(a,b,e,f){a=R.Wa(a);b=R.Va(a,b,e);N[f>>2]=b;return 0},u:function(){},q:function(a,b,e,f){for(var h=0,k=0;k<e;k++){for(var l=N[b+8*k>>2],q=N[b+(8*k+4)>>2],G=0;G<q;G++){var u=K[l+G],p=Ca[a];0===u||10===u?((1===a?da:F)(ha(p,0)),p.length=0):p.push(u)}h+=
q}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+4>>2]=b%1E3*1E3|0;return 0},t:T,l:function(a,b){Ga();a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=
e.getTimezoneOffset();a=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0;N[b+32>>2]=a;a=N[U()+(a?4:0)>>2];N[b+40>>2]=a;return b},k:function(a){Ga();var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),q=Math.min(l,k);0>e?N[a+32>>2]=Number(k!=l&&q==f):0<e!=(q==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?q:k)-f)));N[a+
24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},N:Oa,e:function(a,b,e,f){return Oa(a,b,e,f)}};
(function(){function a(h){c.asm=h.exports;I=c.asm.R;ma();na=c.asm.ua;pa.unshift(c.asm.S);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==ta&&(clearInterval(ta),ta=null),P&&(h=P,P=null,h()))}function b(h){a(h.instance)}function e(h){return xa().then(function(k){return WebAssembly.instantiate(k,f)}).then(h,function(k){F("failed to asynchronously prepare wasm: "+k);E(k)})}var f={a:Ta};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,
a)}catch(h){return F("Module.instantiateWasm callback failed with error: "+h),!1}(function(){return H||"function"!==typeof WebAssembly.instantiateStreaming||ua()||Q.startsWith("file://")||"function"!==typeof fetch?e(b):fetch(Q,{credentials:"same-origin"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){F("wasm streaming compile failed: "+k);F("falling back to ArrayBuffer instantiation");return e(b)})})})().catch(g);return{}})();
c.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.S).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.T).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.U).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.V).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.W).apply(null,arguments)};
c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.X).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Y).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Z).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm._).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.$).apply(null,arguments)};
c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.aa).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.ba).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.ca).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.da).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ea).apply(null,arguments)};
c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.fa).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ga).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ha).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ia).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ja).apply(null,arguments)};
var ka=c._malloc=function(){return(ka=c._malloc=c.asm.ka).apply(null,arguments)},Sa=c.___errno_location=function(){return(Sa=c.___errno_location=c.asm.la).apply(null,arguments)},Ra=c._free=function(){return(Ra=c._free=c.asm.ma).apply(null,arguments)},U=c.__get_tzname=function(){return(U=c.__get_tzname=c.asm.na).apply(null,arguments)},Ma=c.__get_daylight=function(){return(Ma=c.__get_daylight=c.asm.oa).apply(null,arguments)},La=c.__get_timezone=function(){return(La=c.__get_timezone=c.asm.pa).apply(null,
arguments)},Ua=c.stackSave=function(){return(Ua=c.stackSave=c.asm.qa).apply(null,arguments)},Va=c.stackRestore=function(){return(Va=c.stackRestore=c.asm.ra).apply(null,arguments)},Wa=c.stackAlloc=function(){return(Wa=c.stackAlloc=c.asm.sa).apply(null,arguments)},Qa=c._memalign=function(){return(Qa=c._memalign=c.asm.ta).apply(null,arguments)};c.UTF8ToString=J;c.stringToUTF8=function(a,b,e){return L(a,K,b,e)};c.lengthBytesUTF8=ia;c.stackSave=Ua;c.stackRestore=Va;c.stackAlloc=Wa;var Z;
P=function Xa(){Z||Ya();Z||(P=Xa)};
function Ya(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ea)){ya(pa);aa(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for("function"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ra.unshift(b)}ya(ra)}}if(!(0<O)){if(c.preRun)for("function"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)sa();ya(oa);0<O||(c.setStatus?(c.setStatus("Running..."),setTimeout(function(){setTimeout(function(){c.setStatus("")},1);a()},1)):a())}}c.run=Ya;
if(c.preInit)for("function"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ya();


  return ortWasm.ready
}
);
})();
if (true)
  module.exports = ortWasm;
else {}


/***/ }),

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ (function(module) {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ (function(module) {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ (function(module) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ (function(module) {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ (function(module) {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ "./node_modules/flatbuffers/js/flatbuffers.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/flatbuffers/js/flatbuffers.mjs ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flatbuffers": function() { return /* binding */ flatbuffers; }
/* harmony export */ });
/// @file
/// @addtogroup flatbuffers_javascript_api
/// @{
/// @cond FLATBUFFERS_INTERNAL

/**
 * @fileoverview
 *
 * Need to suppress 'global this' error so the Node.js export line doesn't cause
 * closure compile to error out.
 * @suppress {globalThis}
 */

/**
 * @const
 * @namespace
 */
var flatbuffers = {};

/**
 * @typedef {number}
 */
flatbuffers.Offset;

/**
 * @typedef {{
 *   bb: flatbuffers.ByteBuffer,
 *   bb_pos: number
 * }}
 */
flatbuffers.Table;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_SHORT = 2;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZEOF_INT = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.FILE_IDENTIFIER_LENGTH = 4;

/**
 * @type {number}
 * @const
 */
flatbuffers.SIZE_PREFIX_LENGTH = 4;

/**
 * @enum {number}
 */
flatbuffers.Encoding = {
  UTF8_BYTES: 1,
  UTF16_STRING: 2
};

/**
 * @type {Int32Array}
 * @const
 */
flatbuffers.int32 = new Int32Array(2);

/**
 * @type {Float32Array}
 * @const
 */
flatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);

/**
 * @type {Float64Array}
 * @const
 */
flatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);

/**
 * @type {boolean}
 * @const
 */
flatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;

////////////////////////////////////////////////////////////////////////////////

/**
 * @constructor
 * @param {number} low
 * @param {number} high
 */
flatbuffers.Long = function(low, high) {
  /**
   * @type {number}
   * @const
   */
  this.low = low | 0;

  /**
   * @type {number}
   * @const
   */
  this.high = high | 0;
};

/**
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Long.create = function(low, high) {
  // Special-case zero to avoid GC overhead for default values
  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);
};

/**
 * @returns {number}
 */
flatbuffers.Long.prototype.toFloat64 = function() {
  return (this.low >>> 0) + this.high * 0x100000000;
};

/**
 * @param {flatbuffers.Long} other
 * @returns {boolean}
 */
flatbuffers.Long.prototype.equals = function(other) {
  return this.low == other.low && this.high == other.high;
};

/**
 * @type {!flatbuffers.Long}
 * @const
 */
flatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);

/// @endcond
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a FlatBufferBuilder.
 *
 * @constructor
 * @param {number=} opt_initial_size
 */
flatbuffers.Builder = function(opt_initial_size) {
  if (!opt_initial_size) {
    var initial_size = 1024;
  } else {
    var initial_size = opt_initial_size;
  }

  /**
   * @type {flatbuffers.ByteBuffer}
   * @private
   */
  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);

  /**
   * Remaining space in the ByteBuffer.
   *
   * @type {number}
   * @private
   */
  this.space = initial_size;

  /**
   * Minimum alignment encountered so far.
   *
   * @type {number}
   * @private
   */
  this.minalign = 1;

  /**
   * The vtable for the current table.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtable = null;

  /**
   * The amount of fields we're actually using.
   *
   * @type {number}
   * @private
   */
  this.vtable_in_use = 0;

  /**
   * Whether we are currently serializing a table.
   *
   * @type {boolean}
   * @private
   */
  this.isNested = false;

  /**
   * Starting offset of the current struct/table.
   *
   * @type {number}
   * @private
   */
  this.object_start = 0;

  /**
   * List of offsets of all vtables.
   *
   * @type {Array.<number>}
   * @private
   */
  this.vtables = [];

  /**
   * For the current vector being built.
   *
   * @type {number}
   * @private
   */
  this.vector_num_elems = 0;

  /**
   * False omits default values from the serialized data
   *
   * @type {boolean}
   * @private
   */
  this.force_defaults = false;
};

flatbuffers.Builder.prototype.clear = function() {
  this.bb.clear();
  this.space = this.bb.capacity();
  this.minalign = 1;
  this.vtable = null;
  this.vtable_in_use = 0;
  this.isNested = false;
  this.object_start = 0;
  this.vtables = [];
  this.vector_num_elems = 0;
  this.force_defaults = false;
};

/**
 * In order to save space, fields that are set to their default value
 * don't get serialized into the buffer. Forcing defaults provides a
 * way to manually disable this optimization.
 *
 * @param {boolean} forceDefaults true always serializes default values
 */
flatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {
  this.force_defaults = forceDefaults;
};

/**
 * Get the ByteBuffer representing the FlatBuffer. Only call this after you've
 * called finish(). The actual data starts at the ByteBuffer's current position,
 * not necessarily at 0.
 *
 * @returns {flatbuffers.ByteBuffer}
 */
flatbuffers.Builder.prototype.dataBuffer = function() {
  return this.bb;
};

/**
 * Get the bytes representing the FlatBuffer. Only call this after you've
 * called finish().
 *
 * @returns {!Uint8Array}
 */
flatbuffers.Builder.prototype.asUint8Array = function() {
  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Prepare to write an element of `size` after `additional_bytes` have been
 * written, e.g. if you write a string, you need to align such the int length
 * field is aligned to 4 bytes, and the string data follows it directly. If all
 * you need to do is alignment, `additional_bytes` will be 0.
 *
 * @param {number} size This is the of the new element to write
 * @param {number} additional_bytes The padding size
 */
flatbuffers.Builder.prototype.prep = function(size, additional_bytes) {
  // Track the biggest thing we've ever aligned to.
  if (size > this.minalign) {
    this.minalign = size;
  }

  // Find the amount of alignment needed such that `size` is properly
  // aligned after `additional_bytes`
  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);

  // Reallocate the buffer if needed.
  while (this.space < align_size + size + additional_bytes) {
    var old_buf_size = this.bb.capacity();
    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);
    this.space += this.bb.capacity() - old_buf_size;
  }

  this.pad(align_size);
};

/**
 * @param {number} byte_size
 */
flatbuffers.Builder.prototype.pad = function(byte_size) {
  for (var i = 0; i < byte_size; i++) {
    this.bb.writeInt8(--this.space, 0);
  }
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt8 = function(value) {
  this.bb.writeInt8(this.space -= 1, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt16 = function(value) {
  this.bb.writeInt16(this.space -= 2, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeInt32 = function(value) {
  this.bb.writeInt32(this.space -= 4, value);
};

/**
 * @param {flatbuffers.Long} value
 */
flatbuffers.Builder.prototype.writeInt64 = function(value) {
  this.bb.writeInt64(this.space -= 8, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat32 = function(value) {
  this.bb.writeFloat32(this.space -= 4, value);
};

/**
 * @param {number} value
 */
flatbuffers.Builder.prototype.writeFloat64 = function(value) {
  this.bb.writeFloat64(this.space -= 8, value);
};
/// @endcond

/**
 * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int8` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt8 = function(value) {
  this.prep(1, 0);
  this.writeInt8(value);
};

/**
 * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int16` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt16 = function(value) {
  this.prep(2, 0);
  this.writeInt16(value);
};

/**
 * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `int32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt32 = function(value) {
  this.prep(4, 0);
  this.writeInt32(value);
};

/**
 * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {flatbuffers.Long} value The `int64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addInt64 = function(value) {
  this.prep(8, 0);
  this.writeInt64(value);
};

/**
 * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float32` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat32 = function(value) {
  this.prep(4, 0);
  this.writeFloat32(value);
};

/**
 * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).
 * @param {number} value The `float64` to add the the buffer.
 */
flatbuffers.Builder.prototype.addFloat64 = function(value) {
  this.prep(8, 0);
  this.writeFloat64(value);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt8(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt16(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Long} value
 * @param {flatbuffers.Long} defaultValue
 */
flatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || !value.equals(defaultValue)) {
    this.addInt64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat32(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {number} value
 * @param {number} defaultValue
 */
flatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat64(value);
    this.slot(voffset);
  }
};

/**
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addOffset(value);
    this.slot(voffset);
  }
};

/**
 * Structs are stored inline, so nothing additional is being added. `d` is always 0.
 *
 * @param {number} voffset
 * @param {flatbuffers.Offset} value
 * @param {flatbuffers.Offset} defaultValue
 */
flatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {
  if (value != defaultValue) {
    this.nested(value);
    this.slot(voffset);
  }
};

/**
 * Structures are always stored inline, they need to be created right
 * where they're used.  You'll get this assertion failure if you
 * created it elsewhere.
 *
 * @param {flatbuffers.Offset} obj The offset of the created object
 */
flatbuffers.Builder.prototype.nested = function(obj) {
  if (obj != this.offset()) {
    throw new Error('FlatBuffers: struct must be serialized inline.');
  }
};

/**
 * Should not be creating any other object, string or vector
 * while an object is being constructed
 */
flatbuffers.Builder.prototype.notNested = function() {
  if (this.isNested) {
    throw new Error('FlatBuffers: object serialization must not be nested.');
  }
};

/**
 * Set the current vtable at `voffset` to the current location in the buffer.
 *
 * @param {number} voffset
 */
flatbuffers.Builder.prototype.slot = function(voffset) {
  this.vtable[voffset] = this.offset();
};

/**
 * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.
 */
flatbuffers.Builder.prototype.offset = function() {
  return this.bb.capacity() - this.space;
};

/**
 * Doubles the size of the backing ByteBuffer and copies the old data towards
 * the end of the new buffer (since we build the buffer backwards).
 *
 * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data
 * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied
 * to it. The data is located at the end of the buffer.
 *
 * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass
 * it a uint8Array we need to suppress the type check:
 * @suppress {checkTypes}
 */
flatbuffers.Builder.growByteBuffer = function(bb) {
  var old_buf_size = bb.capacity();

  // Ensure we don't grow beyond what fits in an int.
  if (old_buf_size & 0xC0000000) {
    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');
  }

  var new_buf_size = old_buf_size << 1;
  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);
  nbb.setPosition(new_buf_size - old_buf_size);
  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
  return nbb;
};
/// @endcond

/**
 * Adds on offset, relative to where it will be written.
 *
 * @param {flatbuffers.Offset} offset The offset to add.
 */
flatbuffers.Builder.prototype.addOffset = function(offset) {
  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.
  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * Start encoding a new object in the buffer.  Users will not usually need to
 * call this directly. The FlatBuffers compiler will generate helper methods
 * that call this method internally.
 *
 * @param {number} numfields
 */
flatbuffers.Builder.prototype.startObject = function(numfields) {
  this.notNested();
  if (this.vtable == null) {
    this.vtable = [];
  }
  this.vtable_in_use = numfields;
  for (var i = 0; i < numfields; i++) {
    this.vtable[i] = 0; // This will push additional elements as needed
  }
  this.isNested = true;
  this.object_start = this.offset();
};

/**
 * Finish off writing the object that is under construction.
 *
 * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`
 */
flatbuffers.Builder.prototype.endObject = function() {
  if (this.vtable == null || !this.isNested) {
    throw new Error('FlatBuffers: endObject called without startObject');
  }

  this.addInt32(0);
  var vtableloc = this.offset();

  // Trim trailing zeroes.
  var i = this.vtable_in_use - 1;
  for (; i >= 0 && this.vtable[i] == 0; i--) {}
  var trimmed_size = i + 1;

  // Write out the current vtable.
  for (; i >= 0; i--) {
    // Offset relative to the start of the table.
    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
  }

  var standard_fields = 2; // The fields below:
  this.addInt16(vtableloc - this.object_start);
  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;
  this.addInt16(len);

  // Search for an existing vtable that matches the current one.
  var existing_vtable = 0;
  var vt1 = this.space;
outer_loop:
  for (i = 0; i < this.vtables.length; i++) {
    var vt2 = this.bb.capacity() - this.vtables[i];
    if (len == this.bb.readInt16(vt2)) {
      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {
        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
          continue outer_loop;
        }
      }
      existing_vtable = this.vtables[i];
      break;
    }
  }

  if (existing_vtable) {
    // Found a match:
    // Remove the current vtable.
    this.space = this.bb.capacity() - vtableloc;

    // Point table to existing vtable.
    this.bb.writeInt32(this.space, existing_vtable - vtableloc);
  } else {
    // No match:
    // Add the location of the current vtable to the list of vtables.
    this.vtables.push(this.offset());

    // Point table to current vtable.
    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
  }

  this.isNested = false;
  return vtableloc;
};
/// @endcond

/**
 * Finalize a buffer, poiting to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 * @param {boolean=} opt_size_prefix
 */
flatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {
  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;
  if (opt_file_identifier) {
    var file_identifier = opt_file_identifier;
    this.prep(this.minalign, flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);
    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
      throw new Error('FlatBuffers: file identifier must be length ' +
        flatbuffers.FILE_IDENTIFIER_LENGTH);
    }
    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
      this.writeInt8(file_identifier.charCodeAt(i));
    }
  }
  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);
  this.addOffset(root_table);
  if (size_prefix) {
    this.addInt32(this.bb.capacity() - this.space);
  }
  this.bb.setPosition(this.space);
};

/**
 * Finalize a size prefixed buffer, pointing to the given `root_table`.
 *
 * @param {flatbuffers.Offset} root_table
 * @param {string=} opt_file_identifier
 */
flatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {
  this.finish(root_table, opt_file_identifier, true);
};

/// @cond FLATBUFFERS_INTERNAL
/**
 * This checks a required field has been set in a given table that has
 * just been constructed.
 *
 * @param {flatbuffers.Offset} table
 * @param {number} field
 */
flatbuffers.Builder.prototype.requiredField = function(table, field) {
  var table_start = this.bb.capacity() - table;
  var vtable_start = table_start - this.bb.readInt32(table_start);
  var ok = this.bb.readInt16(vtable_start + field) != 0;

  // If this fails, the caller will show what field needs to be set.
  if (!ok) {
    throw new Error('FlatBuffers: field ' + field + ' must be set');
  }
};

/**
 * Start a new array/vector of objects.  Users usually will not call
 * this directly. The FlatBuffers compiler will create a start/end
 * method for vector types in generated code.
 *
 * @param {number} elem_size The size of each element in the array
 * @param {number} num_elems The number of elements in the array
 * @param {number} alignment The alignment of the array
 */
flatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {
  this.notNested();
  this.vector_num_elems = num_elems;
  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);
  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.
};

/**
 * Finish off the creation of an array and all its elements. The array must be
 * created with `startVector`.
 *
 * @returns {flatbuffers.Offset} The offset at which the newly created array
 * starts.
 */
flatbuffers.Builder.prototype.endVector = function() {
  this.writeInt32(this.vector_num_elems);
  return this.offset();
};
/// @endcond

/**
 * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed
 * instead of a string, it is assumed to contain valid UTF-8 encoded data.
 *
 * @param {string|Uint8Array} s The string to encode
 * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts
 */
flatbuffers.Builder.prototype.createString = function(s) {
  if (s instanceof Uint8Array) {
    var utf8 = s;
  } else {
    var utf8 = [];
    var i = 0;

    while (i < s.length) {
      var codePoint;

      // Decode UTF-16
      var a = s.charCodeAt(i++);
      if (a < 0xD800 || a >= 0xDC00) {
        codePoint = a;
      } else {
        var b = s.charCodeAt(i++);
        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);
      }

      // Encode UTF-8
      if (codePoint < 0x80) {
        utf8.push(codePoint);
      } else {
        if (codePoint < 0x800) {
          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);
        } else {
          if (codePoint < 0x10000) {
            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);
          } else {
            utf8.push(
              ((codePoint >> 18) & 0x07) | 0xF0,
              ((codePoint >> 12) & 0x3F) | 0x80);
          }
          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);
        }
        utf8.push((codePoint & 0x3F) | 0x80);
      }
    }
  }

  this.addInt8(0);
  this.startVector(1, utf8.length, 1);
  this.bb.setPosition(this.space -= utf8.length);
  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {
    bytes[offset++] = utf8[i];
  }
  return this.endVector();
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.Builder.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};
////////////////////////////////////////////////////////////////////////////////
/// @cond FLATBUFFERS_INTERNAL
/**
 * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).
 *
 * @constructor
 * @param {Uint8Array} bytes
 */
flatbuffers.ByteBuffer = function(bytes) {
  /**
   * @type {Uint8Array}
   * @private
   */
  this.bytes_ = bytes;

  /**
   * @type {number}
   * @private
   */
  this.position_ = 0;
};

/**
 * Create and allocate a new ByteBuffer with a given size.
 *
 * @param {number} byte_size
 * @returns {!flatbuffers.ByteBuffer}
 */
flatbuffers.ByteBuffer.allocate = function(byte_size) {
  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));
};

flatbuffers.ByteBuffer.prototype.clear = function() {
  this.position_ = 0;
};

/**
 * Get the underlying `Uint8Array`.
 *
 * @returns {Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.bytes = function() {
  return this.bytes_;
};

/**
 * Get the buffer's position.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.position = function() {
  return this.position_;
};

/**
 * Set the buffer's position.
 *
 * @param {number} position
 */
flatbuffers.ByteBuffer.prototype.setPosition = function(position) {
  this.position_ = position;
};

/**
 * Get the buffer's capacity.
 *
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.capacity = function() {
  return this.bytes_.length;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {
  return this.readUint8(offset) << 24 >> 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {
  return this.bytes_[offset];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {
  return this.readUint16(offset) << 16 >> 16;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {
  return this.readInt32(offset) >>> 0;
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {
  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {
  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {
  flatbuffers.int32[0] = this.readInt32(offset);
  return flatbuffers.float32[0];
};

/**
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {
  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);
  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
  return flatbuffers.float64[0];
};

/**
 * @param {number} offset
 * @param {number|boolean} value
 */
flatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {
  this.bytes_[offset] = /** @type {number} */(value);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {
  this.bytes_[offset] = value;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
  this.bytes_[offset + 2] = value >> 16;
  this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {
    this.bytes_[offset] = value;
    this.bytes_[offset + 1] = value >> 8;
    this.bytes_[offset + 2] = value >> 16;
    this.bytes_[offset + 3] = value >> 24;
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {
  this.writeInt32(offset, value.low);
  this.writeInt32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {flatbuffers.Long} value
 */
flatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {
    this.writeUint32(offset, value.low);
    this.writeUint32(offset + 4, value.high);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {
  flatbuffers.float32[0] = value;
  this.writeInt32(offset, flatbuffers.int32[0]);
};

/**
 * @param {number} offset
 * @param {number} value
 */
flatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {
  flatbuffers.float64[0] = value;
  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);
  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);
};

/**
 * Return the file identifier.   Behavior is undefined for FlatBuffers whose
 * schema does not include a file_identifier (likely points at padding or the
 * start of a the root vtable).
 * @returns {string}
 */
flatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {
  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +
      flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error(
        'FlatBuffers: ByteBuffer is too short to contain an identifier.');
  }
  var result = "";
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    result += String.fromCharCode(
        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));
  }
  return result;
};

/**
 * Look up a field in the vtable, return an offset into the object, or 0 if the
 * field is not present.
 *
 * @param {number} bb_pos
 * @param {number} vtable_offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {
  var vtable = bb_pos - this.readInt32(bb_pos);
  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
};

/**
 * Initialize any Table-derived type to point to the union at the given offset.
 *
 * @param {flatbuffers.Table} t
 * @param {number} offset
 * @returns {flatbuffers.Table}
 */
flatbuffers.ByteBuffer.prototype.__union = function(t, offset) {
  t.bb_pos = offset + this.readInt32(offset);
  t.bb = this;
  return t;
};

/**
 * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.
 * This allocates a new string and converts to wide chars upon each access.
 *
 * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as
 * the "optionalEncoding" argument. This is useful for avoiding conversion to
 * and from UTF-16 when the data will just be packaged back up in another
 * FlatBuffer later on.
 *
 * @param {number} offset
 * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING
 * @returns {string|!Uint8Array}
 */
flatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {
  offset += this.readInt32(offset);

  var length = this.readInt32(offset);
  var result = '';
  var i = 0;

  offset += flatbuffers.SIZEOF_INT;

  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {
    return this.bytes_.subarray(offset, offset + length);
  }

  while (i < length) {
    var codePoint;

    // Decode UTF-8
    var a = this.readUint8(offset + i++);
    if (a < 0xC0) {
      codePoint = a;
    } else {
      var b = this.readUint8(offset + i++);
      if (a < 0xE0) {
        codePoint =
          ((a & 0x1F) << 6) |
          (b & 0x3F);
      } else {
        var c = this.readUint8(offset + i++);
        if (a < 0xF0) {
          codePoint =
            ((a & 0x0F) << 12) |
            ((b & 0x3F) << 6) |
            (c & 0x3F);
        } else {
          var d = this.readUint8(offset + i++);
          codePoint =
            ((a & 0x07) << 18) |
            ((b & 0x3F) << 12) |
            ((c & 0x3F) << 6) |
            (d & 0x3F);
        }
      }
    }

    // Encode UTF-16
    if (codePoint < 0x10000) {
      result += String.fromCharCode(codePoint);
    } else {
      codePoint -= 0x10000;
      result += String.fromCharCode(
        (codePoint >> 10) + 0xD800,
        (codePoint & ((1 << 10) - 1)) + 0xDC00);
    }
  }

  return result;
};

/**
 * Retrieve the relative offset stored at "offset"
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__indirect = function(offset) {
  return offset + this.readInt32(offset);
};

/**
 * Get the start of data of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector = function(offset) {
  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length
};

/**
 * Get the length of a vector whose offset is stored at "offset" in this object.
 *
 * @param {number} offset
 * @returns {number}
 */
flatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {
  return this.readInt32(offset + this.readInt32(offset));
};

/**
 * @param {string} ident
 * @returns {boolean}
 */
flatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {
  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error('FlatBuffers: file identifier must be length ' +
                    flatbuffers.FILE_IDENTIFIER_LENGTH);
  }
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {
      return false;
    }
  }
  return true;
};

/**
 * A helper function to avoid generated code depending on this file directly.
 *
 * @param {number} low
 * @param {number} high
 * @returns {!flatbuffers.Long}
 */
flatbuffers.ByteBuffer.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};

// Exports for Node.js and RequireJS


/// @endcond
/// @}


/***/ }),

/***/ "./node_modules/guid-typescript/dist/guid.js":
/*!***************************************************!*\
  !*** ./node_modules/guid-typescript/dist/guid.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

exports.__esModule = true;
var Guid = /** @class */ (function () {
    function Guid(guid) {
        if (!guid) {
            throw new TypeError("Invalid argument; `value` has no value.");
        }
        this.value = Guid.EMPTY;
        if (guid && Guid.isGuid(guid)) {
            this.value = guid;
        }
    }
    Guid.isGuid = function (guid) {
        var value = guid.toString();
        return guid && (guid instanceof Guid || Guid.validator.test(value));
    };
    Guid.create = function () {
        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join("-"));
    };
    Guid.createEmpty = function () {
        return new Guid("emptyguid");
    };
    Guid.parse = function (guid) {
        return new Guid(guid);
    };
    Guid.raw = function () {
        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join("-");
    };
    Guid.gen = function (count) {
        var out = "";
        for (var i = 0; i < count; i++) {
            // tslint:disable-next-line:no-bitwise
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    };
    Guid.prototype.equals = function (other) {
        // Comparing string `value` against provided `guid` will auto-call
        // toString on `guid` for comparison
        return Guid.isGuid(other) && this.value === other.toString();
    };
    Guid.prototype.isEmpty = function () {
        return this.value === Guid.EMPTY;
    };
    Guid.prototype.toString = function () {
        return this.value;
    };
    Guid.prototype.toJSON = function () {
        return {
            value: this.value
        };
    };
    Guid.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");
    Guid.EMPTY = "00000000-0000-0000-0000-000000000000";
    return Guid;
}());
exports.Guid = Guid;


/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/***/ (function(module) {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ "./node_modules/onnx-proto/dist/onnx.js":
/*!**********************************************!*\
  !*** ./node_modules/onnx-proto/dist/onnx.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var $protobuf = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.onnx = (function() {

    /**
     * Namespace onnx.
     * @exports onnx
     * @namespace
     */
    var onnx = {};

    /**
     * Version enum.
     * @name onnx.Version
     * @enum {string}
     * @property {number} _START_VERSION=0 _START_VERSION value
     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value
     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value
     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value
     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value
     * @property {number} IR_VERSION=5 IR_VERSION value
     */
    onnx.Version = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "_START_VERSION"] = 0;
        values[valuesById[1] = "IR_VERSION_2017_10_10"] = 1;
        values[valuesById[2] = "IR_VERSION_2017_10_30"] = 2;
        values[valuesById[3] = "IR_VERSION_2017_11_3"] = 3;
        values[valuesById[4] = "IR_VERSION_2019_1_22"] = 4;
        values[valuesById[5] = "IR_VERSION"] = 5;
        return values;
    })();

    onnx.AttributeProto = (function() {

        /**
         * Properties of an AttributeProto.
         * @memberof onnx
         * @interface IAttributeProto
         * @property {string|null} [name] AttributeProto name
         * @property {string|null} [refAttrName] AttributeProto refAttrName
         * @property {string|null} [docString] AttributeProto docString
         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type
         * @property {number|null} [f] AttributeProto f
         * @property {number|Long|null} [i] AttributeProto i
         * @property {Uint8Array|null} [s] AttributeProto s
         * @property {onnx.ITensorProto|null} [t] AttributeProto t
         * @property {onnx.IGraphProto|null} [g] AttributeProto g
         * @property {Array.<number>|null} [floats] AttributeProto floats
         * @property {Array.<number|Long>|null} [ints] AttributeProto ints
         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings
         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors
         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs
         */

        /**
         * Constructs a new AttributeProto.
         * @memberof onnx
         * @classdesc Represents an AttributeProto.
         * @implements IAttributeProto
         * @constructor
         * @param {onnx.IAttributeProto=} [properties] Properties to set
         */
        function AttributeProto(properties) {
            this.floats = [];
            this.ints = [];
            this.strings = [];
            this.tensors = [];
            this.graphs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AttributeProto name.
         * @member {string} name
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.name = "";

        /**
         * AttributeProto refAttrName.
         * @member {string} refAttrName
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.refAttrName = "";

        /**
         * AttributeProto docString.
         * @member {string} docString
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.docString = "";

        /**
         * AttributeProto type.
         * @member {onnx.AttributeProto.AttributeType} type
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.type = 0;

        /**
         * AttributeProto f.
         * @member {number} f
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.f = 0;

        /**
         * AttributeProto i.
         * @member {number|Long} i
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * AttributeProto s.
         * @member {Uint8Array} s
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.s = $util.newBuffer([]);

        /**
         * AttributeProto t.
         * @member {onnx.ITensorProto|null|undefined} t
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.t = null;

        /**
         * AttributeProto g.
         * @member {onnx.IGraphProto|null|undefined} g
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.g = null;

        /**
         * AttributeProto floats.
         * @member {Array.<number>} floats
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.floats = $util.emptyArray;

        /**
         * AttributeProto ints.
         * @member {Array.<number|Long>} ints
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.ints = $util.emptyArray;

        /**
         * AttributeProto strings.
         * @member {Array.<Uint8Array>} strings
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.strings = $util.emptyArray;

        /**
         * AttributeProto tensors.
         * @member {Array.<onnx.ITensorProto>} tensors
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.tensors = $util.emptyArray;

        /**
         * AttributeProto graphs.
         * @member {Array.<onnx.IGraphProto>} graphs
         * @memberof onnx.AttributeProto
         * @instance
         */
        AttributeProto.prototype.graphs = $util.emptyArray;

        /**
         * Creates a new AttributeProto instance using the specified properties.
         * @function create
         * @memberof onnx.AttributeProto
         * @static
         * @param {onnx.IAttributeProto=} [properties] Properties to set
         * @returns {onnx.AttributeProto} AttributeProto instance
         */
        AttributeProto.create = function create(properties) {
            return new AttributeProto(properties);
        };

        /**
         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.AttributeProto
         * @static
         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AttributeProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.f != null && message.hasOwnProperty("f"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);
            if (message.i != null && message.hasOwnProperty("i"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);
            if (message.s != null && message.hasOwnProperty("s"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);
            if (message.t != null && message.hasOwnProperty("t"))
                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.g != null && message.hasOwnProperty("g"))
                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.floats != null && message.floats.length) {
                writer.uint32(/* id 7, wireType 2 =*/58).fork();
                for (var i = 0; i < message.floats.length; ++i)
                    writer.float(message.floats[i]);
                writer.ldelim();
            }
            if (message.ints != null && message.ints.length) {
                writer.uint32(/* id 8, wireType 2 =*/66).fork();
                for (var i = 0; i < message.ints.length; ++i)
                    writer.int64(message.ints[i]);
                writer.ldelim();
            }
            if (message.strings != null && message.strings.length)
                for (var i = 0; i < message.strings.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);
            if (message.tensors != null && message.tensors.length)
                for (var i = 0; i < message.tensors.length; ++i)
                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.graphs != null && message.graphs.length)
                for (var i = 0; i < message.graphs.length; ++i)
                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);
            if (message.refAttrName != null && message.hasOwnProperty("refAttrName"))
                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);
            return writer;
        };

        /**
         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.AttributeProto
         * @static
         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AttributeProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.AttributeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.AttributeProto} AttributeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AttributeProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 21:
                    message.refAttrName = reader.string();
                    break;
                case 13:
                    message.docString = reader.string();
                    break;
                case 20:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.f = reader.float();
                    break;
                case 3:
                    message.i = reader.int64();
                    break;
                case 4:
                    message.s = reader.bytes();
                    break;
                case 5:
                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());
                    break;
                case 7:
                    if (!(message.floats && message.floats.length))
                        message.floats = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.floats.push(reader.float());
                    } else
                        message.floats.push(reader.float());
                    break;
                case 8:
                    if (!(message.ints && message.ints.length))
                        message.ints = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ints.push(reader.int64());
                    } else
                        message.ints.push(reader.int64());
                    break;
                case 9:
                    if (!(message.strings && message.strings.length))
                        message.strings = [];
                    message.strings.push(reader.bytes());
                    break;
                case 10:
                    if (!(message.tensors && message.tensors.length))
                        message.tensors = [];
                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));
                    break;
                case 11:
                    if (!(message.graphs && message.graphs.length))
                        message.graphs = [];
                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.AttributeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.AttributeProto} AttributeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AttributeProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AttributeProto message.
         * @function verify
         * @memberof onnx.AttributeProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AttributeProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.refAttrName != null && message.hasOwnProperty("refAttrName"))
                if (!$util.isString(message.refAttrName))
                    return "refAttrName: string expected";
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            if (message.f != null && message.hasOwnProperty("f"))
                if (typeof message.f !== "number")
                    return "f: number expected";
            if (message.i != null && message.hasOwnProperty("i"))
                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))
                    return "i: integer|Long expected";
            if (message.s != null && message.hasOwnProperty("s"))
                if (!(message.s && typeof message.s.length === "number" || $util.isString(message.s)))
                    return "s: buffer expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.onnx.TensorProto.verify(message.t);
                if (error)
                    return "t." + error;
            }
            if (message.g != null && message.hasOwnProperty("g")) {
                var error = $root.onnx.GraphProto.verify(message.g);
                if (error)
                    return "g." + error;
            }
            if (message.floats != null && message.hasOwnProperty("floats")) {
                if (!Array.isArray(message.floats))
                    return "floats: array expected";
                for (var i = 0; i < message.floats.length; ++i)
                    if (typeof message.floats[i] !== "number")
                        return "floats: number[] expected";
            }
            if (message.ints != null && message.hasOwnProperty("ints")) {
                if (!Array.isArray(message.ints))
                    return "ints: array expected";
                for (var i = 0; i < message.ints.length; ++i)
                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))
                        return "ints: integer|Long[] expected";
            }
            if (message.strings != null && message.hasOwnProperty("strings")) {
                if (!Array.isArray(message.strings))
                    return "strings: array expected";
                for (var i = 0; i < message.strings.length; ++i)
                    if (!(message.strings[i] && typeof message.strings[i].length === "number" || $util.isString(message.strings[i])))
                        return "strings: buffer[] expected";
            }
            if (message.tensors != null && message.hasOwnProperty("tensors")) {
                if (!Array.isArray(message.tensors))
                    return "tensors: array expected";
                for (var i = 0; i < message.tensors.length; ++i) {
                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);
                    if (error)
                        return "tensors." + error;
                }
            }
            if (message.graphs != null && message.hasOwnProperty("graphs")) {
                if (!Array.isArray(message.graphs))
                    return "graphs: array expected";
                for (var i = 0; i < message.graphs.length; ++i) {
                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);
                    if (error)
                        return "graphs." + error;
                }
            }
            return null;
        };

        /**
         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.AttributeProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.AttributeProto} AttributeProto
         */
        AttributeProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.AttributeProto)
                return object;
            var message = new $root.onnx.AttributeProto();
            if (object.name != null)
                message.name = String(object.name);
            if (object.refAttrName != null)
                message.refAttrName = String(object.refAttrName);
            if (object.docString != null)
                message.docString = String(object.docString);
            switch (object.type) {
            case "UNDEFINED":
            case 0:
                message.type = 0;
                break;
            case "FLOAT":
            case 1:
                message.type = 1;
                break;
            case "INT":
            case 2:
                message.type = 2;
                break;
            case "STRING":
            case 3:
                message.type = 3;
                break;
            case "TENSOR":
            case 4:
                message.type = 4;
                break;
            case "GRAPH":
            case 5:
                message.type = 5;
                break;
            case "FLOATS":
            case 6:
                message.type = 6;
                break;
            case "INTS":
            case 7:
                message.type = 7;
                break;
            case "STRINGS":
            case 8:
                message.type = 8;
                break;
            case "TENSORS":
            case 9:
                message.type = 9;
                break;
            case "GRAPHS":
            case 10:
                message.type = 10;
                break;
            }
            if (object.f != null)
                message.f = Number(object.f);
            if (object.i != null)
                if ($util.Long)
                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;
                else if (typeof object.i === "string")
                    message.i = parseInt(object.i, 10);
                else if (typeof object.i === "number")
                    message.i = object.i;
                else if (typeof object.i === "object")
                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();
            if (object.s != null)
                if (typeof object.s === "string")
                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);
                else if (object.s.length)
                    message.s = object.s;
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".onnx.AttributeProto.t: object expected");
                message.t = $root.onnx.TensorProto.fromObject(object.t);
            }
            if (object.g != null) {
                if (typeof object.g !== "object")
                    throw TypeError(".onnx.AttributeProto.g: object expected");
                message.g = $root.onnx.GraphProto.fromObject(object.g);
            }
            if (object.floats) {
                if (!Array.isArray(object.floats))
                    throw TypeError(".onnx.AttributeProto.floats: array expected");
                message.floats = [];
                for (var i = 0; i < object.floats.length; ++i)
                    message.floats[i] = Number(object.floats[i]);
            }
            if (object.ints) {
                if (!Array.isArray(object.ints))
                    throw TypeError(".onnx.AttributeProto.ints: array expected");
                message.ints = [];
                for (var i = 0; i < object.ints.length; ++i)
                    if ($util.Long)
                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;
                    else if (typeof object.ints[i] === "string")
                        message.ints[i] = parseInt(object.ints[i], 10);
                    else if (typeof object.ints[i] === "number")
                        message.ints[i] = object.ints[i];
                    else if (typeof object.ints[i] === "object")
                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();
            }
            if (object.strings) {
                if (!Array.isArray(object.strings))
                    throw TypeError(".onnx.AttributeProto.strings: array expected");
                message.strings = [];
                for (var i = 0; i < object.strings.length; ++i)
                    if (typeof object.strings[i] === "string")
                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);
                    else if (object.strings[i].length)
                        message.strings[i] = object.strings[i];
            }
            if (object.tensors) {
                if (!Array.isArray(object.tensors))
                    throw TypeError(".onnx.AttributeProto.tensors: array expected");
                message.tensors = [];
                for (var i = 0; i < object.tensors.length; ++i) {
                    if (typeof object.tensors[i] !== "object")
                        throw TypeError(".onnx.AttributeProto.tensors: object expected");
                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);
                }
            }
            if (object.graphs) {
                if (!Array.isArray(object.graphs))
                    throw TypeError(".onnx.AttributeProto.graphs: array expected");
                message.graphs = [];
                for (var i = 0; i < object.graphs.length; ++i) {
                    if (typeof object.graphs[i] !== "object")
                        throw TypeError(".onnx.AttributeProto.graphs: object expected");
                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.AttributeProto
         * @static
         * @param {onnx.AttributeProto} message AttributeProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AttributeProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.floats = [];
                object.ints = [];
                object.strings = [];
                object.tensors = [];
                object.graphs = [];
            }
            if (options.defaults) {
                object.name = "";
                object.f = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.i = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.s = "";
                else {
                    object.s = [];
                    if (options.bytes !== Array)
                        object.s = $util.newBuffer(object.s);
                }
                object.t = null;
                object.g = null;
                object.docString = "";
                object.type = options.enums === String ? "UNDEFINED" : 0;
                object.refAttrName = "";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.f != null && message.hasOwnProperty("f"))
                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;
            if (message.i != null && message.hasOwnProperty("i"))
                if (typeof message.i === "number")
                    object.i = options.longs === String ? String(message.i) : message.i;
                else
                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;
            if (message.s != null && message.hasOwnProperty("s"))
                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.onnx.TensorProto.toObject(message.t, options);
            if (message.g != null && message.hasOwnProperty("g"))
                object.g = $root.onnx.GraphProto.toObject(message.g, options);
            if (message.floats && message.floats.length) {
                object.floats = [];
                for (var j = 0; j < message.floats.length; ++j)
                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];
            }
            if (message.ints && message.ints.length) {
                object.ints = [];
                for (var j = 0; j < message.ints.length; ++j)
                    if (typeof message.ints[j] === "number")
                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];
                    else
                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];
            }
            if (message.strings && message.strings.length) {
                object.strings = [];
                for (var j = 0; j < message.strings.length; ++j)
                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];
            }
            if (message.tensors && message.tensors.length) {
                object.tensors = [];
                for (var j = 0; j < message.tensors.length; ++j)
                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);
            }
            if (message.graphs && message.graphs.length) {
                object.graphs = [];
                for (var j = 0; j < message.graphs.length; ++j)
                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;
            if (message.refAttrName != null && message.hasOwnProperty("refAttrName"))
                object.refAttrName = message.refAttrName;
            return object;
        };

        /**
         * Converts this AttributeProto to JSON.
         * @function toJSON
         * @memberof onnx.AttributeProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AttributeProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * AttributeType enum.
         * @name onnx.AttributeProto.AttributeType
         * @enum {string}
         * @property {number} UNDEFINED=0 UNDEFINED value
         * @property {number} FLOAT=1 FLOAT value
         * @property {number} INT=2 INT value
         * @property {number} STRING=3 STRING value
         * @property {number} TENSOR=4 TENSOR value
         * @property {number} GRAPH=5 GRAPH value
         * @property {number} FLOATS=6 FLOATS value
         * @property {number} INTS=7 INTS value
         * @property {number} STRINGS=8 STRINGS value
         * @property {number} TENSORS=9 TENSORS value
         * @property {number} GRAPHS=10 GRAPHS value
         */
        AttributeProto.AttributeType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNDEFINED"] = 0;
            values[valuesById[1] = "FLOAT"] = 1;
            values[valuesById[2] = "INT"] = 2;
            values[valuesById[3] = "STRING"] = 3;
            values[valuesById[4] = "TENSOR"] = 4;
            values[valuesById[5] = "GRAPH"] = 5;
            values[valuesById[6] = "FLOATS"] = 6;
            values[valuesById[7] = "INTS"] = 7;
            values[valuesById[8] = "STRINGS"] = 8;
            values[valuesById[9] = "TENSORS"] = 9;
            values[valuesById[10] = "GRAPHS"] = 10;
            return values;
        })();

        return AttributeProto;
    })();

    onnx.ValueInfoProto = (function() {

        /**
         * Properties of a ValueInfoProto.
         * @memberof onnx
         * @interface IValueInfoProto
         * @property {string|null} [name] ValueInfoProto name
         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type
         * @property {string|null} [docString] ValueInfoProto docString
         */

        /**
         * Constructs a new ValueInfoProto.
         * @memberof onnx
         * @classdesc Represents a ValueInfoProto.
         * @implements IValueInfoProto
         * @constructor
         * @param {onnx.IValueInfoProto=} [properties] Properties to set
         */
        function ValueInfoProto(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ValueInfoProto name.
         * @member {string} name
         * @memberof onnx.ValueInfoProto
         * @instance
         */
        ValueInfoProto.prototype.name = "";

        /**
         * ValueInfoProto type.
         * @member {onnx.ITypeProto|null|undefined} type
         * @memberof onnx.ValueInfoProto
         * @instance
         */
        ValueInfoProto.prototype.type = null;

        /**
         * ValueInfoProto docString.
         * @member {string} docString
         * @memberof onnx.ValueInfoProto
         * @instance
         */
        ValueInfoProto.prototype.docString = "";

        /**
         * Creates a new ValueInfoProto instance using the specified properties.
         * @function create
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {onnx.IValueInfoProto=} [properties] Properties to set
         * @returns {onnx.ValueInfoProto} ValueInfoProto instance
         */
        ValueInfoProto.create = function create(properties) {
            return new ValueInfoProto(properties);
        };

        /**
         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ValueInfoProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.type != null && message.hasOwnProperty("type"))
                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);
            return writer;
        };

        /**
         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ValueInfoProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.ValueInfoProto} ValueInfoProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ValueInfoProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.docString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.ValueInfoProto} ValueInfoProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ValueInfoProto message.
         * @function verify
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ValueInfoProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.type != null && message.hasOwnProperty("type")) {
                var error = $root.onnx.TypeProto.verify(message.type);
                if (error)
                    return "type." + error;
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            return null;
        };

        /**
         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.ValueInfoProto} ValueInfoProto
         */
        ValueInfoProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.ValueInfoProto)
                return object;
            var message = new $root.onnx.ValueInfoProto();
            if (object.name != null)
                message.name = String(object.name);
            if (object.type != null) {
                if (typeof object.type !== "object")
                    throw TypeError(".onnx.ValueInfoProto.type: object expected");
                message.type = $root.onnx.TypeProto.fromObject(object.type);
            }
            if (object.docString != null)
                message.docString = String(object.docString);
            return message;
        };

        /**
         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.ValueInfoProto
         * @static
         * @param {onnx.ValueInfoProto} message ValueInfoProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ValueInfoProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.type = null;
                object.docString = "";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = $root.onnx.TypeProto.toObject(message.type, options);
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            return object;
        };

        /**
         * Converts this ValueInfoProto to JSON.
         * @function toJSON
         * @memberof onnx.ValueInfoProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ValueInfoProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ValueInfoProto;
    })();

    onnx.NodeProto = (function() {

        /**
         * Properties of a NodeProto.
         * @memberof onnx
         * @interface INodeProto
         * @property {Array.<string>|null} [input] NodeProto input
         * @property {Array.<string>|null} [output] NodeProto output
         * @property {string|null} [name] NodeProto name
         * @property {string|null} [opType] NodeProto opType
         * @property {string|null} [domain] NodeProto domain
         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute
         * @property {string|null} [docString] NodeProto docString
         */

        /**
         * Constructs a new NodeProto.
         * @memberof onnx
         * @classdesc Represents a NodeProto.
         * @implements INodeProto
         * @constructor
         * @param {onnx.INodeProto=} [properties] Properties to set
         */
        function NodeProto(properties) {
            this.input = [];
            this.output = [];
            this.attribute = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NodeProto input.
         * @member {Array.<string>} input
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.input = $util.emptyArray;

        /**
         * NodeProto output.
         * @member {Array.<string>} output
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.output = $util.emptyArray;

        /**
         * NodeProto name.
         * @member {string} name
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.name = "";

        /**
         * NodeProto opType.
         * @member {string} opType
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.opType = "";

        /**
         * NodeProto domain.
         * @member {string} domain
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.domain = "";

        /**
         * NodeProto attribute.
         * @member {Array.<onnx.IAttributeProto>} attribute
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.attribute = $util.emptyArray;

        /**
         * NodeProto docString.
         * @member {string} docString
         * @memberof onnx.NodeProto
         * @instance
         */
        NodeProto.prototype.docString = "";

        /**
         * Creates a new NodeProto instance using the specified properties.
         * @function create
         * @memberof onnx.NodeProto
         * @static
         * @param {onnx.INodeProto=} [properties] Properties to set
         * @returns {onnx.NodeProto} NodeProto instance
         */
        NodeProto.create = function create(properties) {
            return new NodeProto(properties);
        };

        /**
         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.NodeProto
         * @static
         * @param {onnx.INodeProto} message NodeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NodeProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.input != null && message.input.length)
                for (var i = 0; i < message.input.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);
            if (message.output != null && message.output.length)
                for (var i = 0; i < message.output.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.opType != null && message.hasOwnProperty("opType"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);
            if (message.attribute != null && message.attribute.length)
                for (var i = 0; i < message.attribute.length; ++i)
                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);
            if (message.domain != null && message.hasOwnProperty("domain"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);
            return writer;
        };

        /**
         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.NodeProto
         * @static
         * @param {onnx.INodeProto} message NodeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NodeProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.NodeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.NodeProto} NodeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NodeProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.input && message.input.length))
                        message.input = [];
                    message.input.push(reader.string());
                    break;
                case 2:
                    if (!(message.output && message.output.length))
                        message.output = [];
                    message.output.push(reader.string());
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.opType = reader.string();
                    break;
                case 7:
                    message.domain = reader.string();
                    break;
                case 5:
                    if (!(message.attribute && message.attribute.length))
                        message.attribute = [];
                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.docString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NodeProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.NodeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.NodeProto} NodeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NodeProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NodeProto message.
         * @function verify
         * @memberof onnx.NodeProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NodeProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.input != null && message.hasOwnProperty("input")) {
                if (!Array.isArray(message.input))
                    return "input: array expected";
                for (var i = 0; i < message.input.length; ++i)
                    if (!$util.isString(message.input[i]))
                        return "input: string[] expected";
            }
            if (message.output != null && message.hasOwnProperty("output")) {
                if (!Array.isArray(message.output))
                    return "output: array expected";
                for (var i = 0; i < message.output.length; ++i)
                    if (!$util.isString(message.output[i]))
                        return "output: string[] expected";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.opType != null && message.hasOwnProperty("opType"))
                if (!$util.isString(message.opType))
                    return "opType: string expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            if (message.attribute != null && message.hasOwnProperty("attribute")) {
                if (!Array.isArray(message.attribute))
                    return "attribute: array expected";
                for (var i = 0; i < message.attribute.length; ++i) {
                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);
                    if (error)
                        return "attribute." + error;
                }
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            return null;
        };

        /**
         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.NodeProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.NodeProto} NodeProto
         */
        NodeProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.NodeProto)
                return object;
            var message = new $root.onnx.NodeProto();
            if (object.input) {
                if (!Array.isArray(object.input))
                    throw TypeError(".onnx.NodeProto.input: array expected");
                message.input = [];
                for (var i = 0; i < object.input.length; ++i)
                    message.input[i] = String(object.input[i]);
            }
            if (object.output) {
                if (!Array.isArray(object.output))
                    throw TypeError(".onnx.NodeProto.output: array expected");
                message.output = [];
                for (var i = 0; i < object.output.length; ++i)
                    message.output[i] = String(object.output[i]);
            }
            if (object.name != null)
                message.name = String(object.name);
            if (object.opType != null)
                message.opType = String(object.opType);
            if (object.domain != null)
                message.domain = String(object.domain);
            if (object.attribute) {
                if (!Array.isArray(object.attribute))
                    throw TypeError(".onnx.NodeProto.attribute: array expected");
                message.attribute = [];
                for (var i = 0; i < object.attribute.length; ++i) {
                    if (typeof object.attribute[i] !== "object")
                        throw TypeError(".onnx.NodeProto.attribute: object expected");
                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);
                }
            }
            if (object.docString != null)
                message.docString = String(object.docString);
            return message;
        };

        /**
         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.NodeProto
         * @static
         * @param {onnx.NodeProto} message NodeProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NodeProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.input = [];
                object.output = [];
                object.attribute = [];
            }
            if (options.defaults) {
                object.name = "";
                object.opType = "";
                object.docString = "";
                object.domain = "";
            }
            if (message.input && message.input.length) {
                object.input = [];
                for (var j = 0; j < message.input.length; ++j)
                    object.input[j] = message.input[j];
            }
            if (message.output && message.output.length) {
                object.output = [];
                for (var j = 0; j < message.output.length; ++j)
                    object.output[j] = message.output[j];
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.opType != null && message.hasOwnProperty("opType"))
                object.opType = message.opType;
            if (message.attribute && message.attribute.length) {
                object.attribute = [];
                for (var j = 0; j < message.attribute.length; ++j)
                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            return object;
        };

        /**
         * Converts this NodeProto to JSON.
         * @function toJSON
         * @memberof onnx.NodeProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NodeProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NodeProto;
    })();

    onnx.ModelProto = (function() {

        /**
         * Properties of a ModelProto.
         * @memberof onnx
         * @interface IModelProto
         * @property {number|Long|null} [irVersion] ModelProto irVersion
         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport
         * @property {string|null} [producerName] ModelProto producerName
         * @property {string|null} [producerVersion] ModelProto producerVersion
         * @property {string|null} [domain] ModelProto domain
         * @property {number|Long|null} [modelVersion] ModelProto modelVersion
         * @property {string|null} [docString] ModelProto docString
         * @property {onnx.IGraphProto|null} [graph] ModelProto graph
         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps
         */

        /**
         * Constructs a new ModelProto.
         * @memberof onnx
         * @classdesc Represents a ModelProto.
         * @implements IModelProto
         * @constructor
         * @param {onnx.IModelProto=} [properties] Properties to set
         */
        function ModelProto(properties) {
            this.opsetImport = [];
            this.metadataProps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ModelProto irVersion.
         * @member {number|Long} irVersion
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ModelProto opsetImport.
         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.opsetImport = $util.emptyArray;

        /**
         * ModelProto producerName.
         * @member {string} producerName
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.producerName = "";

        /**
         * ModelProto producerVersion.
         * @member {string} producerVersion
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.producerVersion = "";

        /**
         * ModelProto domain.
         * @member {string} domain
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.domain = "";

        /**
         * ModelProto modelVersion.
         * @member {number|Long} modelVersion
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ModelProto docString.
         * @member {string} docString
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.docString = "";

        /**
         * ModelProto graph.
         * @member {onnx.IGraphProto|null|undefined} graph
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.graph = null;

        /**
         * ModelProto metadataProps.
         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps
         * @memberof onnx.ModelProto
         * @instance
         */
        ModelProto.prototype.metadataProps = $util.emptyArray;

        /**
         * Creates a new ModelProto instance using the specified properties.
         * @function create
         * @memberof onnx.ModelProto
         * @static
         * @param {onnx.IModelProto=} [properties] Properties to set
         * @returns {onnx.ModelProto} ModelProto instance
         */
        ModelProto.create = function create(properties) {
            return new ModelProto(properties);
        };

        /**
         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.ModelProto
         * @static
         * @param {onnx.IModelProto} message ModelProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ModelProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.irVersion != null && message.hasOwnProperty("irVersion"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);
            if (message.producerName != null && message.hasOwnProperty("producerName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);
            if (message.producerVersion != null && message.hasOwnProperty("producerVersion"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);
            if (message.domain != null && message.hasOwnProperty("domain"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);
            if (message.modelVersion != null && message.hasOwnProperty("modelVersion"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);
            if (message.graph != null && message.hasOwnProperty("graph"))
                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.opsetImport != null && message.opsetImport.length)
                for (var i = 0; i < message.opsetImport.length; ++i)
                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.metadataProps != null && message.metadataProps.length)
                for (var i = 0; i < message.metadataProps.length; ++i)
                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.ModelProto
         * @static
         * @param {onnx.IModelProto} message ModelProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ModelProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.ModelProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.ModelProto} ModelProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ModelProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.irVersion = reader.int64();
                    break;
                case 8:
                    if (!(message.opsetImport && message.opsetImport.length))
                        message.opsetImport = [];
                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.producerName = reader.string();
                    break;
                case 3:
                    message.producerVersion = reader.string();
                    break;
                case 4:
                    message.domain = reader.string();
                    break;
                case 5:
                    message.modelVersion = reader.int64();
                    break;
                case 6:
                    message.docString = reader.string();
                    break;
                case 7:
                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());
                    break;
                case 14:
                    if (!(message.metadataProps && message.metadataProps.length))
                        message.metadataProps = [];
                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ModelProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.ModelProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.ModelProto} ModelProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ModelProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ModelProto message.
         * @function verify
         * @memberof onnx.ModelProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ModelProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.irVersion != null && message.hasOwnProperty("irVersion"))
                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))
                    return "irVersion: integer|Long expected";
            if (message.opsetImport != null && message.hasOwnProperty("opsetImport")) {
                if (!Array.isArray(message.opsetImport))
                    return "opsetImport: array expected";
                for (var i = 0; i < message.opsetImport.length; ++i) {
                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);
                    if (error)
                        return "opsetImport." + error;
                }
            }
            if (message.producerName != null && message.hasOwnProperty("producerName"))
                if (!$util.isString(message.producerName))
                    return "producerName: string expected";
            if (message.producerVersion != null && message.hasOwnProperty("producerVersion"))
                if (!$util.isString(message.producerVersion))
                    return "producerVersion: string expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            if (message.modelVersion != null && message.hasOwnProperty("modelVersion"))
                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))
                    return "modelVersion: integer|Long expected";
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            if (message.graph != null && message.hasOwnProperty("graph")) {
                var error = $root.onnx.GraphProto.verify(message.graph);
                if (error)
                    return "graph." + error;
            }
            if (message.metadataProps != null && message.hasOwnProperty("metadataProps")) {
                if (!Array.isArray(message.metadataProps))
                    return "metadataProps: array expected";
                for (var i = 0; i < message.metadataProps.length; ++i) {
                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);
                    if (error)
                        return "metadataProps." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.ModelProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.ModelProto} ModelProto
         */
        ModelProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.ModelProto)
                return object;
            var message = new $root.onnx.ModelProto();
            if (object.irVersion != null)
                if ($util.Long)
                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;
                else if (typeof object.irVersion === "string")
                    message.irVersion = parseInt(object.irVersion, 10);
                else if (typeof object.irVersion === "number")
                    message.irVersion = object.irVersion;
                else if (typeof object.irVersion === "object")
                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();
            if (object.opsetImport) {
                if (!Array.isArray(object.opsetImport))
                    throw TypeError(".onnx.ModelProto.opsetImport: array expected");
                message.opsetImport = [];
                for (var i = 0; i < object.opsetImport.length; ++i) {
                    if (typeof object.opsetImport[i] !== "object")
                        throw TypeError(".onnx.ModelProto.opsetImport: object expected");
                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);
                }
            }
            if (object.producerName != null)
                message.producerName = String(object.producerName);
            if (object.producerVersion != null)
                message.producerVersion = String(object.producerVersion);
            if (object.domain != null)
                message.domain = String(object.domain);
            if (object.modelVersion != null)
                if ($util.Long)
                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;
                else if (typeof object.modelVersion === "string")
                    message.modelVersion = parseInt(object.modelVersion, 10);
                else if (typeof object.modelVersion === "number")
                    message.modelVersion = object.modelVersion;
                else if (typeof object.modelVersion === "object")
                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();
            if (object.docString != null)
                message.docString = String(object.docString);
            if (object.graph != null) {
                if (typeof object.graph !== "object")
                    throw TypeError(".onnx.ModelProto.graph: object expected");
                message.graph = $root.onnx.GraphProto.fromObject(object.graph);
            }
            if (object.metadataProps) {
                if (!Array.isArray(object.metadataProps))
                    throw TypeError(".onnx.ModelProto.metadataProps: array expected");
                message.metadataProps = [];
                for (var i = 0; i < object.metadataProps.length; ++i) {
                    if (typeof object.metadataProps[i] !== "object")
                        throw TypeError(".onnx.ModelProto.metadataProps: object expected");
                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.ModelProto
         * @static
         * @param {onnx.ModelProto} message ModelProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ModelProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.opsetImport = [];
                object.metadataProps = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.irVersion = options.longs === String ? "0" : 0;
                object.producerName = "";
                object.producerVersion = "";
                object.domain = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.modelVersion = options.longs === String ? "0" : 0;
                object.docString = "";
                object.graph = null;
            }
            if (message.irVersion != null && message.hasOwnProperty("irVersion"))
                if (typeof message.irVersion === "number")
                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;
                else
                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;
            if (message.producerName != null && message.hasOwnProperty("producerName"))
                object.producerName = message.producerName;
            if (message.producerVersion != null && message.hasOwnProperty("producerVersion"))
                object.producerVersion = message.producerVersion;
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            if (message.modelVersion != null && message.hasOwnProperty("modelVersion"))
                if (typeof message.modelVersion === "number")
                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;
                else
                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            if (message.graph != null && message.hasOwnProperty("graph"))
                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);
            if (message.opsetImport && message.opsetImport.length) {
                object.opsetImport = [];
                for (var j = 0; j < message.opsetImport.length; ++j)
                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);
            }
            if (message.metadataProps && message.metadataProps.length) {
                object.metadataProps = [];
                for (var j = 0; j < message.metadataProps.length; ++j)
                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);
            }
            return object;
        };

        /**
         * Converts this ModelProto to JSON.
         * @function toJSON
         * @memberof onnx.ModelProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ModelProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ModelProto;
    })();

    onnx.StringStringEntryProto = (function() {

        /**
         * Properties of a StringStringEntryProto.
         * @memberof onnx
         * @interface IStringStringEntryProto
         * @property {string|null} [key] StringStringEntryProto key
         * @property {string|null} [value] StringStringEntryProto value
         */

        /**
         * Constructs a new StringStringEntryProto.
         * @memberof onnx
         * @classdesc Represents a StringStringEntryProto.
         * @implements IStringStringEntryProto
         * @constructor
         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set
         */
        function StringStringEntryProto(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StringStringEntryProto key.
         * @member {string} key
         * @memberof onnx.StringStringEntryProto
         * @instance
         */
        StringStringEntryProto.prototype.key = "";

        /**
         * StringStringEntryProto value.
         * @member {string} value
         * @memberof onnx.StringStringEntryProto
         * @instance
         */
        StringStringEntryProto.prototype.value = "";

        /**
         * Creates a new StringStringEntryProto instance using the specified properties.
         * @function create
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set
         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance
         */
        StringStringEntryProto.create = function create(properties) {
            return new StringStringEntryProto(properties);
        };

        /**
         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StringStringEntryProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
            return writer;
        };

        /**
         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StringStringEntryProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.StringStringEntryProto} StringStringEntryProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StringStringEntryProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.StringStringEntryProto} StringStringEntryProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StringStringEntryProto message.
         * @function verify
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StringStringEntryProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!$util.isString(message.key))
                    return "key: string expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };

        /**
         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.StringStringEntryProto} StringStringEntryProto
         */
        StringStringEntryProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.StringStringEntryProto)
                return object;
            var message = new $root.onnx.StringStringEntryProto();
            if (object.key != null)
                message.key = String(object.key);
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };

        /**
         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.StringStringEntryProto
         * @static
         * @param {onnx.StringStringEntryProto} message StringStringEntryProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StringStringEntryProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = "";
                object.value = "";
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };

        /**
         * Converts this StringStringEntryProto to JSON.
         * @function toJSON
         * @memberof onnx.StringStringEntryProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StringStringEntryProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StringStringEntryProto;
    })();

    onnx.TensorAnnotation = (function() {

        /**
         * Properties of a TensorAnnotation.
         * @memberof onnx
         * @interface ITensorAnnotation
         * @property {string|null} [tensorName] TensorAnnotation tensorName
         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames
         */

        /**
         * Constructs a new TensorAnnotation.
         * @memberof onnx
         * @classdesc Represents a TensorAnnotation.
         * @implements ITensorAnnotation
         * @constructor
         * @param {onnx.ITensorAnnotation=} [properties] Properties to set
         */
        function TensorAnnotation(properties) {
            this.quantParameterTensorNames = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TensorAnnotation tensorName.
         * @member {string} tensorName
         * @memberof onnx.TensorAnnotation
         * @instance
         */
        TensorAnnotation.prototype.tensorName = "";

        /**
         * TensorAnnotation quantParameterTensorNames.
         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames
         * @memberof onnx.TensorAnnotation
         * @instance
         */
        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;

        /**
         * Creates a new TensorAnnotation instance using the specified properties.
         * @function create
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {onnx.ITensorAnnotation=} [properties] Properties to set
         * @returns {onnx.TensorAnnotation} TensorAnnotation instance
         */
        TensorAnnotation.create = function create(properties) {
            return new TensorAnnotation(properties);
        };

        /**
         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.
         * @function encode
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorAnnotation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tensorName != null && message.hasOwnProperty("tensorName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);
            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)
                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)
                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TensorAnnotation message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.TensorAnnotation} TensorAnnotation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorAnnotation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tensorName = reader.string();
                    break;
                case 2:
                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))
                        message.quantParameterTensorNames = [];
                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.TensorAnnotation} TensorAnnotation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TensorAnnotation message.
         * @function verify
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TensorAnnotation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tensorName != null && message.hasOwnProperty("tensorName"))
                if (!$util.isString(message.tensorName))
                    return "tensorName: string expected";
            if (message.quantParameterTensorNames != null && message.hasOwnProperty("quantParameterTensorNames")) {
                if (!Array.isArray(message.quantParameterTensorNames))
                    return "quantParameterTensorNames: array expected";
                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {
                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);
                    if (error)
                        return "quantParameterTensorNames." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.TensorAnnotation} TensorAnnotation
         */
        TensorAnnotation.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.TensorAnnotation)
                return object;
            var message = new $root.onnx.TensorAnnotation();
            if (object.tensorName != null)
                message.tensorName = String(object.tensorName);
            if (object.quantParameterTensorNames) {
                if (!Array.isArray(object.quantParameterTensorNames))
                    throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");
                message.quantParameterTensorNames = [];
                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {
                    if (typeof object.quantParameterTensorNames[i] !== "object")
                        throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");
                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.TensorAnnotation
         * @static
         * @param {onnx.TensorAnnotation} message TensorAnnotation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TensorAnnotation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.quantParameterTensorNames = [];
            if (options.defaults)
                object.tensorName = "";
            if (message.tensorName != null && message.hasOwnProperty("tensorName"))
                object.tensorName = message.tensorName;
            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {
                object.quantParameterTensorNames = [];
                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)
                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);
            }
            return object;
        };

        /**
         * Converts this TensorAnnotation to JSON.
         * @function toJSON
         * @memberof onnx.TensorAnnotation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TensorAnnotation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TensorAnnotation;
    })();

    onnx.GraphProto = (function() {

        /**
         * Properties of a GraphProto.
         * @memberof onnx
         * @interface IGraphProto
         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node
         * @property {string|null} [name] GraphProto name
         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer
         * @property {string|null} [docString] GraphProto docString
         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input
         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output
         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo
         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation
         */

        /**
         * Constructs a new GraphProto.
         * @memberof onnx
         * @classdesc Represents a GraphProto.
         * @implements IGraphProto
         * @constructor
         * @param {onnx.IGraphProto=} [properties] Properties to set
         */
        function GraphProto(properties) {
            this.node = [];
            this.initializer = [];
            this.input = [];
            this.output = [];
            this.valueInfo = [];
            this.quantizationAnnotation = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GraphProto node.
         * @member {Array.<onnx.INodeProto>} node
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.node = $util.emptyArray;

        /**
         * GraphProto name.
         * @member {string} name
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.name = "";

        /**
         * GraphProto initializer.
         * @member {Array.<onnx.ITensorProto>} initializer
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.initializer = $util.emptyArray;

        /**
         * GraphProto docString.
         * @member {string} docString
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.docString = "";

        /**
         * GraphProto input.
         * @member {Array.<onnx.IValueInfoProto>} input
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.input = $util.emptyArray;

        /**
         * GraphProto output.
         * @member {Array.<onnx.IValueInfoProto>} output
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.output = $util.emptyArray;

        /**
         * GraphProto valueInfo.
         * @member {Array.<onnx.IValueInfoProto>} valueInfo
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.valueInfo = $util.emptyArray;

        /**
         * GraphProto quantizationAnnotation.
         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation
         * @memberof onnx.GraphProto
         * @instance
         */
        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;

        /**
         * Creates a new GraphProto instance using the specified properties.
         * @function create
         * @memberof onnx.GraphProto
         * @static
         * @param {onnx.IGraphProto=} [properties] Properties to set
         * @returns {onnx.GraphProto} GraphProto instance
         */
        GraphProto.create = function create(properties) {
            return new GraphProto(properties);
        };

        /**
         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.GraphProto
         * @static
         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GraphProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.node != null && message.node.length)
                for (var i = 0; i < message.node.length; ++i)
                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.initializer != null && message.initializer.length)
                for (var i = 0; i < message.initializer.length; ++i)
                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);
            if (message.input != null && message.input.length)
                for (var i = 0; i < message.input.length; ++i)
                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.output != null && message.output.length)
                for (var i = 0; i < message.output.length; ++i)
                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.valueInfo != null && message.valueInfo.length)
                for (var i = 0; i < message.valueInfo.length; ++i)
                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)
                for (var i = 0; i < message.quantizationAnnotation.length; ++i)
                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.GraphProto
         * @static
         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GraphProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.GraphProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.GraphProto} GraphProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GraphProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.node && message.node.length))
                        message.node = [];
                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 5:
                    if (!(message.initializer && message.initializer.length))
                        message.initializer = [];
                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.docString = reader.string();
                    break;
                case 11:
                    if (!(message.input && message.input.length))
                        message.input = [];
                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));
                    break;
                case 12:
                    if (!(message.output && message.output.length))
                        message.output = [];
                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));
                    break;
                case 13:
                    if (!(message.valueInfo && message.valueInfo.length))
                        message.valueInfo = [];
                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));
                    break;
                case 14:
                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))
                        message.quantizationAnnotation = [];
                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GraphProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.GraphProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.GraphProto} GraphProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GraphProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GraphProto message.
         * @function verify
         * @memberof onnx.GraphProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GraphProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.node != null && message.hasOwnProperty("node")) {
                if (!Array.isArray(message.node))
                    return "node: array expected";
                for (var i = 0; i < message.node.length; ++i) {
                    var error = $root.onnx.NodeProto.verify(message.node[i]);
                    if (error)
                        return "node." + error;
                }
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.initializer != null && message.hasOwnProperty("initializer")) {
                if (!Array.isArray(message.initializer))
                    return "initializer: array expected";
                for (var i = 0; i < message.initializer.length; ++i) {
                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);
                    if (error)
                        return "initializer." + error;
                }
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            if (message.input != null && message.hasOwnProperty("input")) {
                if (!Array.isArray(message.input))
                    return "input: array expected";
                for (var i = 0; i < message.input.length; ++i) {
                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);
                    if (error)
                        return "input." + error;
                }
            }
            if (message.output != null && message.hasOwnProperty("output")) {
                if (!Array.isArray(message.output))
                    return "output: array expected";
                for (var i = 0; i < message.output.length; ++i) {
                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);
                    if (error)
                        return "output." + error;
                }
            }
            if (message.valueInfo != null && message.hasOwnProperty("valueInfo")) {
                if (!Array.isArray(message.valueInfo))
                    return "valueInfo: array expected";
                for (var i = 0; i < message.valueInfo.length; ++i) {
                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);
                    if (error)
                        return "valueInfo." + error;
                }
            }
            if (message.quantizationAnnotation != null && message.hasOwnProperty("quantizationAnnotation")) {
                if (!Array.isArray(message.quantizationAnnotation))
                    return "quantizationAnnotation: array expected";
                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {
                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);
                    if (error)
                        return "quantizationAnnotation." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.GraphProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.GraphProto} GraphProto
         */
        GraphProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.GraphProto)
                return object;
            var message = new $root.onnx.GraphProto();
            if (object.node) {
                if (!Array.isArray(object.node))
                    throw TypeError(".onnx.GraphProto.node: array expected");
                message.node = [];
                for (var i = 0; i < object.node.length; ++i) {
                    if (typeof object.node[i] !== "object")
                        throw TypeError(".onnx.GraphProto.node: object expected");
                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);
                }
            }
            if (object.name != null)
                message.name = String(object.name);
            if (object.initializer) {
                if (!Array.isArray(object.initializer))
                    throw TypeError(".onnx.GraphProto.initializer: array expected");
                message.initializer = [];
                for (var i = 0; i < object.initializer.length; ++i) {
                    if (typeof object.initializer[i] !== "object")
                        throw TypeError(".onnx.GraphProto.initializer: object expected");
                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);
                }
            }
            if (object.docString != null)
                message.docString = String(object.docString);
            if (object.input) {
                if (!Array.isArray(object.input))
                    throw TypeError(".onnx.GraphProto.input: array expected");
                message.input = [];
                for (var i = 0; i < object.input.length; ++i) {
                    if (typeof object.input[i] !== "object")
                        throw TypeError(".onnx.GraphProto.input: object expected");
                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);
                }
            }
            if (object.output) {
                if (!Array.isArray(object.output))
                    throw TypeError(".onnx.GraphProto.output: array expected");
                message.output = [];
                for (var i = 0; i < object.output.length; ++i) {
                    if (typeof object.output[i] !== "object")
                        throw TypeError(".onnx.GraphProto.output: object expected");
                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);
                }
            }
            if (object.valueInfo) {
                if (!Array.isArray(object.valueInfo))
                    throw TypeError(".onnx.GraphProto.valueInfo: array expected");
                message.valueInfo = [];
                for (var i = 0; i < object.valueInfo.length; ++i) {
                    if (typeof object.valueInfo[i] !== "object")
                        throw TypeError(".onnx.GraphProto.valueInfo: object expected");
                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);
                }
            }
            if (object.quantizationAnnotation) {
                if (!Array.isArray(object.quantizationAnnotation))
                    throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");
                message.quantizationAnnotation = [];
                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {
                    if (typeof object.quantizationAnnotation[i] !== "object")
                        throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");
                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.GraphProto
         * @static
         * @param {onnx.GraphProto} message GraphProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GraphProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.node = [];
                object.initializer = [];
                object.input = [];
                object.output = [];
                object.valueInfo = [];
                object.quantizationAnnotation = [];
            }
            if (options.defaults) {
                object.name = "";
                object.docString = "";
            }
            if (message.node && message.node.length) {
                object.node = [];
                for (var j = 0; j < message.node.length; ++j)
                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.initializer && message.initializer.length) {
                object.initializer = [];
                for (var j = 0; j < message.initializer.length; ++j)
                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            if (message.input && message.input.length) {
                object.input = [];
                for (var j = 0; j < message.input.length; ++j)
                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);
            }
            if (message.output && message.output.length) {
                object.output = [];
                for (var j = 0; j < message.output.length; ++j)
                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);
            }
            if (message.valueInfo && message.valueInfo.length) {
                object.valueInfo = [];
                for (var j = 0; j < message.valueInfo.length; ++j)
                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);
            }
            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {
                object.quantizationAnnotation = [];
                for (var j = 0; j < message.quantizationAnnotation.length; ++j)
                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);
            }
            return object;
        };

        /**
         * Converts this GraphProto to JSON.
         * @function toJSON
         * @memberof onnx.GraphProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GraphProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GraphProto;
    })();

    onnx.TensorProto = (function() {

        /**
         * Properties of a TensorProto.
         * @memberof onnx
         * @interface ITensorProto
         * @property {Array.<number|Long>|null} [dims] TensorProto dims
         * @property {number|null} [dataType] TensorProto dataType
         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment
         * @property {Array.<number>|null} [floatData] TensorProto floatData
         * @property {Array.<number>|null} [int32Data] TensorProto int32Data
         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData
         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data
         * @property {string|null} [name] TensorProto name
         * @property {string|null} [docString] TensorProto docString
         * @property {Uint8Array|null} [rawData] TensorProto rawData
         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData
         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation
         * @property {Array.<number>|null} [doubleData] TensorProto doubleData
         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data
         */

        /**
         * Constructs a new TensorProto.
         * @memberof onnx
         * @classdesc Represents a TensorProto.
         * @implements ITensorProto
         * @constructor
         * @param {onnx.ITensorProto=} [properties] Properties to set
         */
        function TensorProto(properties) {
            this.dims = [];
            this.floatData = [];
            this.int32Data = [];
            this.stringData = [];
            this.int64Data = [];
            this.externalData = [];
            this.doubleData = [];
            this.uint64Data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TensorProto dims.
         * @member {Array.<number|Long>} dims
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.dims = $util.emptyArray;

        /**
         * TensorProto dataType.
         * @member {number} dataType
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.dataType = 0;

        /**
         * TensorProto segment.
         * @member {onnx.TensorProto.ISegment|null|undefined} segment
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.segment = null;

        /**
         * TensorProto floatData.
         * @member {Array.<number>} floatData
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.floatData = $util.emptyArray;

        /**
         * TensorProto int32Data.
         * @member {Array.<number>} int32Data
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.int32Data = $util.emptyArray;

        /**
         * TensorProto stringData.
         * @member {Array.<Uint8Array>} stringData
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.stringData = $util.emptyArray;

        /**
         * TensorProto int64Data.
         * @member {Array.<number|Long>} int64Data
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.int64Data = $util.emptyArray;

        /**
         * TensorProto name.
         * @member {string} name
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.name = "";

        /**
         * TensorProto docString.
         * @member {string} docString
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.docString = "";

        /**
         * TensorProto rawData.
         * @member {Uint8Array} rawData
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.rawData = $util.newBuffer([]);

        /**
         * TensorProto externalData.
         * @member {Array.<onnx.IStringStringEntryProto>} externalData
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.externalData = $util.emptyArray;

        /**
         * TensorProto dataLocation.
         * @member {onnx.TensorProto.DataLocation} dataLocation
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.dataLocation = 0;

        /**
         * TensorProto doubleData.
         * @member {Array.<number>} doubleData
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.doubleData = $util.emptyArray;

        /**
         * TensorProto uint64Data.
         * @member {Array.<number|Long>} uint64Data
         * @memberof onnx.TensorProto
         * @instance
         */
        TensorProto.prototype.uint64Data = $util.emptyArray;

        /**
         * Creates a new TensorProto instance using the specified properties.
         * @function create
         * @memberof onnx.TensorProto
         * @static
         * @param {onnx.ITensorProto=} [properties] Properties to set
         * @returns {onnx.TensorProto} TensorProto instance
         */
        TensorProto.create = function create(properties) {
            return new TensorProto(properties);
        };

        /**
         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.TensorProto
         * @static
         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dims != null && message.dims.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.dims.length; ++i)
                    writer.int64(message.dims[i]);
                writer.ldelim();
            }
            if (message.dataType != null && message.hasOwnProperty("dataType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);
            if (message.segment != null && message.hasOwnProperty("segment"))
                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.floatData != null && message.floatData.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.floatData.length; ++i)
                    writer.float(message.floatData[i]);
                writer.ldelim();
            }
            if (message.int32Data != null && message.int32Data.length) {
                writer.uint32(/* id 5, wireType 2 =*/42).fork();
                for (var i = 0; i < message.int32Data.length; ++i)
                    writer.int32(message.int32Data[i]);
                writer.ldelim();
            }
            if (message.stringData != null && message.stringData.length)
                for (var i = 0; i < message.stringData.length; ++i)
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);
            if (message.int64Data != null && message.int64Data.length) {
                writer.uint32(/* id 7, wireType 2 =*/58).fork();
                for (var i = 0; i < message.int64Data.length; ++i)
                    writer.int64(message.int64Data[i]);
                writer.ldelim();
            }
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);
            if (message.rawData != null && message.hasOwnProperty("rawData"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);
            if (message.doubleData != null && message.doubleData.length) {
                writer.uint32(/* id 10, wireType 2 =*/82).fork();
                for (var i = 0; i < message.doubleData.length; ++i)
                    writer.double(message.doubleData[i]);
                writer.ldelim();
            }
            if (message.uint64Data != null && message.uint64Data.length) {
                writer.uint32(/* id 11, wireType 2 =*/90).fork();
                for (var i = 0; i < message.uint64Data.length; ++i)
                    writer.uint64(message.uint64Data[i]);
                writer.ldelim();
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);
            if (message.externalData != null && message.externalData.length)
                for (var i = 0; i < message.externalData.length; ++i)
                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.dataLocation != null && message.hasOwnProperty("dataLocation"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);
            return writer;
        };

        /**
         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.TensorProto
         * @static
         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TensorProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.TensorProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.TensorProto} TensorProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.dims && message.dims.length))
                        message.dims = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.dims.push(reader.int64());
                    } else
                        message.dims.push(reader.int64());
                    break;
                case 2:
                    message.dataType = reader.int32();
                    break;
                case 3:
                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.floatData && message.floatData.length))
                        message.floatData = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.floatData.push(reader.float());
                    } else
                        message.floatData.push(reader.float());
                    break;
                case 5:
                    if (!(message.int32Data && message.int32Data.length))
                        message.int32Data = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.int32Data.push(reader.int32());
                    } else
                        message.int32Data.push(reader.int32());
                    break;
                case 6:
                    if (!(message.stringData && message.stringData.length))
                        message.stringData = [];
                    message.stringData.push(reader.bytes());
                    break;
                case 7:
                    if (!(message.int64Data && message.int64Data.length))
                        message.int64Data = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.int64Data.push(reader.int64());
                    } else
                        message.int64Data.push(reader.int64());
                    break;
                case 8:
                    message.name = reader.string();
                    break;
                case 12:
                    message.docString = reader.string();
                    break;
                case 9:
                    message.rawData = reader.bytes();
                    break;
                case 13:
                    if (!(message.externalData && message.externalData.length))
                        message.externalData = [];
                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));
                    break;
                case 14:
                    message.dataLocation = reader.int32();
                    break;
                case 10:
                    if (!(message.doubleData && message.doubleData.length))
                        message.doubleData = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.doubleData.push(reader.double());
                    } else
                        message.doubleData.push(reader.double());
                    break;
                case 11:
                    if (!(message.uint64Data && message.uint64Data.length))
                        message.uint64Data = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.uint64Data.push(reader.uint64());
                    } else
                        message.uint64Data.push(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TensorProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.TensorProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.TensorProto} TensorProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TensorProto message.
         * @function verify
         * @memberof onnx.TensorProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TensorProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dims != null && message.hasOwnProperty("dims")) {
                if (!Array.isArray(message.dims))
                    return "dims: array expected";
                for (var i = 0; i < message.dims.length; ++i)
                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))
                        return "dims: integer|Long[] expected";
            }
            if (message.dataType != null && message.hasOwnProperty("dataType"))
                if (!$util.isInteger(message.dataType))
                    return "dataType: integer expected";
            if (message.segment != null && message.hasOwnProperty("segment")) {
                var error = $root.onnx.TensorProto.Segment.verify(message.segment);
                if (error)
                    return "segment." + error;
            }
            if (message.floatData != null && message.hasOwnProperty("floatData")) {
                if (!Array.isArray(message.floatData))
                    return "floatData: array expected";
                for (var i = 0; i < message.floatData.length; ++i)
                    if (typeof message.floatData[i] !== "number")
                        return "floatData: number[] expected";
            }
            if (message.int32Data != null && message.hasOwnProperty("int32Data")) {
                if (!Array.isArray(message.int32Data))
                    return "int32Data: array expected";
                for (var i = 0; i < message.int32Data.length; ++i)
                    if (!$util.isInteger(message.int32Data[i]))
                        return "int32Data: integer[] expected";
            }
            if (message.stringData != null && message.hasOwnProperty("stringData")) {
                if (!Array.isArray(message.stringData))
                    return "stringData: array expected";
                for (var i = 0; i < message.stringData.length; ++i)
                    if (!(message.stringData[i] && typeof message.stringData[i].length === "number" || $util.isString(message.stringData[i])))
                        return "stringData: buffer[] expected";
            }
            if (message.int64Data != null && message.hasOwnProperty("int64Data")) {
                if (!Array.isArray(message.int64Data))
                    return "int64Data: array expected";
                for (var i = 0; i < message.int64Data.length; ++i)
                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))
                        return "int64Data: integer|Long[] expected";
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.docString != null && message.hasOwnProperty("docString"))
                if (!$util.isString(message.docString))
                    return "docString: string expected";
            if (message.rawData != null && message.hasOwnProperty("rawData"))
                if (!(message.rawData && typeof message.rawData.length === "number" || $util.isString(message.rawData)))
                    return "rawData: buffer expected";
            if (message.externalData != null && message.hasOwnProperty("externalData")) {
                if (!Array.isArray(message.externalData))
                    return "externalData: array expected";
                for (var i = 0; i < message.externalData.length; ++i) {
                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);
                    if (error)
                        return "externalData." + error;
                }
            }
            if (message.dataLocation != null && message.hasOwnProperty("dataLocation"))
                switch (message.dataLocation) {
                default:
                    return "dataLocation: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.doubleData != null && message.hasOwnProperty("doubleData")) {
                if (!Array.isArray(message.doubleData))
                    return "doubleData: array expected";
                for (var i = 0; i < message.doubleData.length; ++i)
                    if (typeof message.doubleData[i] !== "number")
                        return "doubleData: number[] expected";
            }
            if (message.uint64Data != null && message.hasOwnProperty("uint64Data")) {
                if (!Array.isArray(message.uint64Data))
                    return "uint64Data: array expected";
                for (var i = 0; i < message.uint64Data.length; ++i)
                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))
                        return "uint64Data: integer|Long[] expected";
            }
            return null;
        };

        /**
         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.TensorProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.TensorProto} TensorProto
         */
        TensorProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.TensorProto)
                return object;
            var message = new $root.onnx.TensorProto();
            if (object.dims) {
                if (!Array.isArray(object.dims))
                    throw TypeError(".onnx.TensorProto.dims: array expected");
                message.dims = [];
                for (var i = 0; i < object.dims.length; ++i)
                    if ($util.Long)
                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;
                    else if (typeof object.dims[i] === "string")
                        message.dims[i] = parseInt(object.dims[i], 10);
                    else if (typeof object.dims[i] === "number")
                        message.dims[i] = object.dims[i];
                    else if (typeof object.dims[i] === "object")
                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();
            }
            if (object.dataType != null)
                message.dataType = object.dataType | 0;
            if (object.segment != null) {
                if (typeof object.segment !== "object")
                    throw TypeError(".onnx.TensorProto.segment: object expected");
                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);
            }
            if (object.floatData) {
                if (!Array.isArray(object.floatData))
                    throw TypeError(".onnx.TensorProto.floatData: array expected");
                message.floatData = [];
                for (var i = 0; i < object.floatData.length; ++i)
                    message.floatData[i] = Number(object.floatData[i]);
            }
            if (object.int32Data) {
                if (!Array.isArray(object.int32Data))
                    throw TypeError(".onnx.TensorProto.int32Data: array expected");
                message.int32Data = [];
                for (var i = 0; i < object.int32Data.length; ++i)
                    message.int32Data[i] = object.int32Data[i] | 0;
            }
            if (object.stringData) {
                if (!Array.isArray(object.stringData))
                    throw TypeError(".onnx.TensorProto.stringData: array expected");
                message.stringData = [];
                for (var i = 0; i < object.stringData.length; ++i)
                    if (typeof object.stringData[i] === "string")
                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);
                    else if (object.stringData[i].length)
                        message.stringData[i] = object.stringData[i];
            }
            if (object.int64Data) {
                if (!Array.isArray(object.int64Data))
                    throw TypeError(".onnx.TensorProto.int64Data: array expected");
                message.int64Data = [];
                for (var i = 0; i < object.int64Data.length; ++i)
                    if ($util.Long)
                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;
                    else if (typeof object.int64Data[i] === "string")
                        message.int64Data[i] = parseInt(object.int64Data[i], 10);
                    else if (typeof object.int64Data[i] === "number")
                        message.int64Data[i] = object.int64Data[i];
                    else if (typeof object.int64Data[i] === "object")
                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();
            }
            if (object.name != null)
                message.name = String(object.name);
            if (object.docString != null)
                message.docString = String(object.docString);
            if (object.rawData != null)
                if (typeof object.rawData === "string")
                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);
                else if (object.rawData.length)
                    message.rawData = object.rawData;
            if (object.externalData) {
                if (!Array.isArray(object.externalData))
                    throw TypeError(".onnx.TensorProto.externalData: array expected");
                message.externalData = [];
                for (var i = 0; i < object.externalData.length; ++i) {
                    if (typeof object.externalData[i] !== "object")
                        throw TypeError(".onnx.TensorProto.externalData: object expected");
                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);
                }
            }
            switch (object.dataLocation) {
            case "DEFAULT":
            case 0:
                message.dataLocation = 0;
                break;
            case "EXTERNAL":
            case 1:
                message.dataLocation = 1;
                break;
            }
            if (object.doubleData) {
                if (!Array.isArray(object.doubleData))
                    throw TypeError(".onnx.TensorProto.doubleData: array expected");
                message.doubleData = [];
                for (var i = 0; i < object.doubleData.length; ++i)
                    message.doubleData[i] = Number(object.doubleData[i]);
            }
            if (object.uint64Data) {
                if (!Array.isArray(object.uint64Data))
                    throw TypeError(".onnx.TensorProto.uint64Data: array expected");
                message.uint64Data = [];
                for (var i = 0; i < object.uint64Data.length; ++i)
                    if ($util.Long)
                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;
                    else if (typeof object.uint64Data[i] === "string")
                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);
                    else if (typeof object.uint64Data[i] === "number")
                        message.uint64Data[i] = object.uint64Data[i];
                    else if (typeof object.uint64Data[i] === "object")
                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);
            }
            return message;
        };

        /**
         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.TensorProto
         * @static
         * @param {onnx.TensorProto} message TensorProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TensorProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.dims = [];
                object.floatData = [];
                object.int32Data = [];
                object.stringData = [];
                object.int64Data = [];
                object.doubleData = [];
                object.uint64Data = [];
                object.externalData = [];
            }
            if (options.defaults) {
                object.dataType = 0;
                object.segment = null;
                object.name = "";
                if (options.bytes === String)
                    object.rawData = "";
                else {
                    object.rawData = [];
                    if (options.bytes !== Array)
                        object.rawData = $util.newBuffer(object.rawData);
                }
                object.docString = "";
                object.dataLocation = options.enums === String ? "DEFAULT" : 0;
            }
            if (message.dims && message.dims.length) {
                object.dims = [];
                for (var j = 0; j < message.dims.length; ++j)
                    if (typeof message.dims[j] === "number")
                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];
                    else
                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];
            }
            if (message.dataType != null && message.hasOwnProperty("dataType"))
                object.dataType = message.dataType;
            if (message.segment != null && message.hasOwnProperty("segment"))
                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);
            if (message.floatData && message.floatData.length) {
                object.floatData = [];
                for (var j = 0; j < message.floatData.length; ++j)
                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];
            }
            if (message.int32Data && message.int32Data.length) {
                object.int32Data = [];
                for (var j = 0; j < message.int32Data.length; ++j)
                    object.int32Data[j] = message.int32Data[j];
            }
            if (message.stringData && message.stringData.length) {
                object.stringData = [];
                for (var j = 0; j < message.stringData.length; ++j)
                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];
            }
            if (message.int64Data && message.int64Data.length) {
                object.int64Data = [];
                for (var j = 0; j < message.int64Data.length; ++j)
                    if (typeof message.int64Data[j] === "number")
                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];
                    else
                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.rawData != null && message.hasOwnProperty("rawData"))
                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;
            if (message.doubleData && message.doubleData.length) {
                object.doubleData = [];
                for (var j = 0; j < message.doubleData.length; ++j)
                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];
            }
            if (message.uint64Data && message.uint64Data.length) {
                object.uint64Data = [];
                for (var j = 0; j < message.uint64Data.length; ++j)
                    if (typeof message.uint64Data[j] === "number")
                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];
                    else
                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];
            }
            if (message.docString != null && message.hasOwnProperty("docString"))
                object.docString = message.docString;
            if (message.externalData && message.externalData.length) {
                object.externalData = [];
                for (var j = 0; j < message.externalData.length; ++j)
                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);
            }
            if (message.dataLocation != null && message.hasOwnProperty("dataLocation"))
                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;
            return object;
        };

        /**
         * Converts this TensorProto to JSON.
         * @function toJSON
         * @memberof onnx.TensorProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TensorProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * DataType enum.
         * @name onnx.TensorProto.DataType
         * @enum {string}
         * @property {number} UNDEFINED=0 UNDEFINED value
         * @property {number} FLOAT=1 FLOAT value
         * @property {number} UINT8=2 UINT8 value
         * @property {number} INT8=3 INT8 value
         * @property {number} UINT16=4 UINT16 value
         * @property {number} INT16=5 INT16 value
         * @property {number} INT32=6 INT32 value
         * @property {number} INT64=7 INT64 value
         * @property {number} STRING=8 STRING value
         * @property {number} BOOL=9 BOOL value
         * @property {number} FLOAT16=10 FLOAT16 value
         * @property {number} DOUBLE=11 DOUBLE value
         * @property {number} UINT32=12 UINT32 value
         * @property {number} UINT64=13 UINT64 value
         * @property {number} COMPLEX64=14 COMPLEX64 value
         * @property {number} COMPLEX128=15 COMPLEX128 value
         * @property {number} BFLOAT16=16 BFLOAT16 value
         */
        TensorProto.DataType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNDEFINED"] = 0;
            values[valuesById[1] = "FLOAT"] = 1;
            values[valuesById[2] = "UINT8"] = 2;
            values[valuesById[3] = "INT8"] = 3;
            values[valuesById[4] = "UINT16"] = 4;
            values[valuesById[5] = "INT16"] = 5;
            values[valuesById[6] = "INT32"] = 6;
            values[valuesById[7] = "INT64"] = 7;
            values[valuesById[8] = "STRING"] = 8;
            values[valuesById[9] = "BOOL"] = 9;
            values[valuesById[10] = "FLOAT16"] = 10;
            values[valuesById[11] = "DOUBLE"] = 11;
            values[valuesById[12] = "UINT32"] = 12;
            values[valuesById[13] = "UINT64"] = 13;
            values[valuesById[14] = "COMPLEX64"] = 14;
            values[valuesById[15] = "COMPLEX128"] = 15;
            values[valuesById[16] = "BFLOAT16"] = 16;
            return values;
        })();

        TensorProto.Segment = (function() {

            /**
             * Properties of a Segment.
             * @memberof onnx.TensorProto
             * @interface ISegment
             * @property {number|Long|null} [begin] Segment begin
             * @property {number|Long|null} [end] Segment end
             */

            /**
             * Constructs a new Segment.
             * @memberof onnx.TensorProto
             * @classdesc Represents a Segment.
             * @implements ISegment
             * @constructor
             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set
             */
            function Segment(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Segment begin.
             * @member {number|Long} begin
             * @memberof onnx.TensorProto.Segment
             * @instance
             */
            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Segment end.
             * @member {number|Long} end
             * @memberof onnx.TensorProto.Segment
             * @instance
             */
            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Segment instance using the specified properties.
             * @function create
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set
             * @returns {onnx.TensorProto.Segment} Segment instance
             */
            Segment.create = function create(properties) {
                return new Segment(properties);
            };

            /**
             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.
             * @function encode
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Segment.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.begin != null && message.hasOwnProperty("begin"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);
                if (message.end != null && message.hasOwnProperty("end"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);
                return writer;
            };

            /**
             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Segment.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Segment message from the specified reader or buffer.
             * @function decode
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onnx.TensorProto.Segment} Segment
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Segment.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.begin = reader.int64();
                        break;
                    case 2:
                        message.end = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Segment message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onnx.TensorProto.Segment} Segment
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Segment.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Segment message.
             * @function verify
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Segment.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.begin != null && message.hasOwnProperty("begin"))
                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))
                        return "begin: integer|Long expected";
                if (message.end != null && message.hasOwnProperty("end"))
                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                        return "end: integer|Long expected";
                return null;
            };

            /**
             * Creates a Segment message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onnx.TensorProto.Segment} Segment
             */
            Segment.fromObject = function fromObject(object) {
                if (object instanceof $root.onnx.TensorProto.Segment)
                    return object;
                var message = new $root.onnx.TensorProto.Segment();
                if (object.begin != null)
                    if ($util.Long)
                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;
                    else if (typeof object.begin === "string")
                        message.begin = parseInt(object.begin, 10);
                    else if (typeof object.begin === "number")
                        message.begin = object.begin;
                    else if (typeof object.begin === "object")
                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();
                if (object.end != null)
                    if ($util.Long)
                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;
                    else if (typeof object.end === "string")
                        message.end = parseInt(object.end, 10);
                    else if (typeof object.end === "number")
                        message.end = object.end;
                    else if (typeof object.end === "object")
                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Segment message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onnx.TensorProto.Segment
             * @static
             * @param {onnx.TensorProto.Segment} message Segment
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Segment.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.begin = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.end = options.longs === String ? "0" : 0;
                }
                if (message.begin != null && message.hasOwnProperty("begin"))
                    if (typeof message.begin === "number")
                        object.begin = options.longs === String ? String(message.begin) : message.begin;
                    else
                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                    if (typeof message.end === "number")
                        object.end = options.longs === String ? String(message.end) : message.end;
                    else
                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;
                return object;
            };

            /**
             * Converts this Segment to JSON.
             * @function toJSON
             * @memberof onnx.TensorProto.Segment
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Segment.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Segment;
        })();

        /**
         * DataLocation enum.
         * @name onnx.TensorProto.DataLocation
         * @enum {string}
         * @property {number} DEFAULT=0 DEFAULT value
         * @property {number} EXTERNAL=1 EXTERNAL value
         */
        TensorProto.DataLocation = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEFAULT"] = 0;
            values[valuesById[1] = "EXTERNAL"] = 1;
            return values;
        })();

        return TensorProto;
    })();

    onnx.TensorShapeProto = (function() {

        /**
         * Properties of a TensorShapeProto.
         * @memberof onnx
         * @interface ITensorShapeProto
         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim
         */

        /**
         * Constructs a new TensorShapeProto.
         * @memberof onnx
         * @classdesc Represents a TensorShapeProto.
         * @implements ITensorShapeProto
         * @constructor
         * @param {onnx.ITensorShapeProto=} [properties] Properties to set
         */
        function TensorShapeProto(properties) {
            this.dim = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TensorShapeProto dim.
         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim
         * @memberof onnx.TensorShapeProto
         * @instance
         */
        TensorShapeProto.prototype.dim = $util.emptyArray;

        /**
         * Creates a new TensorShapeProto instance using the specified properties.
         * @function create
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {onnx.ITensorShapeProto=} [properties] Properties to set
         * @returns {onnx.TensorShapeProto} TensorShapeProto instance
         */
        TensorShapeProto.create = function create(properties) {
            return new TensorShapeProto(properties);
        };

        /**
         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorShapeProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dim != null && message.dim.length)
                for (var i = 0; i < message.dim.length; ++i)
                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TensorShapeProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.TensorShapeProto} TensorShapeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorShapeProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.dim && message.dim.length))
                        message.dim = [];
                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.TensorShapeProto} TensorShapeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TensorShapeProto message.
         * @function verify
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TensorShapeProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dim != null && message.hasOwnProperty("dim")) {
                if (!Array.isArray(message.dim))
                    return "dim: array expected";
                for (var i = 0; i < message.dim.length; ++i) {
                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);
                    if (error)
                        return "dim." + error;
                }
            }
            return null;
        };

        /**
         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.TensorShapeProto} TensorShapeProto
         */
        TensorShapeProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.TensorShapeProto)
                return object;
            var message = new $root.onnx.TensorShapeProto();
            if (object.dim) {
                if (!Array.isArray(object.dim))
                    throw TypeError(".onnx.TensorShapeProto.dim: array expected");
                message.dim = [];
                for (var i = 0; i < object.dim.length; ++i) {
                    if (typeof object.dim[i] !== "object")
                        throw TypeError(".onnx.TensorShapeProto.dim: object expected");
                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.TensorShapeProto
         * @static
         * @param {onnx.TensorShapeProto} message TensorShapeProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TensorShapeProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.dim = [];
            if (message.dim && message.dim.length) {
                object.dim = [];
                for (var j = 0; j < message.dim.length; ++j)
                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);
            }
            return object;
        };

        /**
         * Converts this TensorShapeProto to JSON.
         * @function toJSON
         * @memberof onnx.TensorShapeProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TensorShapeProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        TensorShapeProto.Dimension = (function() {

            /**
             * Properties of a Dimension.
             * @memberof onnx.TensorShapeProto
             * @interface IDimension
             * @property {number|Long|null} [dimValue] Dimension dimValue
             * @property {string|null} [dimParam] Dimension dimParam
             * @property {string|null} [denotation] Dimension denotation
             */

            /**
             * Constructs a new Dimension.
             * @memberof onnx.TensorShapeProto
             * @classdesc Represents a Dimension.
             * @implements IDimension
             * @constructor
             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set
             */
            function Dimension(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Dimension dimValue.
             * @member {number|Long} dimValue
             * @memberof onnx.TensorShapeProto.Dimension
             * @instance
             */
            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Dimension dimParam.
             * @member {string} dimParam
             * @memberof onnx.TensorShapeProto.Dimension
             * @instance
             */
            Dimension.prototype.dimParam = "";

            /**
             * Dimension denotation.
             * @member {string} denotation
             * @memberof onnx.TensorShapeProto.Dimension
             * @instance
             */
            Dimension.prototype.denotation = "";

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Dimension value.
             * @member {"dimValue"|"dimParam"|undefined} value
             * @memberof onnx.TensorShapeProto.Dimension
             * @instance
             */
            Object.defineProperty(Dimension.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["dimValue", "dimParam"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Dimension instance using the specified properties.
             * @function create
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set
             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance
             */
            Dimension.create = function create(properties) {
                return new Dimension(properties);
            };

            /**
             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.
             * @function encode
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Dimension.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.dimValue != null && message.hasOwnProperty("dimValue"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);
                if (message.dimParam != null && message.hasOwnProperty("dimParam"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);
                if (message.denotation != null && message.hasOwnProperty("denotation"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);
                return writer;
            };

            /**
             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Dimension.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Dimension message from the specified reader or buffer.
             * @function decode
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onnx.TensorShapeProto.Dimension} Dimension
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Dimension.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.dimValue = reader.int64();
                        break;
                    case 2:
                        message.dimParam = reader.string();
                        break;
                    case 3:
                        message.denotation = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Dimension message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onnx.TensorShapeProto.Dimension} Dimension
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Dimension.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Dimension message.
             * @function verify
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Dimension.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.dimValue != null && message.hasOwnProperty("dimValue")) {
                    properties.value = 1;
                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))
                        return "dimValue: integer|Long expected";
                }
                if (message.dimParam != null && message.hasOwnProperty("dimParam")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    if (!$util.isString(message.dimParam))
                        return "dimParam: string expected";
                }
                if (message.denotation != null && message.hasOwnProperty("denotation"))
                    if (!$util.isString(message.denotation))
                        return "denotation: string expected";
                return null;
            };

            /**
             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onnx.TensorShapeProto.Dimension} Dimension
             */
            Dimension.fromObject = function fromObject(object) {
                if (object instanceof $root.onnx.TensorShapeProto.Dimension)
                    return object;
                var message = new $root.onnx.TensorShapeProto.Dimension();
                if (object.dimValue != null)
                    if ($util.Long)
                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;
                    else if (typeof object.dimValue === "string")
                        message.dimValue = parseInt(object.dimValue, 10);
                    else if (typeof object.dimValue === "number")
                        message.dimValue = object.dimValue;
                    else if (typeof object.dimValue === "object")
                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();
                if (object.dimParam != null)
                    message.dimParam = String(object.dimParam);
                if (object.denotation != null)
                    message.denotation = String(object.denotation);
                return message;
            };

            /**
             * Creates a plain object from a Dimension message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onnx.TensorShapeProto.Dimension
             * @static
             * @param {onnx.TensorShapeProto.Dimension} message Dimension
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Dimension.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.denotation = "";
                if (message.dimValue != null && message.hasOwnProperty("dimValue")) {
                    if (typeof message.dimValue === "number")
                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;
                    else
                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;
                    if (options.oneofs)
                        object.value = "dimValue";
                }
                if (message.dimParam != null && message.hasOwnProperty("dimParam")) {
                    object.dimParam = message.dimParam;
                    if (options.oneofs)
                        object.value = "dimParam";
                }
                if (message.denotation != null && message.hasOwnProperty("denotation"))
                    object.denotation = message.denotation;
                return object;
            };

            /**
             * Converts this Dimension to JSON.
             * @function toJSON
             * @memberof onnx.TensorShapeProto.Dimension
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Dimension.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Dimension;
        })();

        return TensorShapeProto;
    })();

    onnx.TypeProto = (function() {

        /**
         * Properties of a TypeProto.
         * @memberof onnx
         * @interface ITypeProto
         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType
         * @property {string|null} [denotation] TypeProto denotation
         */

        /**
         * Constructs a new TypeProto.
         * @memberof onnx
         * @classdesc Represents a TypeProto.
         * @implements ITypeProto
         * @constructor
         * @param {onnx.ITypeProto=} [properties] Properties to set
         */
        function TypeProto(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TypeProto tensorType.
         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType
         * @memberof onnx.TypeProto
         * @instance
         */
        TypeProto.prototype.tensorType = null;

        /**
         * TypeProto denotation.
         * @member {string} denotation
         * @memberof onnx.TypeProto
         * @instance
         */
        TypeProto.prototype.denotation = "";

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * TypeProto value.
         * @member {"tensorType"|undefined} value
         * @memberof onnx.TypeProto
         * @instance
         */
        Object.defineProperty(TypeProto.prototype, "value", {
            get: $util.oneOfGetter($oneOfFields = ["tensorType"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new TypeProto instance using the specified properties.
         * @function create
         * @memberof onnx.TypeProto
         * @static
         * @param {onnx.ITypeProto=} [properties] Properties to set
         * @returns {onnx.TypeProto} TypeProto instance
         */
        TypeProto.create = function create(properties) {
            return new TypeProto(properties);
        };

        /**
         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.TypeProto
         * @static
         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TypeProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tensorType != null && message.hasOwnProperty("tensorType"))
                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.denotation != null && message.hasOwnProperty("denotation"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);
            return writer;
        };

        /**
         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.TypeProto
         * @static
         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TypeProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.TypeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.TypeProto} TypeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TypeProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.denotation = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TypeProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.TypeProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.TypeProto} TypeProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TypeProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TypeProto message.
         * @function verify
         * @memberof onnx.TypeProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TypeProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.tensorType != null && message.hasOwnProperty("tensorType")) {
                properties.value = 1;
                {
                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);
                    if (error)
                        return "tensorType." + error;
                }
            }
            if (message.denotation != null && message.hasOwnProperty("denotation"))
                if (!$util.isString(message.denotation))
                    return "denotation: string expected";
            return null;
        };

        /**
         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.TypeProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.TypeProto} TypeProto
         */
        TypeProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.TypeProto)
                return object;
            var message = new $root.onnx.TypeProto();
            if (object.tensorType != null) {
                if (typeof object.tensorType !== "object")
                    throw TypeError(".onnx.TypeProto.tensorType: object expected");
                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);
            }
            if (object.denotation != null)
                message.denotation = String(object.denotation);
            return message;
        };

        /**
         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.TypeProto
         * @static
         * @param {onnx.TypeProto} message TypeProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TypeProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.denotation = "";
            if (message.tensorType != null && message.hasOwnProperty("tensorType")) {
                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);
                if (options.oneofs)
                    object.value = "tensorType";
            }
            if (message.denotation != null && message.hasOwnProperty("denotation"))
                object.denotation = message.denotation;
            return object;
        };

        /**
         * Converts this TypeProto to JSON.
         * @function toJSON
         * @memberof onnx.TypeProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TypeProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        TypeProto.Tensor = (function() {

            /**
             * Properties of a Tensor.
             * @memberof onnx.TypeProto
             * @interface ITensor
             * @property {number|null} [elemType] Tensor elemType
             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape
             */

            /**
             * Constructs a new Tensor.
             * @memberof onnx.TypeProto
             * @classdesc Represents a Tensor.
             * @implements ITensor
             * @constructor
             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set
             */
            function Tensor(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Tensor elemType.
             * @member {number} elemType
             * @memberof onnx.TypeProto.Tensor
             * @instance
             */
            Tensor.prototype.elemType = 0;

            /**
             * Tensor shape.
             * @member {onnx.ITensorShapeProto|null|undefined} shape
             * @memberof onnx.TypeProto.Tensor
             * @instance
             */
            Tensor.prototype.shape = null;

            /**
             * Creates a new Tensor instance using the specified properties.
             * @function create
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set
             * @returns {onnx.TypeProto.Tensor} Tensor instance
             */
            Tensor.create = function create(properties) {
                return new Tensor(properties);
            };

            /**
             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.
             * @function encode
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Tensor.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.elemType != null && message.hasOwnProperty("elemType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);
                if (message.shape != null && message.hasOwnProperty("shape"))
                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.
             * @function encodeDelimited
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Tensor.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Tensor message from the specified reader or buffer.
             * @function decode
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {onnx.TypeProto.Tensor} Tensor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Tensor.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.elemType = reader.int32();
                        break;
                    case 2:
                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Tensor message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {onnx.TypeProto.Tensor} Tensor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Tensor.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Tensor message.
             * @function verify
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Tensor.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.elemType != null && message.hasOwnProperty("elemType"))
                    if (!$util.isInteger(message.elemType))
                        return "elemType: integer expected";
                if (message.shape != null && message.hasOwnProperty("shape")) {
                    var error = $root.onnx.TensorShapeProto.verify(message.shape);
                    if (error)
                        return "shape." + error;
                }
                return null;
            };

            /**
             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {onnx.TypeProto.Tensor} Tensor
             */
            Tensor.fromObject = function fromObject(object) {
                if (object instanceof $root.onnx.TypeProto.Tensor)
                    return object;
                var message = new $root.onnx.TypeProto.Tensor();
                if (object.elemType != null)
                    message.elemType = object.elemType | 0;
                if (object.shape != null) {
                    if (typeof object.shape !== "object")
                        throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");
                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);
                }
                return message;
            };

            /**
             * Creates a plain object from a Tensor message. Also converts values to other types if specified.
             * @function toObject
             * @memberof onnx.TypeProto.Tensor
             * @static
             * @param {onnx.TypeProto.Tensor} message Tensor
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Tensor.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.elemType = 0;
                    object.shape = null;
                }
                if (message.elemType != null && message.hasOwnProperty("elemType"))
                    object.elemType = message.elemType;
                if (message.shape != null && message.hasOwnProperty("shape"))
                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);
                return object;
            };

            /**
             * Converts this Tensor to JSON.
             * @function toJSON
             * @memberof onnx.TypeProto.Tensor
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Tensor.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Tensor;
        })();

        return TypeProto;
    })();

    onnx.OperatorSetIdProto = (function() {

        /**
         * Properties of an OperatorSetIdProto.
         * @memberof onnx
         * @interface IOperatorSetIdProto
         * @property {string|null} [domain] OperatorSetIdProto domain
         * @property {number|Long|null} [version] OperatorSetIdProto version
         */

        /**
         * Constructs a new OperatorSetIdProto.
         * @memberof onnx
         * @classdesc Represents an OperatorSetIdProto.
         * @implements IOperatorSetIdProto
         * @constructor
         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set
         */
        function OperatorSetIdProto(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * OperatorSetIdProto domain.
         * @member {string} domain
         * @memberof onnx.OperatorSetIdProto
         * @instance
         */
        OperatorSetIdProto.prototype.domain = "";

        /**
         * OperatorSetIdProto version.
         * @member {number|Long} version
         * @memberof onnx.OperatorSetIdProto
         * @instance
         */
        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new OperatorSetIdProto instance using the specified properties.
         * @function create
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set
         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance
         */
        OperatorSetIdProto.create = function create(properties) {
            return new OperatorSetIdProto(properties);
        };

        /**
         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.
         * @function encode
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperatorSetIdProto.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.domain != null && message.hasOwnProperty("domain"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);
            return writer;
        };

        /**
         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.
         * @function encodeDelimited
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an OperatorSetIdProto message from the specified reader or buffer.
         * @function decode
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperatorSetIdProto.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.domain = reader.string();
                    break;
                case 2:
                    message.version = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an OperatorSetIdProto message.
         * @function verify
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OperatorSetIdProto.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))
                    return "version: integer|Long expected";
            return null;
        };

        /**
         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto
         */
        OperatorSetIdProto.fromObject = function fromObject(object) {
            if (object instanceof $root.onnx.OperatorSetIdProto)
                return object;
            var message = new $root.onnx.OperatorSetIdProto();
            if (object.domain != null)
                message.domain = String(object.domain);
            if (object.version != null)
                if ($util.Long)
                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;
                else if (typeof object.version === "string")
                    message.version = parseInt(object.version, 10);
                else if (typeof object.version === "number")
                    message.version = object.version;
                else if (typeof object.version === "object")
                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.
         * @function toObject
         * @memberof onnx.OperatorSetIdProto
         * @static
         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OperatorSetIdProto.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.domain = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.version = options.longs === String ? "0" : 0;
            }
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            if (message.version != null && message.hasOwnProperty("version"))
                if (typeof message.version === "number")
                    object.version = options.longs === String ? String(message.version) : message.version;
                else
                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;
            return object;
        };

        /**
         * Converts this OperatorSetIdProto to JSON.
         * @function toJSON
         * @memberof onnx.OperatorSetIdProto
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OperatorSetIdProto.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return OperatorSetIdProto;
    })();

    return onnx;
})();

module.exports = $root;


/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(/*! ./src/index-minimal */ "./node_modules/protobufjs/src/index-minimal.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
protobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ "./node_modules/protobufjs/src/writer_buffer.js");
protobuf.Reader       = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
protobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ "./node_modules/protobufjs/src/reader_buffer.js");

// Utility
protobuf.util         = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");
protobuf.rpc          = __webpack_require__(/*! ./rpc */ "./node_modules/protobufjs/src/rpc.js");
protobuf.roots        = __webpack_require__(/*! ./roots */ "./node_modules/protobufjs/src/roots.js");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ (function(module) {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(/*! ./rpc/service */ "./node_modules/protobufjs/src/rpc/service.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Service;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ "./node_modules/@protobufjs/aspromise/index.js");

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(/*! @protobufjs/base64 */ "./node_modules/@protobufjs/base64/index.js");

// base class of rpc.Service
util.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ "./node_modules/@protobufjs/eventemitter/index.js");

// float handling accross browsers
util.float = __webpack_require__(/*! @protobufjs/float */ "./node_modules/@protobufjs/float/index.js");

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(/*! @protobufjs/inquire */ "./node_modules/@protobufjs/inquire/index.js");

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ "./node_modules/@protobufjs/utf8/index.js");

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(/*! @protobufjs/pool */ "./node_modules/@protobufjs/pool/index.js");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(/*! ./longbits */ "./node_modules/protobufjs/src/util/longbits.js");

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean(typeof __webpack_require__.g !== "undefined"
                   && __webpack_require__.g
                   && __webpack_require__.g.process
                   && __webpack_require__.g.process.versions
                   && __webpack_require__.g.process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && __webpack_require__.g
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),

/***/ "./lib/backend-onnxjs.ts":
/*!*******************************!*\
  !*** ./lib/backend-onnxjs.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onnxjsBackend = void 0;
var session_1 = __webpack_require__(/*! ./onnxjs/session */ "./lib/onnxjs/session.ts");
var session_handler_1 = __webpack_require__(/*! ./onnxjs/session-handler */ "./lib/onnxjs/session-handler.ts");
var OnnxjsBackend = /** @class */ (function () {
    function OnnxjsBackend() {
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    OnnxjsBackend.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    OnnxjsBackend.prototype.createSessionHandler = function (pathOrBuffer, options) {
        return __awaiter(this, void 0, void 0, function () {
            var session;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        session = new session_1.Session(options);
                        if (!(typeof pathOrBuffer === 'string')) return [3 /*break*/, 2];
                        return [4 /*yield*/, session.loadModel(pathOrBuffer)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, session.loadModel(pathOrBuffer)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, new session_handler_1.OnnxjsSessionHandler(session)];
                }
            });
        });
    };
    return OnnxjsBackend;
}());
exports.onnxjsBackend = new OnnxjsBackend();


/***/ }),

/***/ "./lib/backend-wasm.ts":
/*!*****************************!*\
  !*** ./lib/backend-wasm.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.wasmBackend = exports.initializeFlags = void 0;
var fs_1 = __webpack_require__(/*! fs */ "?d87b");
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var os_1 = __webpack_require__(/*! os */ "?0757");
var util_1 = __webpack_require__(/*! util */ "?334c");
var proxy_wrapper_1 = __webpack_require__(/*! ./wasm/proxy-wrapper */ "./lib/wasm/proxy-wrapper.ts");
var session_handler_1 = __webpack_require__(/*! ./wasm/session-handler */ "./lib/wasm/session-handler.ts");
/**
 * This function initializes all flags for WebAssembly.
 *
 * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session
 * being created, to override default value.
 */
var initializeFlags = function () {
    if (typeof onnxruntime_common_1.env.wasm.initTimeout !== 'number' || onnxruntime_common_1.env.wasm.initTimeout < 0) {
        onnxruntime_common_1.env.wasm.initTimeout = 0;
    }
    if (typeof onnxruntime_common_1.env.wasm.simd !== 'boolean') {
        onnxruntime_common_1.env.wasm.simd = true;
    }
    if (typeof onnxruntime_common_1.env.wasm.proxy !== 'boolean') {
        onnxruntime_common_1.env.wasm.proxy = false;
    }
    if (typeof onnxruntime_common_1.env.wasm.numThreads !== 'number' || !Number.isInteger(onnxruntime_common_1.env.wasm.numThreads) || onnxruntime_common_1.env.wasm.numThreads <= 0) {
        var numCpuLogicalCores = typeof navigator === 'undefined' ? os_1.cpus().length : navigator.hardwareConcurrency;
        onnxruntime_common_1.env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
    }
};
exports.initializeFlags = initializeFlags;
var OnnxruntimeWebAssemblyBackend = /** @class */ (function () {
    function OnnxruntimeWebAssemblyBackend() {
    }
    OnnxruntimeWebAssemblyBackend.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // populate wasm flags
                        exports.initializeFlags();
                        // init wasm
                        return [4 /*yield*/, proxy_wrapper_1.initWasm()];
                    case 1:
                        // init wasm
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OnnxruntimeWebAssemblyBackend.prototype.createSessionHandler = function (pathOrBuffer, options) {
        return __awaiter(this, void 0, void 0, function () {
            var buffer, response, arrayBuffer, handler;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof pathOrBuffer === 'string')) return [3 /*break*/, 6];
                        if (!(typeof fetch === 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, util_1.promisify(fs_1.readFile)(pathOrBuffer)];
                    case 1:
                        // node
                        buffer = _a.sent();
                        return [3 /*break*/, 5];
                    case 2: return [4 /*yield*/, fetch(pathOrBuffer)];
                    case 3:
                        response = _a.sent();
                        return [4 /*yield*/, response.arrayBuffer()];
                    case 4:
                        arrayBuffer = _a.sent();
                        buffer = new Uint8Array(arrayBuffer);
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        buffer = pathOrBuffer;
                        _a.label = 7;
                    case 7:
                        handler = new session_handler_1.OnnxruntimeWebAssemblySessionHandler();
                        return [4 /*yield*/, handler.loadModel(buffer, options)];
                    case 8:
                        _a.sent();
                        return [2 /*return*/, Promise.resolve(handler)];
                }
            });
        });
    };
    return OnnxruntimeWebAssemblyBackend;
}());
exports.wasmBackend = new OnnxruntimeWebAssemblyBackend();


/***/ }),

/***/ "./lib/index.ts":
/*!**********************!*\
  !*** ./lib/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js"), exports);
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var backend_onnxjs_1 = __webpack_require__(/*! ./backend-onnxjs */ "./lib/backend-onnxjs.ts");
var backend_wasm_1 = __webpack_require__(/*! ./backend-wasm */ "./lib/backend-wasm.ts");
onnxruntime_common_1.registerBackend('webgl', backend_onnxjs_1.onnxjsBackend, 1);
onnxruntime_common_1.registerBackend('wasm', backend_wasm_1.wasmBackend, 2);


/***/ }),

/***/ "./lib/onnxjs/attribute-with-cache-key.ts":
/*!************************************************!*\
  !*** ./lib/onnxjs/attribute-with-cache-key.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createAttributeWithCacheKey = void 0;
var AttributeWithCacheKeyImpl = /** @class */ (function () {
    function AttributeWithCacheKeyImpl(attribute) {
        Object.assign(this, attribute);
    }
    Object.defineProperty(AttributeWithCacheKeyImpl.prototype, "cacheKey", {
        get: function () {
            var _this = this;
            if (!this._cacheKey) {
                this._cacheKey =
                    Object.getOwnPropertyNames(this).sort().map(function (name) { return "" + _this[name]; }).join(';');
            }
            return this._cacheKey;
        },
        enumerable: false,
        configurable: true
    });
    return AttributeWithCacheKeyImpl;
}());
var createAttributeWithCacheKey = function (attribute) {
    return new AttributeWithCacheKeyImpl(attribute);
};
exports.createAttributeWithCacheKey = createAttributeWithCacheKey;


/***/ }),

/***/ "./lib/onnxjs/attribute.ts":
/*!*********************************!*\
  !*** ./lib/onnxjs/attribute.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Attribute = void 0;
var onnx_proto_1 = __webpack_require__(/*! onnx-proto */ "./node_modules/onnx-proto/dist/onnx.js");
var ort_generated_1 = __webpack_require__(/*! ./ort-schema/ort-generated */ "./lib/onnxjs/ort-schema/ort-generated.ts");
var ortFbs = ort_generated_1.onnxruntime.experimental.fbs;
var tensor_1 = __webpack_require__(/*! ./tensor */ "./lib/onnxjs/tensor.ts");
var util_1 = __webpack_require__(/*! ./util */ "./lib/onnxjs/util.ts");
var Attribute = /** @class */ (function () {
    function Attribute(attributes) {
        var e_1, _a;
        this._attributes = new Map();
        if (attributes !== null && attributes !== undefined) {
            try {
                for (var attributes_1 = __values(attributes), attributes_1_1 = attributes_1.next(); !attributes_1_1.done; attributes_1_1 = attributes_1.next()) {
                    var attr = attributes_1_1.value;
                    if (attr instanceof onnx_proto_1.onnx.AttributeProto) {
                        this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);
                    }
                    else if (attr instanceof ortFbs.Attribute) {
                        this._attributes.set(attr.name(), [Attribute.getValue(attr), Attribute.getType(attr)]);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (attributes_1_1 && !attributes_1_1.done && (_a = attributes_1.return)) _a.call(attributes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this._attributes.size < attributes.length) {
                throw new Error('duplicated attribute names');
            }
        }
    }
    Attribute.prototype.set = function (key, type, value) {
        this._attributes.set(key, [value, type]);
    };
    Attribute.prototype.delete = function (key) {
        this._attributes.delete(key);
    };
    Attribute.prototype.getFloat = function (key, defaultValue) {
        return this.get(key, 'float', defaultValue);
    };
    Attribute.prototype.getInt = function (key, defaultValue) {
        return this.get(key, 'int', defaultValue);
    };
    Attribute.prototype.getString = function (key, defaultValue) {
        return this.get(key, 'string', defaultValue);
    };
    Attribute.prototype.getTensor = function (key, defaultValue) {
        return this.get(key, 'tensor', defaultValue);
    };
    Attribute.prototype.getFloats = function (key, defaultValue) {
        return this.get(key, 'floats', defaultValue);
    };
    Attribute.prototype.getInts = function (key, defaultValue) {
        return this.get(key, 'ints', defaultValue);
    };
    Attribute.prototype.getStrings = function (key, defaultValue) {
        return this.get(key, 'strings', defaultValue);
    };
    Attribute.prototype.getTensors = function (key, defaultValue) {
        return this.get(key, 'tensors', defaultValue);
    };
    Attribute.prototype.get = function (key, type, defaultValue) {
        var valueAndType = this._attributes.get(key);
        if (valueAndType === undefined) {
            if (defaultValue !== undefined) {
                return defaultValue;
            }
            throw new Error("required attribute not found: " + key);
        }
        if (valueAndType[1] !== type) {
            throw new Error("type mismatch: expected " + type + " but got " + valueAndType[1]);
        }
        return valueAndType[0];
    };
    Attribute.getType = function (attr) {
        var type = attr instanceof onnx_proto_1.onnx.AttributeProto ? (attr).type : attr.type();
        switch (type) {
            case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOAT:
                return 'float';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.INT:
                return 'int';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.STRING:
                return 'string';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSOR:
                return 'tensor';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOATS:
                return 'floats';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.INTS:
                return 'ints';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.STRINGS:
                return 'strings';
            case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSORS:
                return 'tensors';
            default:
                throw new Error("attribute type is not supported yet: " + onnx_proto_1.onnx.AttributeProto.AttributeType[type]);
        }
    };
    Attribute.getValue = function (attr) {
        var attrType = attr instanceof onnx_proto_1.onnx.AttributeProto ? attr.type : attr.type();
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPHS) {
            throw new Error('graph attribute is not supported yet');
        }
        var value = this.getValueNoCheck(attr);
        // cast LONG to number
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.INT && util_1.LongUtil.isLong(value)) {
            return util_1.LongUtil.longToNumber(value);
        }
        // cast LONG[] to number[]
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.INTS) {
            var arr = value;
            var numberValue = new Array(arr.length);
            for (var i = 0; i < arr.length; i++) {
                var maybeLong = arr[i];
                numberValue[i] = util_1.LongUtil.longToNumber(maybeLong);
            }
            return numberValue;
        }
        // cast onnx.TensorProto to onnxjs.Tensor
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.TENSOR) {
            return attr instanceof onnx_proto_1.onnx.AttributeProto ? tensor_1.Tensor.fromProto(value) :
                tensor_1.Tensor.fromOrtTensor(value);
        }
        // cast onnx.TensorProto[] to onnxjs.Tensor[]
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.TENSORS) {
            if (attr instanceof onnx_proto_1.onnx.AttributeProto) {
                var tensorProtos = value;
                return tensorProtos.map(function (value) { return tensor_1.Tensor.fromProto(value); });
            }
            else if (attr instanceof ortFbs.Attribute) {
                var tensorProtos = value;
                return tensorProtos.map(function (value) { return tensor_1.Tensor.fromOrtTensor(value); });
            }
        }
        // cast Uint8Array to string
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.STRING) {
            // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,
            // string attributes are returned as string, so no conversion is needed.
            if (attr instanceof onnx_proto_1.onnx.AttributeProto) {
                var utf8String = value;
                return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();
            }
        }
        // cast Uint8Array[] to string[]
        if (attrType === onnx_proto_1.onnx.AttributeProto.AttributeType.STRINGS) {
            // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort
            // format strings attributes are returned as string[], so no conversion is needed.
            if (attr instanceof onnx_proto_1.onnx.AttributeProto) {
                var utf8Strings = value;
                return utf8Strings.map(function (utf8String) { return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString(); });
            }
        }
        return value;
    };
    Attribute.getValueNoCheck = function (attr) {
        return attr instanceof (onnx_proto_1.onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :
            this.getValueNoCheckFromOrtFormat(attr);
    };
    Attribute.getValueNoCheckFromOnnxFormat = function (attr) {
        switch (attr.type) {
            case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOAT:
                return attr.f;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.INT:
                return attr.i;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.STRING:
                return attr.s;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSOR:
                return attr.t;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPH:
                return attr.g;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.FLOATS:
                return attr.floats;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.INTS:
                return attr.ints;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.STRINGS:
                return attr.strings;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.TENSORS:
                return attr.tensors;
            case onnx_proto_1.onnx.AttributeProto.AttributeType.GRAPHS:
                return attr.graphs;
            default:
                throw new Error("unsupported attribute type: " + onnx_proto_1.onnx.AttributeProto.AttributeType[attr.type]);
        }
    };
    Attribute.getValueNoCheckFromOrtFormat = function (attr) {
        switch (attr.type()) {
            case ortFbs.AttributeType.FLOAT:
                return attr.f();
            case ortFbs.AttributeType.INT:
                return attr.i();
            case ortFbs.AttributeType.STRING:
                return attr.s();
            case ortFbs.AttributeType.TENSOR:
                return attr.t();
            case ortFbs.AttributeType.GRAPH:
                return attr.g();
            case ortFbs.AttributeType.FLOATS:
                return attr.floatsArray();
            case ortFbs.AttributeType.INTS: {
                var ints = [];
                for (var i = 0; i < attr.intsLength(); i++) {
                    ints.push(attr.ints(i));
                }
                return ints;
            }
            case ortFbs.AttributeType.STRINGS: {
                var strings = [];
                for (var i = 0; i < attr.stringsLength(); i++) {
                    strings.push(attr.strings(i));
                }
                return strings;
            }
            case ortFbs.AttributeType.TENSORS: {
                var tensors = [];
                for (var i = 0; i < attr.tensorsLength(); i++) {
                    tensors.push(attr.tensors(i));
                }
                return tensors;
            }
            // case ortFbs.AttributeType.GRAPHS:
            // TODO: Subgraph not supported yet.
            // const graphs = [];
            // for (let i = 0; i < attr.graphsLength(); i++) {
            //   graphs.push(attr.graphs(i)!);
            // }
            // return graphs;
            default:
                throw new Error("unsupported attribute type: " + ortFbs.AttributeType[attr.type()]);
        }
    };
    return Attribute;
}());
exports.Attribute = Attribute;


/***/ }),

/***/ "./lib/onnxjs/backend.ts":
/*!*******************************!*\
  !*** ./lib/onnxjs/backend.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveBackend = exports.backend = void 0;
var backend_webgl_1 = __webpack_require__(/*! ./backends/backend-webgl */ "./lib/onnxjs/backends/backend-webgl.ts");
// caches all initialized backend instances
var backendsCache = new Map();
exports.backend = {
    webgl: new backend_webgl_1.WebGLBackend(),
};
/**
 * Resolve a reference to the backend. If a hint is specified, the corresponding
 * backend will be used.
 */
function resolveBackend(hint) {
    return __awaiter(this, void 0, void 0, function () {
        var hints, hints_1, hints_1_1, backendHint, cache, backend_1, e_1_1;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!!hint) return [3 /*break*/, 1];
                    return [2 /*return*/, resolveBackend(['webgl'])];
                case 1:
                    hints = typeof hint === 'string' ? [hint] : hint;
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 7, 8, 9]);
                    hints_1 = __values(hints), hints_1_1 = hints_1.next();
                    _b.label = 3;
                case 3:
                    if (!!hints_1_1.done) return [3 /*break*/, 6];
                    backendHint = hints_1_1.value;
                    cache = backendsCache.get(backendHint);
                    if (cache) {
                        return [2 /*return*/, cache];
                    }
                    return [4 /*yield*/, tryLoadBackend(backendHint)];
                case 4:
                    backend_1 = _b.sent();
                    if (backend_1) {
                        return [2 /*return*/, backend_1];
                    }
                    _b.label = 5;
                case 5:
                    hints_1_1 = hints_1.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (hints_1_1 && !hints_1_1.done && (_a = hints_1.return)) _a.call(hints_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9: throw new Error('no available backend to use');
            }
        });
    });
}
exports.resolveBackend = resolveBackend;
function tryLoadBackend(backendHint) {
    return __awaiter(this, void 0, void 0, function () {
        var backendObj, backend_2, init;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    backendObj = exports.backend;
                    if (!(typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint]))) return [3 /*break*/, 3];
                    backend_2 = backendObj[backendHint];
                    init = backend_2.initialize();
                    if (!(typeof init === 'object' && 'then' in init)) return [3 /*break*/, 2];
                    return [4 /*yield*/, init];
                case 1:
                    init = _a.sent();
                    _a.label = 2;
                case 2:
                    if (init) {
                        backendsCache.set(backendHint, backend_2);
                        return [2 /*return*/, backend_2];
                    }
                    _a.label = 3;
                case 3: return [2 /*return*/, undefined];
            }
        });
    });
}
function isBackend(obj) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var o = obj;
    // check if an object is a Backend instance
    if ('initialize' in o && typeof o.initialize === 'function' && // initialize()
        'createSessionHandler' in o && typeof o.createSessionHandler === 'function' && // createSessionHandler()
        'dispose' in o && typeof o.dispose === 'function' // dispose()
    ) {
        return true;
    }
    return false;
}


/***/ }),

/***/ "./lib/onnxjs/backends/backend-webgl.ts":
/*!**********************************************!*\
  !*** ./lib/onnxjs/backends/backend-webgl.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLBackend = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var instrument_1 = __webpack_require__(/*! ../instrument */ "./lib/onnxjs/instrument.ts");
var session_handler_1 = __webpack_require__(/*! ./webgl/session-handler */ "./lib/onnxjs/backends/webgl/session-handler.ts");
var webgl_context_factory_1 = __webpack_require__(/*! ./webgl/webgl-context-factory */ "./lib/onnxjs/backends/webgl/webgl-context-factory.ts");
/**
 * WebGLBackend is the entry point for all WebGL opeartions
 * When it starts it created the WebGLRenderingContext
 * and other main framework components such as Program and Texture Managers
 */
var WebGLBackend = /** @class */ (function () {
    function WebGLBackend() {
    }
    Object.defineProperty(WebGLBackend.prototype, "contextId", {
        get: function () {
            return onnxruntime_common_1.env.webgl.contextId;
        },
        set: function (value) {
            onnxruntime_common_1.env.webgl.contextId = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebGLBackend.prototype, "matmulMaxBatchSize", {
        get: function () {
            return onnxruntime_common_1.env.webgl.matmulMaxBatchSize;
        },
        set: function (value) {
            onnxruntime_common_1.env.webgl.matmulMaxBatchSize = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebGLBackend.prototype, "textureCacheMode", {
        get: function () {
            return onnxruntime_common_1.env.webgl.textureCacheMode;
        },
        set: function (value) {
            onnxruntime_common_1.env.webgl.textureCacheMode = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebGLBackend.prototype, "pack", {
        get: function () {
            return onnxruntime_common_1.env.webgl.pack;
        },
        set: function (value) {
            onnxruntime_common_1.env.webgl.pack = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebGLBackend.prototype, "async", {
        get: function () {
            return onnxruntime_common_1.env.webgl.async;
        },
        set: function (value) {
            onnxruntime_common_1.env.webgl.async = value;
        },
        enumerable: false,
        configurable: true
    });
    WebGLBackend.prototype.initialize = function () {
        try {
            this.glContext = webgl_context_factory_1.createWebGLContext(this.contextId);
            if (typeof this.matmulMaxBatchSize !== 'number') {
                this.matmulMaxBatchSize = 16;
            }
            if (typeof this.textureCacheMode !== 'string') {
                this.textureCacheMode = 'full';
            }
            if (typeof this.pack !== 'boolean') {
                this.pack = false;
            }
            if (typeof this.async !== 'boolean') {
                this.async = false;
            }
            instrument_1.Logger.setWithEnv(onnxruntime_common_1.env);
            instrument_1.Logger.verbose('WebGLBackend', "Created WebGLContext: " + typeof this.glContext + " with matmulMaxBatchSize: " + this.matmulMaxBatchSize + "; textureCacheMode: " + this.textureCacheMode + "; pack: " + this.pack + "; async: " + this.async + ".");
            return true;
        }
        catch (e) {
            instrument_1.Logger.warning('WebGLBackend', "Unable to initialize WebGLBackend. " + e);
            return false;
        }
    };
    WebGLBackend.prototype.createSessionHandler = function (context) {
        return new session_handler_1.WebGLSessionHandler(this, context);
    };
    WebGLBackend.prototype.dispose = function () {
        this.glContext.dispose();
    };
    return WebGLBackend;
}());
exports.WebGLBackend = WebGLBackend;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts":
/*!**********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CoordsGlslLib = void 0;
var util_1 = __webpack_require__(/*! ../../util */ "./lib/onnxjs/util.ts");
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
var glsl_source_1 = __webpack_require__(/*! ./glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var texture_layout_strategy_1 = __webpack_require__(/*! ./texture-layout-strategy */ "./lib/onnxjs/backends/webgl/texture-layout-strategy.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./lib/onnxjs/backends/webgl/utils.ts");
/**
 * GLSL Library responsible for data types and routines for manipulating
 * coordinates and mapping to/from tensor indices
 */
var CoordsGlslLib = /** @class */ (function (_super) {
    __extends(CoordsGlslLib, _super);
    function CoordsGlslLib(context) {
        return _super.call(this, context) || this;
    }
    CoordsGlslLib.prototype.getFunctions = function () {
        return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, this.offsetToCoords()), this.coordsToOffset()), this.toVec()), this.valueFrom()), this.getCommonUtilFuncs()), this.getInputsSamplingSnippets()), this.getOutputSamplingSnippet());
    };
    CoordsGlslLib.prototype.getCustomTypes = function () {
        return {};
    };
    /**
     * Produces a function that can map from
     * 2D normalzied coordinates (s,t) to a flat offset
     */
    CoordsGlslLib.prototype.offsetToCoords = function () {
        var funcName = 'offsetToCoords';
        return {
            offsetToCoords: new glsl_definitions_1.GlslLibRoutine("\n      vec2 " + funcName + "(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      ")
        };
    };
    /**
     * Produces a function that can map from
     * 2D normalzied coordinates (s,t) to a flat offset
     */
    CoordsGlslLib.prototype.coordsToOffset = function () {
        var funcName = 'coordsToOffset';
        return {
            coordsToOffset: new glsl_definitions_1.GlslLibRoutine("\n      int " + funcName + "(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      ")
        };
    };
    /**
     * Generates code for output sampler.
     */
    CoordsGlslLib.prototype.getOutputSamplingSnippet = function () {
        var outputLayout = this.context.outputTextureLayout;
        if (outputLayout.isPacked) {
            return this.getPackedOutputSamplingSnippet(outputLayout);
        }
        else {
            return this.getUnpackedOutputSamplingSnippet(outputLayout);
        }
    };
    /**
     * Generates code for packed output sampler.
     */
    CoordsGlslLib.prototype.getPackedOutputSamplingSnippet = function (outputLayout) {
        var outShape = outputLayout.unpackedShape;
        var outTexShape = [outputLayout.width, outputLayout.height];
        var result = {};
        var funcName = 'getOutputCoords';
        switch (outShape.length) {
            case 0:
                result[funcName] = this.getOutputScalarCoords();
                break;
            case 1:
                result[funcName] = this.getOutputPacked1DCoords(outShape, outTexShape);
                break;
            case 2:
                result[funcName] = this.getOutputPacked2DCoords(outShape, outTexShape);
                break;
            case 3:
                result[funcName] =
                    this.getOutputPacked3DCoords(outShape, outTexShape);
                break;
            default:
                result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape);
        }
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        // TODO we need this to properly return a packed vec4 from kernels.
        // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.
        var floatTextureSetRGBASource = "\n      void setOutput(vec4 val) {\n        " + glsl.output + " = val;\n      }\n    ";
        var floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';
        result[floatTextureSetRGBAFuncName] = new glsl_definitions_1.GlslLibRoutine(floatTextureSetRGBASource);
        return result;
    };
    /**
     * Generates code for unpacked output sampler.
     */
    CoordsGlslLib.prototype.getUnpackedOutputSamplingSnippet = function (outputLayout) {
        var outShape = outputLayout.unpackedShape;
        var outTexShape = [outputLayout.width, outputLayout.height];
        var result = {};
        var funcName = 'getOutputCoords';
        switch (outShape.length) {
            case 0:
                result[funcName] = this.getOutputScalarCoords();
                break;
            case 1:
                result[funcName] = this.getOutputUnpacked1DCoords(outShape, outTexShape);
                break;
            case 2:
                result[funcName] =
                    this.getOutputUnpacked2DCoords(outShape, outTexShape);
                break;
            case 3:
                result[funcName] =
                    this.getOutputUnpacked3DCoords(outShape, outTexShape);
                break;
            case 4:
                result[funcName] = this.getOutputUnpacked4DCoords(outShape, outTexShape);
                break;
            case 5:
                result[funcName] = this.getOutputUnpacked5DCoords(outShape, outTexShape);
                break;
            case 6:
                result[funcName] = this.getOutputUnpacked6DCoords(outShape, outTexShape);
                break;
            default:
                throw new Error("Unsupported output dimensionality: " + outShape.length);
        }
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        // TODO we need this to properly return a packed vec4 from kernels.
        // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.
        var floatTextureSetRSource = "\n        void setOutput(float val) {\n          " + glsl.output + " = vec4(val, 0, 0, 0);\n        }\n    ";
        var floatTextureSetRFuncName = 'floatTextureSetR';
        result[floatTextureSetRFuncName] = new glsl_definitions_1.GlslLibRoutine(floatTextureSetRSource);
        return result;
    };
    /**
     * Scalar output coordinates.
     */
    CoordsGlslLib.prototype.getOutputScalarCoords = function () {
        return new glsl_definitions_1.GlslLibRoutine("\n      int getOutputCoords() {\n        return 0;\n      }\n    ");
    };
    /**
     * 1D packed output coordinates.
     */
    CoordsGlslLib.prototype.getOutputPacked1DCoords = function (shape, texShape) {
        var packedTexShape = texShape;
        var source = '';
        if (packedTexShape[0] === 1) {
            source = "\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * " + packedTexShape[1] + ".0);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source);
        }
        if (packedTexShape[1] === 1) {
            source = "\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * " + packedTexShape[0] + ".0);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source);
        }
        source = "\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n          return 2 * (resTexRC.y * " + packedTexShape[0] + " + resTexRC.x);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * 2D packed output coordinates.
     */
    CoordsGlslLib.prototype.getOutputPacked2DCoords = function (shape, texShape) {
        var source = '';
        if (util_1.ArrayUtil.arraysEqual(shape, texShape)) {
            source = "\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(" + texShape[0] + ", " + texShape[1] + "));\n        }\n      ";
            return new glsl_definitions_1.GlslLibRoutine(source);
        }
        var packedTexShape = texShape;
        // texels needed to accommodate a logical row
        var texelsInLogicalRow = Math.ceil(shape[1] / 2);
        /**
         * getOutputCoords
         *
         * resTexRC: The rows and columns of the texels. If you move over one
         * texel to the right in the packed texture, you are moving over one column
         * (not two).
         *
         * index: The texel index
         */
        source = "\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n\n          int index = resTexRC.y * " + packedTexShape[0] + " + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, " + texelsInLogicalRow + ") * 2;\n          int c = 2 * (index / " + texelsInLogicalRow + ");\n\n          return ivec2(r, c);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * 3D packed output coordinates.
     */
    CoordsGlslLib.prototype.getOutputPacked3DCoords = function (shape, texShape) {
        var packedTexShape = [texShape[0], texShape[1]];
        var texelsInLogicalRow = Math.ceil(shape[2] / 2);
        var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);
        var source = "\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n          int index = resTexRC.y * " + packedTexShape[0] + " + resTexRC.x;\n\n          int b = index / " + texelsInBatch + ";\n          index -= b * " + texelsInBatch + ";\n\n          // reverse r and c order for packed texture\n          int r = imod(index, " + texelsInLogicalRow + ") * 2;\n          int c = 2 * (index / " + texelsInLogicalRow + ");\n\n          return ivec3(b, r, c);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * ND packed output coordinates.
     */
    CoordsGlslLib.prototype.getOutputPackedNDCoords = function (shape, texShape) {
        var packedTexShape = [texShape[0], texShape[1]];
        var texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);
        var texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);
        var texelsInBatchN = texelsInBatch;
        var batches = '';
        var coords = 'b, r, c';
        for (var b = 2; b < shape.length - 1; b++) {
            texelsInBatchN *= shape[shape.length - b - 1];
            batches = "\n      int b" + b + " = index / " + texelsInBatchN + ";\n      index -= b" + b + " * " + texelsInBatchN + ";\n    " + batches;
            coords = "b" + b + ", " + coords;
        }
        var source = "\n      ivec" + shape.length + " getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(" + packedTexShape[0] + ", " + packedTexShape[1] + "));\n        int index = resTexRC.y * " + packedTexShape[0] + " + resTexRC.x;\n\n        " + batches + "\n\n        int b = index / " + texelsInBatch + ";\n        index -= b * " + texelsInBatch + ";\n\n        // reverse r and c order for packed texture\n        int r = imod(index, " + texelsInLogicalRow + ") * 2;\n        int c = 2 * (index / " + texelsInLogicalRow + ");\n\n        return ivec" + shape.length + "(" + coords + ");\n      }\n    ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 1D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked1DCoords = function (shape, texShape) {
        var source = "\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + texShape[0] + ", " + texShape[1] + "));\n          return resTexRC.y * " + texShape[0] + " + resTexRC.x;\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 2D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked2DCoords = function (shape, texShape) {
        var source = "\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + texShape[0] + ", " + texShape[1] + "));\n          int index = resTexRC.y * " + texShape[0] + " + resTexRC.x;\n          int r = index / " + shape[1] + ";\n          int c = index - r * " + shape[1] + ";\n          return ivec2(r, c);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 3D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked3DCoords = function (shape, texShape) {
        var source = '';
        var rank = shape.length;
        var strides = null;
        if (rank < 2) {
            strides = [];
        }
        strides = new Array(rank - 1);
        strides[rank - 2] = shape[rank - 1];
        for (var i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * shape[i + 1];
        }
        var coordsToCompute = ['r', 'c', 'd'];
        var coordsFromIndexSnippet = strides
            .map(function (stride, i) {
            var line1 = "int " + coordsToCompute[i] + " = index / " + stride;
            var line2 = i === strides.length - 1 ?
                "int " + coordsToCompute[i + 1] + " = index - " + coordsToCompute[i] + " * " + stride :
                "index -= " + coordsToCompute[i] + " * " + stride;
            return line1 + "; " + line2 + ";";
        })
            .join('');
        source = "\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + texShape[0] + ", " + texShape[1] + "));\n          int index = resTexRC.y * " + texShape[0] + " + resTexRC.x;\n          " + coordsFromIndexSnippet + "\n          return ivec3(r, c, d);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 4D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked4DCoords = function (shape, texShape) {
        var source = '';
        var rank = shape.length;
        var strides = null;
        if (rank < 2) {
            strides = [];
        }
        strides = new Array(rank - 1);
        strides[rank - 2] = shape[rank - 1];
        for (var i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * shape[i + 1];
        }
        var coordsToCompute = ['r', 'c', 'd', 'd2'];
        var coordsFromIndexSnippet = strides
            .map(function (stride, i) {
            var line1 = "int " + coordsToCompute[i] + " = index / " + stride;
            var line2 = i === strides.length - 1 ?
                "int " + coordsToCompute[i + 1] + " = index - " + coordsToCompute[i] + " * " + stride :
                "index -= " + coordsToCompute[i] + " * " + stride;
            return line1 + "; " + line2 + ";";
        })
            .join('');
        source = "\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + texShape[0] + ", " + texShape[1] + "));\n          int index = resTexRC.y * " + texShape[0] + " + resTexRC.x;\n          " + coordsFromIndexSnippet + "\n          return ivec4(r, c, d, d2);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 5D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked5DCoords = function (shape, texShape) {
        var source = '';
        var rank = shape.length;
        var strides = null;
        if (rank < 2) {
            strides = [];
        }
        strides = new Array(rank - 1);
        strides[rank - 2] = shape[rank - 1];
        for (var i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * shape[i + 1];
        }
        var coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];
        var coordsFromIndexSnippet = strides
            .map(function (stride, i) {
            var line1 = "int " + coordsToCompute[i] + " = index / " + stride;
            var line2 = i === strides.length - 1 ?
                "int " + coordsToCompute[i + 1] + " = index - " + coordsToCompute[i] + " * " + stride :
                "index -= " + coordsToCompute[i] + " * " + stride;
            return line1 + "; " + line2 + ";";
        })
            .join('');
        source = "\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(" + texShape[0] + ", " + texShape[1] + "));\n          int index = resTexRC.y * " + texShape[0] + " + resTexRC.x;\n          " + coordsFromIndexSnippet + "\n          return ivec5(r, c, d, d2, d3);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked 6D output coordinates.
     */
    CoordsGlslLib.prototype.getOutputUnpacked6DCoords = function (shape, texShape) {
        var source = '';
        var rank = shape.length;
        var strides = null;
        if (rank < 2) {
            strides = [];
        }
        strides = new Array(rank - 1);
        strides[rank - 2] = shape[rank - 1];
        for (var i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * shape[i + 1];
        }
        var coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];
        var coordsFromIndexSnippet = strides
            .map(function (stride, i) {
            var line1 = "int " + coordsToCompute[i] + " = index / " + stride;
            var line2 = i === strides.length - 1 ?
                "int " + coordsToCompute[i + 1] + " = index - " + coordsToCompute[i] + " * " + stride :
                "index -= " + coordsToCompute[i] + " * " + stride;
            return line1 + "; " + line2 + ";";
        })
            .join('');
        source = "\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(" + texShape[0] + ", " + texShape[1] + "));\n         int index = resTexRC.y * " + texShape[0] + " + resTexRC.x;\n         " + coordsFromIndexSnippet + "\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Generates code for common UV coords computation utility functions.
     */
    CoordsGlslLib.prototype.getCommonUtilFuncs = function () {
        var result = {};
        var funcName = 'uvFromFlat';
        result[funcName] = new glsl_definitions_1.GlslLibRoutine("\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    ");
        funcName = 'packedUVfrom1D';
        result[funcName] = new glsl_definitions_1.GlslLibRoutine("\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      ");
        funcName = 'packedUVfrom2D';
        result[funcName] = new glsl_definitions_1.GlslLibRoutine("\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      ");
        funcName = 'packedUVfrom3D';
        result[funcName] = new glsl_definitions_1.GlslLibRoutine("\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      ");
        funcName = 'sampleTexture';
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        result[funcName] = new glsl_definitions_1.GlslLibRoutine("\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return " + glsl.texture2D + "(textureSampler, uv).r;\n        }");
        return result;
    };
    /**
     * Constructing snippets for inputs
     */
    CoordsGlslLib.prototype.getInputsSamplingSnippets = function () {
        var _this = this;
        var result = {};
        var outputLayout = this.context.outputTextureLayout;
        this.context.programInfo.inputNames.forEach(function (samplerName, i) {
            var inputLayout = _this.context.inputTextureLayouts[i];
            var funcName = utils_1.generateShaderFuncNameFromInputSamplerName(samplerName);
            if (inputLayout.isPacked) {
                result[funcName] = _this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);
            }
            else {
                result[funcName] = _this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);
            }
            var outCoordFuncName = utils_1.generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);
            if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {
                if (inputLayout.isPacked) {
                    result[outCoordFuncName] =
                        _this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);
                }
                else {
                    result[outCoordFuncName] =
                        _this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);
                }
            }
        });
        return result;
    };
    /**
     * Constructing snippets for output coordinates of samplers
     */
    CoordsGlslLib.prototype.getPackedSamplerAtOutputCoords = function (funcName, inputLayout, outputLayout, name) {
        var inShape = inputLayout.unpackedShape;
        var outShape = outputLayout.unpackedShape;
        var texName = name;
        var texFuncSnippet = utils_1.generateShaderFuncNameFromInputSamplerName(texName);
        var inRank = inShape.length;
        var outRank = outShape.length;
        var broadcastDims = util_1.BroadcastUtil.getBroadcastDims(inShape, outShape);
        var type = utils_1.getCoordsDataType(outRank);
        var rankDiff = outRank - inRank;
        var coordsSnippet;
        var fields = utils_1.getGlChannels();
        if (inRank === 0) {
            coordsSnippet = '';
        }
        else if (outRank < 2 && broadcastDims.length >= 1) {
            coordsSnippet = 'coords = 0;';
        }
        else {
            coordsSnippet = broadcastDims.map(function (d) { return "coords." + fields[d + rankDiff] + " = 0;"; }).join('\n');
        }
        var unpackedCoordsSnippet = '';
        if (outRank < 2 && inRank > 0) {
            unpackedCoordsSnippet = 'coords';
        }
        else {
            unpackedCoordsSnippet = inShape.map(function (s, i) { return "coords." + fields[i + rankDiff]; }).join(', ');
        }
        var output = 'return outputValue;';
        var inSize = util_1.ShapeUtil.size(inShape);
        var isInputScalar = inSize === 1;
        var outSize = util_1.ShapeUtil.size(outShape);
        var isOutputScalar = outSize === 1;
        if (inRank === 1 && !isInputScalar && !isOutputScalar) {
            output = "\n        return vec4(outputValue.xy, outputValue.xy);\n      ";
        }
        else if (isInputScalar && !isOutputScalar) {
            if (outRank === 1) {
                output = "\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        ";
            }
            else {
                output = "\n          return vec4(outputValue.x);\n        ";
            }
        }
        else if (broadcastDims.length) {
            var rows = inRank - 2;
            var cols = inRank - 1;
            if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {
                output = 'return vec4(outputValue.x);';
            }
            else if (broadcastDims.indexOf(rows) > -1) {
                output = 'return vec4(outputValue.x, outputValue.y, ' +
                    'outputValue.x, outputValue.y);';
            }
            else if (broadcastDims.indexOf(cols) > -1) {
                output = 'return vec4(outputValue.xx, outputValue.zz);';
            }
        }
        var swapLastDimsSnippet = "\n        int lastDim = coords." + fields[outRank - 1] + ";\n        coords." + fields[outRank - 1] + " = coords." + fields[outRank - 2] + ";\n        coords." + fields[outRank - 2] + " = lastDim;\n      ";
        var source = "\n      vec4 " + funcName + "() {\n        " + type + " coords = getOutputCoords();\n        " + swapLastDimsSnippet + "\n        " + coordsSnippet + "\n        vec4 outputValue = " + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n        " + output + "\n      }\n    ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.getOutputCoords']);
    };
    /**
     * Constructing snippets for unpacked output coordinates of samplers
     */
    CoordsGlslLib.prototype.getUnpackedSamplerAtOutputCoords = function (funcName, inputLayout, outputLayout, name) {
        var outTexShape = [outputLayout.width, outputLayout.height];
        var inTexShape = [inputLayout.width, inputLayout.height];
        var inRank = inputLayout.unpackedShape.length;
        var outRank = outputLayout.unpackedShape.length;
        var inShape = inputLayout.unpackedShape;
        var outShape = outputLayout.unpackedShape;
        var texFuncSnippet = utils_1.generateShaderFuncNameFromInputSamplerName(name);
        if (inRank === outRank && util_1.ArrayUtil.arraysEqual(inTexShape, outTexShape)) {
            var source_1 = "\n          float " + funcName + "() {\n            return sampleTexture(" + name + ", TexCoords);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_1, ['coordinates.sampleTexture']);
        }
        var type = utils_1.getCoordsDataType(outRank);
        var broadcastDims = util_1.BroadcastUtil.getBroadcastDims(inShape, outShape);
        var rankDiff = outRank - inRank;
        var coordsSnippet;
        var fields = utils_1.getGlChannels();
        if (inRank === 0) {
            coordsSnippet = '';
        }
        else if (outRank < 2 && broadcastDims.length >= 1) {
            coordsSnippet = 'coords = 0;';
        }
        else {
            coordsSnippet = broadcastDims.map(function (d) { return "coords." + fields[d + rankDiff] + " = 0;"; }).join('\n');
        }
        var unpackedCoordsSnippet = '';
        if (outRank < 2 && inRank > 0) {
            unpackedCoordsSnippet = 'coords';
        }
        else {
            unpackedCoordsSnippet = inputLayout.unpackedShape.map(function (s, i) { return "coords." + fields[i + rankDiff]; }).join(', ');
        }
        var source = "\n        float " + funcName + "() {\n          " + type + " coords = getOutputCoords();\n          " + coordsSnippet + "\n          return " + texFuncSnippet + "(" + unpackedCoordsSnippet + ");\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.getOutputCoords']);
    };
    /**
     * Constructing snippets for packed operations.
     */
    CoordsGlslLib.prototype.getPackedSamplerFromInput = function (funcName, name, inputLayout) {
        switch (inputLayout.unpackedShape.length) {
            case 0:
                return this.getPackedSamplerScalar(funcName, name);
            case 1:
                return this.getPackedSampler1D(funcName, name, inputLayout);
            case 2:
                return this.getPackedSampler2D(funcName, name, inputLayout);
            case 3:
                return this.getPackedSampler3D(funcName, name, inputLayout);
            default:
                return this.getPackedSamplerND(funcName, name, inputLayout);
        }
    };
    /**
     * Constructing snippets for unpacked operations.
     */
    CoordsGlslLib.prototype.getUnpackedSamplerFromInput = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        switch (shape.length) {
            case 0:
                return this.getUnpackedSamplerScalar(funcName, name, inputLayout);
            case 1:
                return this.getUnpackedSampler1D(funcName, name, inputLayout);
            case 2:
                return this.getUnpackedSampler2D(funcName, name, inputLayout);
            case 3:
                return this.getUnpackedSampler3D(funcName, name, inputLayout);
            case 4:
                return this.getUnpackedSampler4D(funcName, name, inputLayout);
            case 5:
                return this.getUnpackedSampler5D(funcName, name, inputLayout);
            case 6:
                return this.getUnpackedSampler6D(funcName, name, inputLayout);
            default:
                // TODO support more dimensionalities
                throw new Error("Unsupported dimension " + shape.length + "-D");
        }
    };
    /**
     * Packed scalar snippet.
     */
    CoordsGlslLib.prototype.getPackedSamplerScalar = function (funcName, name) {
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        var source = "\n          vec4 " + funcName + "() {\n            return " + glsl.texture2D + "(" + name + ", halfCR);\n          }\n        ";
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Packed 1D snippet.
     */
    CoordsGlslLib.prototype.getPackedSampler1D = function (funcName, name, inputLayout) {
        var texShape = [inputLayout.width, inputLayout.height];
        var packedTexShape = [texShape[1], texShape[0]];
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        var packedSampler = "vec4 " + funcName + "(int index) {\n      vec2 uv = packedUVfrom1D(\n      " + packedTexShape[0] + ", " + packedTexShape[1] + ", index);\n      return " + glsl.texture2D + "(" + name + ", uv);\n    }";
        var source = packedSampler;
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);
    };
    /**
     * Packed 2D snippet.
     */
    CoordsGlslLib.prototype.getPackedSampler2D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var texShape = [inputLayout.width, inputLayout.height];
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        var texNumR = texShape[0];
        var texNumC = texShape[1];
        if (texShape != null && util_1.ArrayUtil.arraysEqual(shape, texShape)) {
            var packedSampler_1 = "vec4 " + funcName + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + texNumC + ".0, " + texNumR + ".0);\n        return " + glsl.texture2D + "(" + name + ", uv);\n      }";
            return new glsl_definitions_1.GlslLibRoutine(packedSampler_1);
        }
        var packedTexShape = texShape;
        var valuesPerRow = Math.ceil(shape[1] / 2);
        var packedSampler = "vec4 " + funcName + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + packedTexShape[1] + ", " + packedTexShape[0] + ", " + valuesPerRow + ", row, col);\n      return " + glsl.texture2D + "(" + name + ", uv);\n    }";
        var source = packedSampler;
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);
    };
    /**
     * Packed 3D snippet.
     */
    CoordsGlslLib.prototype.getPackedSampler3D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var texShape = [inputLayout.width, inputLayout.height];
        var packedTexShape = [texShape[0], texShape[1]];
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        if (shape[0] === 1) {
            var squeezedShape = shape.slice(1);
            var keptDims = [1, 2];
            var newInputShape = utils_1.squeezeInputShape(shape, squeezedShape);
            var params = ['b', 'row', 'col'];
            // Deep copy of input texture layout.
            var newInputLayout = JSON.parse(JSON.stringify(inputLayout));
            newInputLayout.unpackedShape = newInputShape;
            var samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);
            var packedSampler_2 = samplerRoutine.routineBody + "\n      vec4 " + funcName + "(int b, int row, int col) {\n        return " + funcName + "(" + utils_1.getSqueezedParams(params, keptDims) + ");\n      } ";
            var source_2 = packedSampler_2;
            return new glsl_definitions_1.GlslLibRoutine(source_2, samplerRoutine.dependencies);
        }
        var texNumR = packedTexShape[0];
        var texNumC = packedTexShape[1];
        var valuesPerRow = Math.ceil(shape[2] / 2);
        var texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);
        var packedSampler = "vec4 " + funcName + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + texNumC + ", " + texNumR + ", " + texelsInBatch + ", " + valuesPerRow + ", b, row, col);\n      return " + glsl.texture2D + "(" + name + ", uv);}";
        var source = packedSampler;
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);
    };
    /*
     * Packed ND snippet.
     */
    CoordsGlslLib.prototype.getPackedSamplerND = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var rank = shape.length;
        var texShape = [inputLayout.width, inputLayout.height];
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        var packedTexShape = [texShape[0], texShape[1]];
        var texNumR = packedTexShape[1];
        var texNumC = packedTexShape[0];
        var valuesPerRow = Math.ceil(shape[rank - 1] / 2);
        var texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);
        var params = 'int b, int row, int col';
        var index = "b * " + texelsInBatch + " + (row / 2) * " + valuesPerRow + " + (col / 2)";
        for (var b = 2; b < rank - 1; b++) {
            params = "int b" + b + ", " + params;
            texelsInBatch *= shape[rank - b - 1];
            index = "b" + b + " * " + texelsInBatch + " + " + index;
        }
        var packedSampler = "vec4 " + funcName + "(" + params + ") {\n      int index = " + index + ";\n      int texR = index / " + texNumC + ";\n      int texC = index - texR * " + texNumC + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + texNumC + ", " + texNumR + ");\n      return " + glsl.texture2D + "(" + name + ", uv);\n    }";
        var source = packedSampler;
        return new glsl_definitions_1.GlslLibRoutine(source);
    };
    /**
     * Unpacked scalar snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSamplerScalar = function (funcName, name, inputLayout) {
        var _a = __read([inputLayout.width, inputLayout.height], 2), texNumR = _a[0], texNumC = _a[1];
        if (texNumR === 1 && texNumC === 1) {
            var source_3 = "\n          float " + funcName + "() {\n            return sampleTexture(" + name + ", halfCR);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_3, ['coordinates.sampleTexture']);
        }
        var source = "\n        float " + funcName + "() {\n          int offset_" + name + " = coordsToOffset(TexCoords, " + texNumR + ", " + texNumC + ");\n          vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", offset_" + name + ");\n          return sampleTexture(" + name + ", uv);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);
    };
    /**
     * Unpacked 1D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler1D = function (funcName, name, inputLayout) {
        var tNumR = inputLayout.width;
        var tNumC = inputLayout.height;
        if (tNumC === 1 && tNumR === 1) {
            var source_4 = "\n        float " + funcName + "(int index) {\n          return sampleTexture(" + name + ", halfCR);\n        }\n      ";
            return new glsl_definitions_1.GlslLibRoutine(source_4, ['coordinates.sampleTexture']);
        }
        if (tNumC === 1) {
            var source_5 = "\n          float " + funcName + "(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / " + tNumR + ".0, 0.5);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_5, ['coordinates.sampleTexture']);
        }
        if (tNumR === 1) {
            var source_6 = "\n          float " + funcName + "(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / " + tNumC + ".0);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_6, ['coordinates.sampleTexture']);
        }
        var source = "\n        float " + funcName + "(int index) {\n          vec2 uv = uvFromFlat(" + tNumR + ", " + tNumC + ", index);\n          return sampleTexture(" + name + ", uv);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);
    };
    /**
     * Unpacked 2D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler2D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        // TODO: modify row/col order for other dimensions.
        var texShape = [inputLayout.height, inputLayout.width];
        if (texShape != null && util_1.ArrayUtil.arraysEqual(shape, texShape)) {
            var texNumR_1 = texShape[1];
            var texNumC_1 = texShape[0];
            var source_7 = "\n          float " + funcName + "(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(" + texNumR_1 + ".0, " + texNumC_1 + ".0);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_7, ['coordinates.sampleTexture']);
        }
        var _a = texture_layout_strategy_1.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
        var squeezedShape = newShape;
        if (squeezedShape.length < shape.length) {
            var newInputShape = utils_1.squeezeInputShape(shape, squeezedShape);
            // Deep copy of input texture layout.
            var newInputLayout = JSON.parse(JSON.stringify(inputLayout));
            newInputLayout.unpackedShape = newInputShape;
            var params = ['col', 'row'];
            var source_8 = "\n          " + this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody + "\n          float " + funcName + "(int row, int col) {\n            return " + funcName + "(" + utils_1.getSqueezedParams(params, keptDims) + ");\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_8, ['coordinates.sampleTexture']);
        }
        var texNumR = texShape[1];
        var texNumC = texShape[0];
        if (texNumC === 1) {
            var source_9 = "\n          float " + funcName + "(int row, int col) {\n            int offset_" + name + " = coordsToOffset(TexCoords, " + texNumR + ", " + texNumC + ");\n            float index = dot(vec3(row, col, offset_" + name + "), vec3(" + shape[1] + ", 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / " + texNumR + ".0);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_9, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);
        }
        if (texNumR === 1) {
            var source_10 = "\n          float " + funcName + "(int row, int col) {\n            int offset_" + name + " = coordsToOffset(TexCoords, " + texNumR + ", " + texNumC + ");\n            float index = dot(vec3(row, col, offset_" + name + "), vec3(" + shape[1] + ", 1, 1));\n            vec2 uv = vec2((index + 0.5) / " + texNumC + ".0, 0.5);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_10, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);
        }
        var source = "\n        float " + funcName + "(int row, int col) {\n          int index = col * " + shape[1] + " + row;\n          vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n          return sampleTexture(" + name + ", uv);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);
    };
    /**
     * Unpacked 3D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler3D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var stride0 = shape[1] * shape[2];
        var stride1 = shape[2];
        var _a = texture_layout_strategy_1.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
        var squeezedShape = newShape;
        if (squeezedShape.length < shape.length) {
            var newInputShape = utils_1.squeezeInputShape(shape, squeezedShape);
            var params = ['batch', 'col', 'row'];
            // Deep copy of input texture layout.
            var newInputLayout = JSON.parse(JSON.stringify(inputLayout));
            newInputLayout.unpackedShape = newInputShape;
            var routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);
            // TODO: revisit the logic here to make it simpler
            var revDims = keptDims.reverse();
            var source_11 = "\n          " + routine.routineBody + "\n          float " + funcName + "(int batch, int row, int col) {\n            return " + funcName + "(" + utils_1.getSqueezedParams(params, revDims) + ");\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_11, routine.dependencies);
        }
        var texNumR = inputLayout.width;
        var texNumC = inputLayout.height;
        var source = "\n          float " + funcName + "(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * " + stride0 + " + col * " + stride1 + " + row;\n            vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n            return sampleTexture(" + name + ", uv);\n          }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);
    };
    /**
     * Unpacked 4D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler4D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var stride2 = shape[3];
        var stride1 = shape[2] * stride2;
        var stride0 = shape[1] * stride1;
        //
        // TODO: re-enable this shortcut once the index calculation bug is fixed.
        //
        // const {newShape, keptDims} = squeezeShape(shape as number[]);
        // if (newShape.length < shape.length) {
        //   const newInputShape = squeezeInputShape(shape, newShape);
        //   const params = ['row', 'col', 'depth', 'depth2'];
        //   // Deep copy of input texture layout.
        //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));
        //   newInputLayout.unpackedShape = newInputShape;
        //   const source = `
        //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}
        //       float ${funcName}(int row, int col, int depth, int depth2) {
        //         return ${funcName}(${getSqueezedParams(params, keptDims)});
        //       }
        //     `;
        //   return new GlslLibRoutine(
        //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);
        // }
        var texNumR = inputLayout.width;
        var texNumC = inputLayout.height;
        var source = "\n        float " + funcName + "(int row, int col, int depth, int depth2) {\n          int index = row * " + stride0 + " + col * " + stride1 + " +\n              depth2 * " + stride2 + " + depth;\n          vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n          return sampleTexture(" + name + ", uv);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);
    };
    /**
     * Unpacked 5D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler5D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var stride3 = shape[4];
        var stride2 = shape[3] * stride3;
        var stride1 = shape[2] * stride2;
        var stride0 = shape[1] * stride1;
        var _a = texture_layout_strategy_1.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
        if (newShape.length < shape.length) {
            var newInputShape = utils_1.squeezeInputShape(shape, newShape);
            var params = ['row', 'col', 'depth', 'depth2', 'depth3'];
            // Deep copy of input texture layout.
            var newInputLayout = JSON.parse(JSON.stringify(inputLayout));
            newInputLayout.unpackedShape = newInputShape;
            var source_12 = "\n          " + this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody + "\n          float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n            return " + funcName + "(" + utils_1.getSqueezedParams(params, keptDims) + ");\n          }\n        ";
            return new glsl_definitions_1.GlslLibRoutine(source_12, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);
        }
        var texNumR = inputLayout.width;
        var texNumC = inputLayout.height;
        var source = "\n        float " + funcName + "(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * " + stride0 + " + col * " + stride1 + " + depth * " + stride2 + " +\n          depth3 * " + stride3 + " + depth2;\n          vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n          return sampleTexture(" + name + ", uv);\n        }\n      ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);
    };
    /**
     * Unpacked 6D snippet.
     */
    CoordsGlslLib.prototype.getUnpackedSampler6D = function (funcName, name, inputLayout) {
        var shape = inputLayout.unpackedShape;
        var stride4 = shape[5];
        var stride3 = shape[4] * stride4;
        var stride2 = shape[3] * stride3;
        var stride1 = shape[2] * stride2;
        var stride0 = shape[1] * stride1;
        var _a = texture_layout_strategy_1.squeezeShape(shape), newShape = _a.newShape, keptDims = _a.keptDims;
        if (newShape.length < shape.length) {
            var newInputShape = utils_1.squeezeInputShape(shape, newShape);
            var params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];
            // Deep copy of input texture layout.
            var newInputLayout = JSON.parse(JSON.stringify(inputLayout));
            newInputLayout.unpackedShape = newInputShape;
            var source_13 = "\n            " + this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody + "\n            float " + funcName + "(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return " + funcName + "(" + utils_1.getSqueezedParams(params, keptDims) + ");\n            }\n          ";
            return new glsl_definitions_1.GlslLibRoutine(source_13, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);
        }
        var texNumR = inputLayout.width;
        var texNumC = inputLayout.height;
        var source = "\n          float " + funcName + "(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * " + stride0 + " + col * " + stride1 + " + depth * " + stride2 + " +\n            depth2 * " + stride3 + " + depth3 * " + stride4 + " + depth4;\n            vec2 uv = uvFromFlat(" + texNumR + ", " + texNumC + ", index);\n            return sampleTexture(" + name + ", uv);\n          }\n        ";
        return new glsl_definitions_1.GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);
    };
    /**
     * This is the main function to map from the given texture coordiantes (s,t)
     * to logical indices for the output
     * There will only be one single variation of this
     * Also see coordsToOffset and offsetToIndices for input-specific versions
     */
    CoordsGlslLib.prototype.toVec = function () {
        var output = this.context.outputTextureLayout;
        var rank = output.shape.length;
        var strides = output.strides;
        var xScale = output.width;
        var yScale = output.height;
        var stridesBlock = [];
        for (var i = 0; i < rank - 1; ++i) {
            stridesBlock.push("\n        c[" + i + "] = offset / " + strides[i] + ";");
            stridesBlock.push("\n        offset -= c[" + i + "] * " + strides[i] + ";");
        }
        stridesBlock.push("\n        c[" + (rank - 1) + "] = offset;");
        var body = "\n      void toVec(vec2 texCoords, out int c[" + rank + "]) {\n        int offset = coordsToOffset(texCoords, " + xScale + ", " + yScale + ");\n        " + stridesBlock.join('') + "\n      }\n      void toVec(int offset, out int c[" + rank + "]) {\n        " + stridesBlock.join('') + "\n      }\n    ";
        return { toVec: new glsl_definitions_1.GlslLibRoutine(body, ['coordinates.coordsToOffset']) };
    };
    /**
     * These are value getter functions generated for each input
     * Each function is hardwired to the name and dimensions of the input
     * An '_T' variation is also produced which accesses values as if the
     * input was transposed
     */
    CoordsGlslLib.prototype.valueFrom = function () {
        var _this = this;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var layout = _this.context.inputTextureLayouts[i];
            var shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;
            var rank = shape.length;
            var funcName = "_" + name;
            result[funcName] = new glsl_definitions_1.GlslLibRoutine(_this.getValueFromSingle(name, rank, layout.width, layout.height, false), ["shapeUtils.indicesToOffset" + funcName, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);
            funcName = funcName + '_T';
            result[funcName] = new glsl_definitions_1.GlslLibRoutine(_this.getValueFromSingle(name, rank, layout.width, layout.height, true), ["shapeUtils.indicesToOffset" + funcName, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);
        });
        return result;
    };
    /**
     * Produces one value getter function for the name and rank given
     * If a transpose is set proper offsetToCoords mapping will be used
     * @param name name of the function
     * @param rank rank of the input
     * @param transpose whether or not should generate a transpose variation
     */
    CoordsGlslLib.prototype.getValueFromSingle = function (varName, rank, width, height, transpose) {
        var name = "_" + varName;
        if (transpose) {
            name = name + '_T';
        }
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        return "\n        float " + name + "(int m[" + rank + "]) {\n          int offset = indicesToOffset" + name + "(m);\n          vec2 coords = offsetToCoords(offset, " + width + ", " + height + ");\n          float value = getColorAsFloat(" + glsl.texture2D + "(" + varName + ", coords));\n          return value;\n        }\n        ";
    };
    /**
     * Produces a packed value getter function for the name and rank given
     * If a transpose is set proper offsetToCoords mapping will be used
     * @param name name of the function
     * @param rank rank of the input
     * @param transpose whether or not should generate a transpose variation
     */
    CoordsGlslLib.prototype.getPackedValueFrom = function (varName, rank, width, height, transpose) {
        var name = "_" + varName + "_Pack";
        if (transpose) {
            name = name + '_T';
        }
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        return "\n        vec4 " + name + "(int m[" + rank + "]) {\n          int offset = indicesToOffset_" + varName + "(m);\n          vec2 coords = offsetToCoords(offset, " + width + ", " + height + ");\n          return " + glsl.texture2D + "(" + varName + ", coords);\n        }\n        ";
    };
    return CoordsGlslLib;
}(glsl_definitions_1.GlslLib));
exports.CoordsGlslLib = CoordsGlslLib;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-definitions.ts":
/*!*******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-definitions.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TopologicalSortGlslRoutines = exports.GlslLibRoutineNode = exports.GlslLibRoutine = exports.GlslLib = exports.GlslContext = exports.FunctionType = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
var FunctionType;
(function (FunctionType) {
    FunctionType[FunctionType["ValueBased"] = 0] = "ValueBased";
    FunctionType[FunctionType["Positional"] = 1] = "Positional";
})(FunctionType = exports.FunctionType || (exports.FunctionType = {}));
var GlslContext = /** @class */ (function () {
    function GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout) {
        this.glContext = glContext;
        this.programInfo = programInfo;
        this.inputTextureLayouts = inputTextureLayouts;
        this.outputTextureLayout = outputTextureLayout;
    }
    return GlslContext;
}());
exports.GlslContext = GlslContext;
var GlslLib = /** @class */ (function () {
    function GlslLib(context) {
        this.context = context;
    }
    return GlslLib;
}());
exports.GlslLib = GlslLib;
// abstraction to represent a GLSL library routine and it's dependencies
var GlslLibRoutine = /** @class */ (function () {
    function GlslLibRoutine(routineBody, dependencies) {
        this.routineBody = routineBody;
        this.dependencies = dependencies;
    }
    return GlslLibRoutine;
}());
exports.GlslLibRoutine = GlslLibRoutine;
// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes
// this level of abstraction is used to topologically sort routines before fragment shade inclusion
var GlslLibRoutineNode = /** @class */ (function () {
    function GlslLibRoutineNode(name, routineBody, dependencies) {
        this.name = name;
        if (dependencies) {
            this.dependencies = dependencies;
        }
        else {
            this.dependencies = [];
        }
        if (routineBody) {
            this.routineBody = routineBody;
        }
    }
    GlslLibRoutineNode.prototype.addDependency = function (node) {
        if (node) {
            this.dependencies.push(node);
        }
    };
    return GlslLibRoutineNode;
}());
exports.GlslLibRoutineNode = GlslLibRoutineNode;
// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion
var TopologicalSortGlslRoutines = /** @class */ (function () {
    function TopologicalSortGlslRoutines() {
    }
    TopologicalSortGlslRoutines.returnOrderedNodes = function (nodes) {
        if (!nodes || nodes.length === 0) {
            return [];
        }
        if (nodes.length === 1) {
            return nodes;
        }
        var cycleCheck = new Set();
        var alreadyTraversed = new Set();
        var result = new Array();
        this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);
        return result;
    };
    TopologicalSortGlslRoutines.createOrderedNodes = function (graphNodes, cycleCheck, alreadyTraversed, result) {
        for (var i = 0; i < graphNodes.length; ++i) {
            this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);
        }
    };
    TopologicalSortGlslRoutines.dfsTraverse = function (root, cycleCheck, alreadyTraversed, result) {
        // if this root has already been traversed return
        if (!root || alreadyTraversed.has(root.name)) {
            return;
        }
        // cyclic dependency has been detected
        if (cycleCheck.has(root.name)) {
            throw new Error('Cyclic dependency detected. Can\'t topologically sort routines needed for shader.');
        }
        // hold this node to detect cycles if any
        cycleCheck.add(root.name);
        // traverse children in a dfs fashion
        var dependencies = root.dependencies;
        if (dependencies && dependencies.length > 0) {
            for (var i = 0; i < dependencies.length; ++i) {
                this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);
            }
        }
        // add to result holder
        result.push(root);
        // mark this node as traversed so that we don't traverse from this again
        alreadyTraversed.add(root.name);
        // release the hold
        cycleCheck.delete(root.name);
    };
    return TopologicalSortGlslRoutines;
}());
exports.TopologicalSortGlslRoutines = TopologicalSortGlslRoutines;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EncodingGlslLib = void 0;
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
/**
 * This GLSL library handles routines converting
 * float32 to/from Unsigned byte or float 16
 */
var EncodingGlslLib = /** @class */ (function (_super) {
    __extends(EncodingGlslLib, _super);
    function EncodingGlslLib(context) {
        return _super.call(this, context) || this;
    }
    EncodingGlslLib.prototype.getFunctions = function () {
        return __assign(__assign({}, this.encodeFloat32()), this.decodeFloat32());
    };
    EncodingGlslLib.prototype.getCustomTypes = function () {
        return {};
    };
    EncodingGlslLib.prototype.encodeFloat32 = function () {
        return {
            encode: new glsl_definitions_1.GlslLibRoutine("highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        ")
        };
    };
    EncodingGlslLib.prototype.decodeFloat32 = function () {
        return {
            decode: new glsl_definitions_1.GlslLibRoutine("highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        ")
        };
    };
    /**
     * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)
     * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float
     */
    EncodingGlslLib.prototype.encodeUint8 = function () {
        var endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';
        return {
            encode: new glsl_definitions_1.GlslLibRoutine("\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        " + endianness + "\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        ")
        };
    };
    /**
     * returns the routine to encode a vec4 of unsigned bytes to float32
     * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float
     */
    EncodingGlslLib.prototype.decodeUint8 = function () {
        var endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';
        return {
            decode: new glsl_definitions_1.GlslLibRoutine("\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          " + endianness + "\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        ")
        };
    };
    /**
     * Determines if the machine is little endian or not
     * @credit: https://gist.github.com/TooTallNate/4750953
     */
    EncodingGlslLib.isLittleEndian = function () {
        var b = new ArrayBuffer(4);
        var a = new Uint32Array(b);
        var c = new Uint8Array(b);
        a[0] = 0xdeadbeef;
        if (c[0] === 0xef) {
            return true;
        }
        if (c[0] === 0xde) {
            return false;
        }
        throw new Error('unknown endianness');
    };
    return EncodingGlslLib;
}(glsl_definitions_1.GlslLib));
exports.EncodingGlslLib = EncodingGlslLib;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts":
/*!*********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FragColorGlslLib = void 0;
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
var glsl_source_1 = __webpack_require__(/*! ./glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
/**
 * This GLSL library handles routines around reading a texlet and writing to it
 * Reading and writing could be more than just dealing with one channel
 * It may require encoding/decoding to/from 4 channels into one
 */
var FragColorGlslLib = /** @class */ (function (_super) {
    __extends(FragColorGlslLib, _super);
    function FragColorGlslLib(context) {
        return _super.call(this, context) || this;
    }
    FragColorGlslLib.prototype.getFunctions = function () {
        return __assign(__assign({}, this.setFragColor()), this.getColorAsFloat());
    };
    FragColorGlslLib.prototype.getCustomTypes = function () {
        return {};
    };
    FragColorGlslLib.prototype.setFragColor = function () {
        var glsl = glsl_source_1.getGlsl(this.context.glContext.version);
        return {
            setFragColor: new glsl_definitions_1.GlslLibRoutine("\n        void setFragColor(float value) {\n            " + glsl.output + " = encode(value);\n        }\n        ", ['encoding.encode'])
        };
    };
    FragColorGlslLib.prototype.getColorAsFloat = function () {
        return {
            getColorAsFloat: new glsl_definitions_1.GlslLibRoutine("\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        ", ['encoding.decode'])
        };
    };
    return FragColorGlslLib;
}(glsl_definitions_1.GlslLib));
exports.FragColorGlslLib = FragColorGlslLib;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-function-inliner.ts":
/*!************************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-function-inliner.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.replaceInlines = void 0;
var INLINE_FUNC_DEF_REGEX = /@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm;
var FUNC_CALL_REGEX = '(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;';
/**
 * GLSL preprocessor responsible for resolving @inline directives
 */
function replaceInlines(script) {
    var inlineDefs = {};
    var match;
    while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {
        var params = match[3]
            .split(',')
            .map(function (s) {
            var tokens = s.trim().split(' ');
            if (tokens && tokens.length === 2) {
                return { type: tokens[0], name: tokens[1] };
            }
            return null;
        })
            .filter(function (v) { return v !== null; });
        inlineDefs[match[2]] = { params: params, body: match[4] };
    }
    for (var name_1 in inlineDefs) {
        var regexString = FUNC_CALL_REGEX.replace('__FUNC__', name_1);
        var regex = new RegExp(regexString, 'gm');
        var _loop_1 = function () {
            var type = match[1];
            var variable = match[2];
            var params = match[3].split(',');
            var declLine = (type) ? type + " " + variable + ";" : '';
            var newBody = inlineDefs[name_1].body;
            var paramRedecLine = '';
            inlineDefs[name_1].params.forEach(function (v, i) {
                if (v) {
                    paramRedecLine += v.type + " " + v.name + " = " + params[i] + ";\n";
                }
            });
            newBody = paramRedecLine + "\n " + newBody;
            newBody = newBody.replace('return', variable + " = ");
            var replacement = "\n      " + declLine + "\n      {\n        " + newBody + "\n      }\n      ";
            script = script.replace(match[0], replacement);
        };
        while ((match = regex.exec(script)) !== null) {
            _loop_1();
        }
    }
    script = script.replace(INLINE_FUNC_DEF_REGEX, '');
    return script;
}
exports.replaceInlines = replaceInlines;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-preprocessor.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-preprocessor.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GlslPreprocessor = void 0;
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
var glsl_function_inliner_1 = __webpack_require__(/*! ./glsl-function-inliner */ "./lib/onnxjs/backends/webgl/glsl-function-inliner.ts");
var glsl_registered_libs_1 = __webpack_require__(/*! ./glsl-registered-libs */ "./lib/onnxjs/backends/webgl/glsl-registered-libs.ts");
var glsl_source_1 = __webpack_require__(/*! ./glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
/**
 * Preprocessor for the additions to the GLSL language
 * It deals with:
 *  @include directives
 *  @inline
 *  Loop unrolling (not implemented)
 *  Macro resolution (not implemented)
 */
var GlslPreprocessor = /** @class */ (function () {
    function GlslPreprocessor(glContext, programInfo, inputTextureLayouts, outputTextureLayout) {
        var _this = this;
        this.libs = {};
        this.glslLibRoutineDependencyGraph = {};
        this.context = new glsl_definitions_1.GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);
        // construct GlslLibs
        Object.keys(glsl_registered_libs_1.glslRegistry).forEach(function (name) {
            var lib = new glsl_registered_libs_1.glslRegistry[name](_this.context);
            _this.libs[name] = lib;
        });
        // construct GlslRoutineDependencyGraph
        var map = this.glslLibRoutineDependencyGraph;
        for (var libName in this.libs) {
            var lib = this.libs[libName];
            var routinesInLib = lib.getFunctions();
            for (var routine in routinesInLib) {
                var key = libName + '.' + routine;
                var currentNode = void 0;
                if (map[key]) {
                    currentNode = map[key];
                    currentNode.routineBody = routinesInLib[routine].routineBody;
                }
                else {
                    currentNode = new glsl_definitions_1.GlslLibRoutineNode(key, routinesInLib[routine].routineBody);
                    map[key] = currentNode;
                }
                var dependencies = routinesInLib[routine].dependencies;
                if (dependencies) {
                    for (var i = 0; i < dependencies.length; ++i) {
                        if (!map[dependencies[i]]) {
                            var node = new glsl_definitions_1.GlslLibRoutineNode(dependencies[i]);
                            map[dependencies[i]] = node;
                            currentNode.addDependency(node);
                        }
                        else {
                            currentNode.addDependency(map[dependencies[i]]);
                        }
                    }
                }
            }
        }
    }
    GlslPreprocessor.prototype.preprocess = function () {
        var programInfo = this.context.programInfo;
        var source = programInfo.shaderSource;
        // append main() function
        if (!this.context.programInfo.hasMain) {
            source = source + "\n      " + glsl_source_1.getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length);
        }
        // replace inlines
        source = glsl_function_inliner_1.replaceInlines(source);
        // concat final source string
        return glsl_source_1.getFragShaderPreamble(this.context.glContext.version) + "\n    " + this.getUniforms(programInfo.inputNames, programInfo.variables) + "\n    " + this.getImports(source) + "\n    " + source;
    };
    GlslPreprocessor.prototype.getImports = function (script) {
        var routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);
        if (routinesIncluded.length === 0) {
            return '';
        }
        var routines = '';
        for (var i = 0; i < routinesIncluded.length; ++i) {
            if (routinesIncluded[i].routineBody) {
                routines += routinesIncluded[i].routineBody + '\n';
            }
            else {
                throw new Error("Missing body for the Glsl Library routine: " + routinesIncluded[i].name);
            }
        }
        return routines;
    };
    GlslPreprocessor.prototype.selectGlslLibRoutinesToBeIncluded = function (script) {
        var _this = this;
        var nodes = [];
        Object.keys(this.glslLibRoutineDependencyGraph).forEach(function (classAndRoutine) {
            var routine = classAndRoutine.split('.')[1];
            if (script.indexOf(routine) !== -1) {
                nodes.push(_this.glslLibRoutineDependencyGraph[classAndRoutine]);
            }
        });
        return glsl_definitions_1.TopologicalSortGlslRoutines.returnOrderedNodes(nodes);
    };
    GlslPreprocessor.prototype.getUniforms = function (samplers, variables) {
        var e_1, _a, e_2, _b;
        var uniformLines = [];
        if (samplers) {
            try {
                for (var samplers_1 = __values(samplers), samplers_1_1 = samplers_1.next(); !samplers_1_1.done; samplers_1_1 = samplers_1.next()) {
                    var sampler = samplers_1_1.value;
                    uniformLines.push("uniform sampler2D " + sampler + ";");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (samplers_1_1 && !samplers_1_1.done && (_a = samplers_1.return)) _a.call(samplers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (variables) {
            try {
                for (var variables_1 = __values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var variable = variables_1_1.value;
                    uniformLines.push("uniform " + variable.type + " " + variable.name + (variable.arrayLength ? "[" + variable.arrayLength + "]" : '') + ";");
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return uniformLines.join('\n');
    };
    return GlslPreprocessor;
}());
exports.GlslPreprocessor = GlslPreprocessor;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-registered-libs.ts":
/*!***********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-registered-libs.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.glslRegistry = void 0;
var glsl_coordinate_lib_1 = __webpack_require__(/*! ./glsl-coordinate-lib */ "./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts");
var glsl_encoding_lib_1 = __webpack_require__(/*! ./glsl-encoding-lib */ "./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts");
var glsl_fragcolor_lib_1 = __webpack_require__(/*! ./glsl-fragcolor-lib */ "./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts");
var glsl_shape_utils_lib_1 = __webpack_require__(/*! ./glsl-shape-utils-lib */ "./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts");
var glsl_vec_lib_1 = __webpack_require__(/*! ./glsl-vec-lib */ "./lib/onnxjs/backends/webgl/glsl-vec-lib.ts");
exports.glslRegistry = {
    'encoding': glsl_encoding_lib_1.EncodingGlslLib,
    'fragcolor': glsl_fragcolor_lib_1.FragColorGlslLib,
    'vec': glsl_vec_lib_1.VecGlslLib,
    'shapeUtils': glsl_shape_utils_lib_1.ShapeUtilsGlslLib,
    'coordinates': glsl_coordinate_lib_1.CoordsGlslLib,
    //  'arrays': ArrayGlslSLib
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts":
/*!***********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShapeUtilsGlslLib = void 0;
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
/**
 * GLSL Library responsible for data types and routines for manipulating
 * coordinates and mapping to/from tensor indices
 */
var ShapeUtilsGlslLib = /** @class */ (function (_super) {
    __extends(ShapeUtilsGlslLib, _super);
    function ShapeUtilsGlslLib(context) {
        return _super.call(this, context) || this;
    }
    ShapeUtilsGlslLib.prototype.getFunctions = function () {
        return __assign(__assign(__assign(__assign(__assign({}, this.bcastIndex()), this.bcastMatmulIndex()), this.offsetToIndices()), this.indicesToOffset()), this.incrementIndices());
    };
    ShapeUtilsGlslLib.prototype.getCustomTypes = function () {
        return {};
    };
    ShapeUtilsGlslLib.prototype.bcastIndex = function () {
        var _this = this;
        var outputRank = this.context.outputTextureLayout.shape.length;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var shape = _this.context.inputTextureLayouts[i].unpackedShape;
            if (shape.length <= outputRank) {
                var rank = shape.length;
                var dimOffset = outputRank - rank;
                var funcName = "bcastIndices_" + name;
                var block = '';
                for (var i_1 = 0; i_1 < rank; ++i_1) {
                    block += "\n          realIndices[" + i_1 + "] = int( mod(float(bcastedIndices[" + (dimOffset + i_1) + "]), " + shape[i_1] + ".0) );\n          ";
                }
                var body = "\n        void " + funcName + " (int bcastedIndices[" + outputRank + "], out int realIndices[" + rank + "]) {\n          " + block + "\n        }\n        ";
                result[funcName] = new glsl_definitions_1.GlslLibRoutine(body);
            }
        });
        return result;
    };
    ShapeUtilsGlslLib.prototype.bcastMatmulIndex = function () {
        var _this = this;
        var outputRank = this.context.outputTextureLayout.shape.length;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var shape = _this.context.inputTextureLayouts[i].shape;
            if (!(shape.length < 2 || shape.length > outputRank)) {
                var rank = shape.length;
                var dimOffset = outputRank - rank;
                var funcName = "bcastMatmulIndices_" + name;
                var block = '';
                for (var i_2 = 0; i_2 < rank - 2; ++i_2) {
                    block += "\n          realIndices[" + i_2 + "] = int( mod(float(bcastedIndices[" + (dimOffset + i_2) + "]), " + shape[i_2] + ".0) );\n          ";
                }
                var body = "\n        void " + funcName + "(int bcastedIndices[" + outputRank + "], out int realIndices[" + rank + "]) {\n          " + block + "\n          realIndices[" + (rank - 1) + "] = bcastedIndices[" + (outputRank - 1) + "];\n          realIndices[" + (rank - 2) + "] = bcastedIndices[" + (outputRank - 2) + "];\n        }\n        ";
                result[funcName] = new glsl_definitions_1.GlslLibRoutine(body);
            }
        });
        return result;
    };
    ShapeUtilsGlslLib.prototype.indicesToOffset = function () {
        var _this = this;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var shape = _this.context.inputTextureLayouts[i].shape;
            var strides = _this.context.inputTextureLayouts[i].strides;
            var rank = shape.length;
            var funcName = "indicesToOffset_" + name;
            result[funcName] = new glsl_definitions_1.GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));
            funcName = "indicesToOffset_" + name + "_T";
            result[funcName] =
                new glsl_definitions_1.GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));
        });
        return result;
    };
    ShapeUtilsGlslLib.indexToOffsetSingle = function (name, rank, strides) {
        var block = '';
        for (var i = rank - 1; i >= 0; --i) {
            block += "\n        offset += indices[" + i + "] * " + strides[i] + ";\n        ";
        }
        return "\n      int " + name + "(int indices[" + rank + "]) {\n        int offset = 0;\n        " + block + "\n        return offset;\n      }\n      ";
    };
    ShapeUtilsGlslLib.prototype.offsetToIndices = function () {
        var _this = this;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var shape = _this.context.inputTextureLayouts[i].shape;
            var strides = _this.context.inputTextureLayouts[i].strides;
            var rank = shape.length;
            var funcName = "offsetToIndices_" + name;
            result[funcName] = new glsl_definitions_1.GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));
            funcName = "offsetToIndices_" + name + "_T";
            result[funcName] =
                new glsl_definitions_1.GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));
        });
        return result;
    };
    ShapeUtilsGlslLib.offsetToIndicesSingle = function (name, rank, strides) {
        var stridesBlock = [];
        for (var i = 0; i < rank - 1; ++i) {
            stridesBlock.push("\n      indices[" + i + "] = offset / " + strides[i] + ";");
            stridesBlock.push("\n        offset -= indices[" + i + "] * " + strides[i] + ";");
        }
        stridesBlock.push("\n      indices[" + (rank - 1) + "] = offset;");
        return "\n      void " + name + "(int offset, out int indices[" + rank + "]) {\n        " + stridesBlock.join('') + "\n      }\n      ";
    };
    ShapeUtilsGlslLib.prototype.incrementIndices = function () {
        var _this = this;
        var result = {};
        this.context.programInfo.inputNames.forEach(function (name, i) {
            var shape = _this.context.inputTextureLayouts[i].shape;
            var rank = shape.length;
            var funcName = "incrementIndices_" + name;
            var shapeInit = '';
            for (var i_3 = 0; i_3 < rank; ++i_3) {
                shapeInit += "\n        shape[" + i_3 + "] = " + shape[i_3] + ";";
            }
            var body = "\n        void " + funcName + "(int axis, out int indices[" + rank + "]) {\n          int shape[" + rank + "];\n          " + shapeInit + ";\n          for(int i = " + rank + " -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        ";
            result[funcName] = new glsl_definitions_1.GlslLibRoutine(body);
        });
        return result;
    };
    return ShapeUtilsGlslLib;
}(glsl_definitions_1.GlslLib));
exports.ShapeUtilsGlslLib = ShapeUtilsGlslLib;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-source.ts":
/*!**************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-source.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultFragShaderMain = exports.getFragShaderPreamble = exports.getVertexShaderSource = exports.getGlsl = void 0;
var GLSL_ES_2_0 = {
    version: '',
    attribute: 'attribute',
    varyingVertex: 'varying',
    varyingFrag: 'varying',
    texture2D: 'texture2D',
    output: 'gl_FragColor',
    outputDeclaration: '',
};
var GLSL_ES_3_0 = {
    version: '#version 300 es',
    attribute: 'in',
    varyingVertex: 'out',
    varyingFrag: 'in',
    texture2D: 'texture',
    output: 'outputColor',
    outputDeclaration: 'out vec4 outputColor;',
};
function getGlsl(version) {
    return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;
}
exports.getGlsl = getGlsl;
function getVertexShaderSource(version) {
    var glsl = getGlsl(version);
    return glsl.version + "\n      precision highp float;\n      " + glsl.attribute + " vec3 position;\n      " + glsl.attribute + " vec2 textureCoord;\n\n      " + glsl.varyingVertex + " vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }";
}
exports.getVertexShaderSource = getVertexShaderSource;
function getFragShaderPreamble(version) {
    var glsl = getGlsl(version);
    return glsl.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + glsl.varyingFrag + " vec2 TexCoords;\n    " + glsl.outputDeclaration + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    ";
}
exports.getFragShaderPreamble = getFragShaderPreamble;
function getDefaultFragShaderMain(version, outputShapeLength) {
    var glsl = getGlsl(version);
    return "\n  void main() {\n    int indices[" + outputShapeLength + "];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    " + glsl.output + " = result;\n  }\n  ";
}
exports.getDefaultFragShaderMain = getDefaultFragShaderMain;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/glsl-vec-lib.ts":
/*!***************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/glsl-vec-lib.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VecGlslLib = void 0;
var glsl_definitions_1 = __webpack_require__(/*! ./glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
/**
 * GLSL Library responsible for vec routines
 * Vec is an varible length int array. The length is fixed at the time of
 * generating the library functions from the dimensions of the output.
 */
var VecGlslLib = /** @class */ (function (_super) {
    __extends(VecGlslLib, _super);
    function VecGlslLib(context) {
        return _super.call(this, context) || this;
    }
    VecGlslLib.prototype.getCustomTypes = function () {
        return {};
    };
    VecGlslLib.prototype.getFunctions = function () {
        return __assign(__assign(__assign(__assign({}, this.binaryVecFunctions()), this.copyVec()), this.setVecItem()), this.getVecItem());
    };
    VecGlslLib.prototype.binaryVecFunctions = function () {
        var outputLayout = this.context.outputTextureLayout;
        var rank = outputLayout.shape.length;
        var nameOp = { add: '+=', sub: '-=', mul: '*=', div: '/=' };
        var result = {};
        for (var name_1 in nameOp) {
            var fname = name_1 + "Vec";
            var assignmentBlock = '';
            for (var i = 0; i < rank; ++i) {
                assignmentBlock += "\n          dest[" + i + "] " + nameOp[name_1] + " src[" + i + "];\n          ";
            }
            var body = "\n        void " + fname + "(int src[" + rank + "], out int dest[" + rank + "]) {\n          " + assignmentBlock + "\n        }\n        ";
            result[fname] = new glsl_definitions_1.GlslLibRoutine(body);
        }
        return result;
    };
    VecGlslLib.prototype.copyVec = function () {
        var outputLayout = this.context.outputTextureLayout;
        var rank = outputLayout.shape.length;
        var assignmentBlock = '';
        for (var i = 0; i < rank; ++i) {
            assignmentBlock += "\n        dest[" + i + "] = src[" + i + "];\n        ";
        }
        var body = "\n      void copyVec(int src[" + rank + "], out int dest[" + rank + "]) {\n        " + assignmentBlock + "\n      }\n      ";
        return { copyVec: new glsl_definitions_1.GlslLibRoutine(body) };
    };
    VecGlslLib.prototype.setVecItem = function () {
        var outputLayout = this.context.outputTextureLayout;
        var rank = outputLayout.shape.length;
        var block = "\n        if(index < 0)\n            index =" + rank + " + index;\n        if (index == 0)\n            m[0] = value;\n        ";
        for (var i = 1; i < rank - 1; ++i) {
            block += "\n        else if (index == " + i + ")\n            m[" + i + "] = value;\n            ";
        }
        block += "\n        else\n            m[" + (rank - 1) + "] = value;\n        ";
        var body = "\n      void setVecItem(out int m[" + rank + "], int index, int value) {\n        " + block + "\n      }\n        ";
        return { setVecItem: new glsl_definitions_1.GlslLibRoutine(body) };
    };
    VecGlslLib.prototype.getVecItem = function () {
        var outputLayout = this.context.outputTextureLayout;
        var rank = outputLayout.shape.length;
        var block = "\n        if(index < 0)\n            index = " + rank + " + index;\n        if (index == 0)\n            return m[0];\n      ";
        for (var i = 1; i < rank - 1; ++i) {
            block += "\n        else if (index == " + i + ")\n            return m[" + i + "];\n      ";
        }
        block += "\n        else\n            return m[" + (rank - 1) + "];\n        ";
        var body = "\n      int getVecItem(int m[" + rank + "], int index) {\n        " + block + "\n      }\n    ";
        return { getVecItem: new glsl_definitions_1.GlslLibRoutine(body) };
    };
    return VecGlslLib;
}(glsl_definitions_1.GlslLib));
exports.VecGlslLib = VecGlslLib;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/inference-handler.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/inference-handler.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLInferenceHandler = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
var tensor_1 = __webpack_require__(/*! ../../tensor */ "./lib/onnxjs/tensor.ts");
var util_1 = __webpack_require__(/*! ../../util */ "./lib/onnxjs/util.ts");
var pack_1 = __webpack_require__(/*! ./ops/pack */ "./lib/onnxjs/backends/webgl/ops/pack.ts");
var reshape_packed_1 = __webpack_require__(/*! ./ops/reshape-packed */ "./lib/onnxjs/backends/webgl/ops/reshape-packed.ts");
var uint8_encode_1 = __webpack_require__(/*! ./ops/uint8-encode */ "./lib/onnxjs/backends/webgl/ops/uint8-encode.ts");
var unpack_1 = __webpack_require__(/*! ./ops/unpack */ "./lib/onnxjs/backends/webgl/ops/unpack.ts");
var texture_layout_1 = __webpack_require__(/*! ./texture-layout */ "./lib/onnxjs/backends/webgl/texture-layout.ts");
var types_1 = __webpack_require__(/*! ./types */ "./lib/onnxjs/backends/webgl/types.ts");
var getProgramInfoUniqueKey = function (programInfo, inputTextureDatas) {
    var inputs = inputTextureDatas.map(function (texture) { return texture.unpackedShape.join(',') + ";" + texture.width + "x" + texture.height; })
        .join('_');
    var key = programInfo.name;
    if (programInfo.cacheHint) {
        key += '[' + programInfo.cacheHint + ']';
    }
    key += ':' + inputs;
    return key;
};
var WebGLInferenceHandler = /** @class */ (function () {
    function WebGLInferenceHandler(session) {
        this.session = session;
        this.packedTextureDataCache = new Map();
        this.unpackedTextureDataCache = new Map();
    }
    /**
     * @returns [width, height]
     */
    WebGLInferenceHandler.prototype.calculateTextureWidthAndHeight = function (shape, textureType) {
        return texture_layout_1.calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);
    };
    WebGLInferenceHandler.prototype.executeProgram = function (program, inputs) {
        if (inputs.length < program.inputNames.length) {
            throw new Error("Input size mustn't be less than " + program.inputNames.length + ".");
        }
        if (program.inputNames.length !== program.inputTypes.length) {
            throw new Error('input names size does not match input types');
        }
        // create texture info for input
        var inputTextureDatas = [];
        for (var i = 0; i < program.inputNames.length; ++i) {
            inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);
        }
        var key = getProgramInfoUniqueKey(program, inputTextureDatas);
        var artifact = this.session.programManager.getArtifact(key);
        var programInfo = artifact ?
            artifact.programInfo :
            (typeof program.get === 'function' ? program.get() :
                program);
        // create texture info for output
        var outputTextureLayout = texture_layout_1.createTextureLayoutFromTextureType(this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);
        var outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);
        if (!artifact) {
            artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);
            this.session.programManager.setArtifact(key, artifact);
        }
        this.runProgram(artifact, inputTextureDatas, outputTextureData);
        return outputTextureData;
    };
    WebGLInferenceHandler.prototype.run = function (program, inputs) {
        var outputTextureData = this.executeProgram(program, inputs);
        return outputTextureData.tensor;
    };
    WebGLInferenceHandler.prototype.runProgram = function (artifact, inputs, output) {
        // input should match
        for (var i = 0; i < inputs.length; ++i) {
            if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === types_1.TextureType.packed)) {
                throw new Error("input[" + i + "] property packed inconsistent");
            }
        }
        // output should match
        if (!!output.isPacked !== (artifact.programInfo.output.textureType === types_1.TextureType.packed)) {
            throw new Error('output property packed inconsistent');
        }
        this.session.programManager.run(artifact, inputs, output);
    };
    /**
     * Create a TextureData object from a tensor.
     * Usage = Encoder.Usage.UploadOnly.
     * If a related texture data is found in cache, returns it;
     * Otherwise:
     *   Creates a new texture layout if not provided;
     *   Creates WebGLTexture with the layout;
     *   Upload tensor data to the texture;
     *   Creates a texture data object associated with the given tensor.
     * @param tensor the tensor with data to upload
     */
    WebGLInferenceHandler.prototype.getOrCreateTextureData = function (tensor, textureType) {
        var td = this.getTextureData(tensor.dataId, textureType === types_1.TextureType.packed);
        if (!td) {
            // check if we have texture data in different type
            td = this.getTextureData(tensor.dataId, textureType !== types_1.TextureType.packed);
            if (td) {
                if (textureType === types_1.TextureType.packed) {
                    return this.pack(td);
                }
                else {
                    return this.unpack(td);
                }
            }
        }
        if (!td) {
            var layout = texture_layout_1.createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);
            if (textureType === types_1.TextureType.packedLastDimension) {
                var group = 1;
                var channels = 4;
                var shape = tensor.dims;
                if (shape.length === 4) {
                    // pre-processing for kernel data of Conv.
                    //
                    // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:
                    // 1. implement texture based const-folding
                    // 2. create a WebGL program "preprocessConvWeight" to do the same work as below
                    // 3. run the program before dotProduct.
                    //
                    var adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];
                    var adjustedLayout = texture_layout_1.createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);
                    var buffer = tensor.numberData;
                    if (shape[1] * shape[2] * shape[3] % channels !== 0) {
                        var numFeatureMaps = shape[0];
                        var oldRowSize = shape[1] * shape[2] * shape[3];
                        var newRowSize = Math.ceil(oldRowSize * group / channels) * channels;
                        var newSize = numFeatureMaps * newRowSize;
                        buffer = new Float32Array(newSize);
                        for (var f = 0; f < numFeatureMaps; ++f) {
                            var oldOffset = f * oldRowSize;
                            var newOffset = f * newRowSize + f % group * oldRowSize;
                            buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);
                        }
                    }
                    return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, 1 /* UploadOnly */);
                }
            }
            if (textureType === types_1.TextureType.packed) {
                var unpackedTextureLayout = texture_layout_1.createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], { reverseWH: true });
                var unpackedTextureData = this.createTextureData(unpackedTextureLayout, tensor.type, tensor.numberData, tensor, 1 /* UploadOnly */);
                td = this.pack(unpackedTextureData);
            }
            else {
                td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, 1 /* UploadOnly */);
            }
        }
        return td;
    };
    /**
     * Create a TextureData object using the given data and bind to the given tensor.
     * Usage = Encoder.Usage.UploadOnly.
     * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv
     * implementation by Graph.Transformer
     * @param dataType the tensor data type
     * @param data the actual data to upload
     * @param tensor the tensor to bind. tensor's data is ignored.
     */
    WebGLInferenceHandler.prototype.createTextureDataFromLayoutBindTensor = function (layout, dataType, data, tensor) {
        return this.createTextureData(layout, dataType, data, tensor, 1 /* UploadOnly */);
    };
    WebGLInferenceHandler.prototype.createTextureData = function (layout, dataType, data, tensor, usage) {
        instrument_1.Logger.verbose('InferenceHandler', "Creating TextureData: layout:[" + JSON.stringify(layout) + "]");
        var texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);
        return this.createTextureDataFromTexture(layout, dataType, texture, tensor);
    };
    WebGLInferenceHandler.prototype.reshapeUnpacked = function (input, reshapedDims) {
        var inputTD = this.getOrCreateTextureData(input, types_1.TextureType.unpacked);
        var newTextureLayout = {
            channels: inputTD.channels,
            height: inputTD.height,
            width: inputTD.width,
            // handle reshaping into scalar Tensors
            shape: reshapedDims.length !== 0 ? reshapedDims : [1],
            strides: util_1.ShapeUtil.computeStrides(reshapedDims),
            unpackedShape: reshapedDims,
        };
        var newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);
        return newTextureData.tensor;
    };
    WebGLInferenceHandler.prototype.reshapePacked = function (input, reshapedDims) {
        var inputTD = this.getOrCreateTextureData(input, types_1.TextureType.packed);
        // check if the reshape is 'cheap'
        if (reshape_packed_1.isReshapeCheap(input.dims, reshapedDims)) {
            var newTextureLayout = {
                channels: inputTD.channels,
                height: inputTD.height,
                width: inputTD.width,
                // handle reshaping into scalar Tensors
                shape: reshapedDims.length !== 0 ? reshapedDims : [1],
                strides: util_1.ShapeUtil.computeStrides(reshapedDims),
                unpackedShape: reshapedDims,
                isPacked: true
            };
            var newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);
            return newTextureData.tensor;
        }
        var squeezedInputShape = reshape_packed_1.processDims3D(input.dims);
        var squeezedOutputShape = reshape_packed_1.processDims3D(reshapedDims);
        var squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);
        var squeezedOutputTensor = this.run(reshape_packed_1.createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);
        var outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);
        return outputTensor;
    };
    WebGLInferenceHandler.prototype.createTextureDataFromTexture = function (layout, dataType, texture, tensor, tensorId) {
        var _this = this;
        var textureData = __assign(__assign({}, layout), { tensor: tensor ||
                new tensor_1.Tensor(layout.unpackedShape, dataType, function (_id) { return _this.readTexture(textureData); }, function (_id) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    return [2 /*return*/, this.readTextureAsync(textureData)];
                }); }); }, undefined, tensorId), texture: texture });
        this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);
        return textureData;
    };
    WebGLInferenceHandler.prototype.getTextureData = function (tensorId, isPacked) {
        if (isPacked === void 0) { isPacked = false; }
        return this.session.isInitializer(tensorId) ?
            this.session.getTextureData(tensorId, isPacked) :
            isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);
    };
    WebGLInferenceHandler.prototype.setTextureData = function (tensorId, td, isPacked) {
        if (isPacked === void 0) { isPacked = false; }
        if (this.session.isInitializer(tensorId)) {
            this.session.setTextureData(tensorId, td, isPacked);
        }
        else {
            (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);
        }
    };
    WebGLInferenceHandler.prototype.isTextureLayoutCached = function (tensor, isPacked) {
        if (isPacked === void 0) { isPacked = false; }
        return !!this.getTextureData(tensor.dataId, isPacked);
    };
    WebGLInferenceHandler.prototype.dispose = function () {
        var _this = this;
        this.session.textureManager.clearActiveTextures();
        this.packedTextureDataCache.forEach(function (td) { return _this.session.textureManager.releaseTexture(td); });
        this.packedTextureDataCache = new Map();
        this.unpackedTextureDataCache.forEach(function (td) { return _this.session.textureManager.releaseTexture(td); });
        this.unpackedTextureDataCache = new Map();
    };
    WebGLInferenceHandler.prototype.readTexture = function (textureData) {
        if (textureData.isPacked) {
            return this.readTexture(this.unpack(textureData));
        }
        if (!this.session.backend.glContext.isFloat32DownloadSupported) {
            return this.session.textureManager.readUint8TextureAsFloat(uint8_encode_1.encodeAsUint8(this, textureData));
        }
        return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);
    };
    WebGLInferenceHandler.prototype.readTextureAsync = function (textureData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (textureData.isPacked) {
                    return [2 /*return*/, this.readTextureAsync(this.unpack(textureData))];
                }
                if (!this.session.backend.glContext.isFloat32DownloadSupported) {
                    return [2 /*return*/, this.session.textureManager.readUint8TextureAsFloat(uint8_encode_1.encodeAsUint8(this, textureData))];
                }
                return [2 /*return*/, this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels)];
            });
        });
    };
    WebGLInferenceHandler.prototype.pack = function (input) {
        var outputTextureData = this.executeProgram(pack_1.createPackProgramInfoLoader(this, input.tensor), [input.tensor]);
        return outputTextureData;
    };
    WebGLInferenceHandler.prototype.unpack = function (input) {
        var outputTextureData = this.executeProgram(unpack_1.createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);
        return outputTextureData;
    };
    return WebGLInferenceHandler;
}());
exports.WebGLInferenceHandler = WebGLInferenceHandler;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/op-resolve-rules.ts":
/*!*******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/op-resolve-rules.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WEBGL_OP_RESOLVE_RULES = void 0;
var batch_normalization_1 = __webpack_require__(/*! ./ops/batch-normalization */ "./lib/onnxjs/backends/webgl/ops/batch-normalization.ts");
var binaryOps = __importStar(__webpack_require__(/*! ./ops/binary-op */ "./lib/onnxjs/backends/webgl/ops/binary-op.ts"));
var concat_1 = __webpack_require__(/*! ./ops/concat */ "./lib/onnxjs/backends/webgl/ops/concat.ts");
var conv_1 = __webpack_require__(/*! ./ops/conv */ "./lib/onnxjs/backends/webgl/ops/conv.ts");
var depth_to_space_1 = __webpack_require__(/*! ./ops/depth-to-space */ "./lib/onnxjs/backends/webgl/ops/depth-to-space.ts");
var flatten_1 = __webpack_require__(/*! ./ops/flatten */ "./lib/onnxjs/backends/webgl/ops/flatten.ts");
var gather_1 = __webpack_require__(/*! ./ops/gather */ "./lib/onnxjs/backends/webgl/ops/gather.ts");
var gemm_1 = __webpack_require__(/*! ./ops/gemm */ "./lib/onnxjs/backends/webgl/ops/gemm.ts");
var image_scaler_1 = __webpack_require__(/*! ./ops/image-scaler */ "./lib/onnxjs/backends/webgl/ops/image-scaler.ts");
var instance_normalization_1 = __webpack_require__(/*! ./ops/instance-normalization */ "./lib/onnxjs/backends/webgl/ops/instance-normalization.ts");
var matmul_1 = __webpack_require__(/*! ./ops/matmul */ "./lib/onnxjs/backends/webgl/ops/matmul.ts");
var pad_1 = __webpack_require__(/*! ./ops/pad */ "./lib/onnxjs/backends/webgl/ops/pad.ts");
var pool_1 = __webpack_require__(/*! ./ops/pool */ "./lib/onnxjs/backends/webgl/ops/pool.ts");
var pool_2 = __webpack_require__(/*! ./ops/pool */ "./lib/onnxjs/backends/webgl/ops/pool.ts");
var pool_3 = __webpack_require__(/*! ./ops/pool */ "./lib/onnxjs/backends/webgl/ops/pool.ts");
var pool_4 = __webpack_require__(/*! ./ops/pool */ "./lib/onnxjs/backends/webgl/ops/pool.ts");
var reduce_1 = __webpack_require__(/*! ./ops/reduce */ "./lib/onnxjs/backends/webgl/ops/reduce.ts");
var reduce_2 = __webpack_require__(/*! ./ops/reduce */ "./lib/onnxjs/backends/webgl/ops/reduce.ts");
var reshape_1 = __webpack_require__(/*! ./ops/reshape */ "./lib/onnxjs/backends/webgl/ops/reshape.ts");
var resize_packed_1 = __webpack_require__(/*! ./ops/resize-packed */ "./lib/onnxjs/backends/webgl/ops/resize-packed.ts");
var shape_1 = __webpack_require__(/*! ./ops/shape */ "./lib/onnxjs/backends/webgl/ops/shape.ts");
var slice_1 = __webpack_require__(/*! ./ops/slice */ "./lib/onnxjs/backends/webgl/ops/slice.ts");
var softmax_1 = __webpack_require__(/*! ./ops/softmax */ "./lib/onnxjs/backends/webgl/ops/softmax.ts");
var split_1 = __webpack_require__(/*! ./ops/split */ "./lib/onnxjs/backends/webgl/ops/split.ts");
var squeeze_1 = __webpack_require__(/*! ./ops/squeeze */ "./lib/onnxjs/backends/webgl/ops/squeeze.ts");
var sum_1 = __webpack_require__(/*! ./ops/sum */ "./lib/onnxjs/backends/webgl/ops/sum.ts");
var tile_1 = __webpack_require__(/*! ./ops/tile */ "./lib/onnxjs/backends/webgl/ops/tile.ts");
var transpose_1 = __webpack_require__(/*! ./ops/transpose */ "./lib/onnxjs/backends/webgl/ops/transpose.ts");
var unaryOps = __importStar(__webpack_require__(/*! ./ops/unary-op */ "./lib/onnxjs/backends/webgl/ops/unary-op.ts"));
var unsqueeze_1 = __webpack_require__(/*! ./ops/unsqueeze */ "./lib/onnxjs/backends/webgl/ops/unsqueeze.ts");
var upsample_1 = __webpack_require__(/*! ./ops/upsample */ "./lib/onnxjs/backends/webgl/ops/upsample.ts");
exports.WEBGL_OP_RESOLVE_RULES = [
    ['Abs', '', '6+', unaryOps.abs],
    ['Acos', '', '7+', unaryOps.acos],
    ['Add', '', '7+', binaryOps.add],
    ['And', '', '7+', binaryOps.and],
    ['Asin', '', '7+', unaryOps.asin],
    ['Atan', '', '7+', unaryOps.atan],
    // TODO: support new attributes for AveragePool-10
    ['AveragePool', '', '7-10', pool_1.averagePool, pool_1.parseAveragePoolAttributes],
    ['BatchNormalization', '', '7+', batch_normalization_1.batchNormalization, batch_normalization_1.parseBatchNormalizationAttributes],
    ['Ceil', '', '6+', unaryOps.ceil],
    ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],
    ['Concat', '', '4+', concat_1.concat, concat_1.parseConcatAttributes],
    ['Conv', '', '1+', conv_1.conv, conv_1.parseConvAttributes],
    ['Cos', '', '7+', unaryOps.cos],
    ['Div', '', '7+', binaryOps.div],
    ['Dropout', '', '7+', unaryOps.identity],
    ['DepthToSpace', '', '1+', depth_to_space_1.depthToSpace, depth_to_space_1.parseDepthToSpaceAttributes],
    ['Equal', '', '7+', binaryOps.equal],
    ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],
    ['Exp', '', '6+', unaryOps.exp],
    ['Flatten', '', '1+', flatten_1.flatten, flatten_1.parseFlattenAttributes],
    ['Floor', '', '6+', unaryOps.floor],
    ['Gather', '', '1+', gather_1.gather, gather_1.parseGatherAttributes],
    ['Gemm', '', '7-10', gemm_1.gemm, gemm_1.parseGemmAttributesV7],
    ['Gemm', '', '11+', gemm_1.gemm, gemm_1.parseGemmAttributesV11],
    ['GlobalAveragePool', '', '1+', pool_2.globalAveragePool, pool_2.parseGlobalAveragePoolAttributes],
    ['GlobalMaxPool', '', '1+', pool_4.globalMaxPool],
    ['Greater', '', '7+', binaryOps.greater],
    ['Identity', '', '1+', unaryOps.identity],
    ['ImageScaler', '', '1+', image_scaler_1.imageScaler, image_scaler_1.parseImageScalerAttributes],
    ['InstanceNormalization', '', '6+', instance_normalization_1.instanceNormalization, instance_normalization_1.parseInstanceNormalizationAttributes],
    ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],
    ['Less', '', '7+', binaryOps.less],
    ['Log', '', '6+', unaryOps.log],
    ['MatMul', '', '1+', matmul_1.matMul, matmul_1.parseMatMulAttributes],
    // TODO: support new attributes for MaxPool-8 and MaxPool-10
    ['MaxPool', '', '1-9', pool_3.maxPool, pool_3.parseMaxPoolAttributes],
    ['Mul', '', '7+', binaryOps.mul],
    ['Neg', '', '6+', unaryOps.neg],
    ['Not', '', '1+', unaryOps.not],
    ['Or', '', '7+', binaryOps.or],
    ['Pad', '', '2-10', pad_1.pad, pad_1.parsePadAttributes],
    ['Pow', '', '7+', binaryOps.pow],
    ['PRelu', '', '7+', binaryOps.pRelu],
    ['ReduceLogSum', '', '1+', reduce_1.reduceLogSum, reduce_2.parseReduceAttributes],
    ['ReduceMax', '', '1+', reduce_1.reduceMax, reduce_2.parseReduceAttributes],
    ['ReduceMean', '', '1+', reduce_1.reduceMean, reduce_2.parseReduceAttributes],
    ['ReduceMin', '', '1+', reduce_1.reduceMin, reduce_2.parseReduceAttributes],
    ['ReduceProd', '', '1+', reduce_1.reduceProd, reduce_2.parseReduceAttributes],
    ['ReduceSum', '', '1+', reduce_1.reduceSum, reduce_2.parseReduceAttributes],
    ['ReduceSumSquare', '', '1+', reduce_1.reduceLogSumSquare, reduce_2.parseReduceAttributes],
    ['Relu', '', '6+', unaryOps.relu],
    ['Reshape', '', '5+', reshape_1.reshape],
    ['Resize', '', '10', resize_packed_1.resize, resize_packed_1.parseResizeAttributesV10],
    ['Resize', '', '11+', resize_packed_1.resize, resize_packed_1.parseResizeAttributesV11],
    ['Shape', '', '1+', shape_1.shape],
    ['Sigmoid', '', '6+', unaryOps.sigmoid],
    ['Sin', '', '7+', unaryOps.sin],
    ['Slice', '', '10+', slice_1.sliceV10],
    ['Slice', '', '1-9', slice_1.slice, slice_1.parseSliceAttributes],
    ['Softmax', '', '1+', softmax_1.softmax, softmax_1.parseSoftmaxAttributes],
    // 'Split' operator has an optional attribute 'split'
    // this attribute determines how the specified axis of input data is split.
    // When the attribute is missing, we need the count of number of outputs
    // so that we can determine the 'split' attribute from the runtime input to the Operator
    ['Split', '', '2+', split_1.split, split_1.parseSplitAttributes],
    ['Sqrt', '', '6+', unaryOps.sqrt],
    ['Squeeze', '', '1+', squeeze_1.squeeze, squeeze_1.parseSqueezeAttributes],
    ['Sub', '', '7+', binaryOps.sub],
    ['Sum', '', '6+', sum_1.sum],
    ['Tan', '', '7+', unaryOps.tan],
    ['Tanh', '', '6+', unaryOps.tanh],
    ['Tile', '', '6+', tile_1.tile],
    ['Transpose', '', '1+', transpose_1.transpose, transpose_1.parseTransposeAttributes],
    ['Upsample', '', '7-8', upsample_1.upsample, upsample_1.parseUpsampleAttributesV7],
    ['Upsample', '', '9', upsample_1.upsample, upsample_1.parseUpsampleAttributesV9],
    ['Unsqueeze', '', '1+', unsqueeze_1.unsqueeze, unsqueeze_1.parseUnsqueezeAttributes],
    ['Xor', '', '7+', binaryOps.xor],
];


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/batch-normalization.ts":
/*!**************************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/batch-normalization.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseBatchNormalizationAttributes = exports.batchNormalization = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var batchNormalizationProgramMetadata = {
    name: 'BatchNormalization',
    inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],
    inputTypes: [types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked]
};
var batchNormalization = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var output = inferenceHandler.run(__assign(__assign({}, batchNormalizationProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes); } }), inputs);
    return [output];
};
exports.batchNormalization = batchNormalization;
var parseBatchNormalizationAttributes = function (node) {
    var epsilon = node.attributes.getFloat('epsilon', 1e-5);
    var momentum = node.attributes.getFloat('momentum', 0.9);
    var spatial = node.attributes.getInt('spatial', 1);
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ epsilon: epsilon, momentum: momentum, spatial: spatial });
};
exports.parseBatchNormalizationAttributes = parseBatchNormalizationAttributes;
var createBatchNormalizationProgramInfo = function (inferenceHandler, inputs, attributes) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var rank = inputs[0].dims.length;
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, types_1.TextureType.unpacked), 2), scaleWidth = _a[0], scaleHeight = _a[1];
    var shaderSource = "\n  float process(int[" + rank + "] indices) {\n    vec2 position = offsetToCoords(indices[1], " + scaleWidth + ", " + scaleHeight + ");\n    float scale = getColorAsFloat(" + glsl.texture2D + "(Scale, position));\n    float mean = getColorAsFloat(" + glsl.texture2D + "(Mean, position));\n    float variance = getColorAsFloat(" + glsl.texture2D + "(Variance, position));\n    float b = getColorAsFloat(" + glsl.texture2D + "(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(" + attributes.epsilon + ")) ) + b;\n  }";
    return __assign(__assign({}, batchNormalizationProgramMetadata), { output: { dims: inputs[0].dims, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 5) {
        throw new Error('BatchNormalization requires 5 inputs.');
    }
    var X = inputs[0];
    var scale = inputs[1];
    var B = inputs[2];
    var mean = inputs[3];
    var var_ = inputs[4];
    // input should atleast have three dimensions - N,C,dim1,...,dimn
    // other inputs can have only one dimensions
    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||
        var_.dims.length !== 1) {
        throw new Error('invalid input shape.');
    }
    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||
        var_.dims[0] !== X.dims[1]) {
        throw new Error('invalid input shape.');
    }
    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||
        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||
        (var_.type !== 'float32' && var_.type !== 'float64')) {
        throw new Error('invalid input tensor types.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/binary-op.ts":
/*!****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/binary-op.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.xor = exports.sub = exports.pRelu = exports.pow = exports.or = exports.mul = exports.less = exports.greater = exports.equal = exports.div = exports.and = exports.add = exports.glslPRelu = exports.glslPow = exports.glslXor = exports.glslOr = exports.glslAnd = exports.glslLess = exports.glslGreater = exports.glslEqual = exports.glslSub = exports.glslMul = exports.glslDiv = exports.glslAdd = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_definitions_1 = __webpack_require__(/*! ../glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
function glslAdd() {
    var name = 'add_';
    var body = "\n  float " + name + "(float a, float b) {\n    return a + b;\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslAdd = glslAdd;
function glslDiv() {
    var name = 'div_';
    var body = "\n  float " + name + "(float a, float b) {\n    return a / b;\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslDiv = glslDiv;
function glslMul() {
    var name = 'mul_';
    var body = "\n  float " + name + "(float a, float b) {\n    return a * b;\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslMul = glslMul;
function glslSub() {
    var name = 'sub_';
    var body = "\n  float " + name + "(float a, float b) {\n    return a - b;\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslSub = glslSub;
function glslEqual() {
    var name = 'equal_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float(a == b);\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslEqual = glslEqual;
function glslGreater() {
    var name = 'greater_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float(a > b);\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslGreater = glslGreater;
function glslLess() {
    var name = 'less_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float(a < b);\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslLess = glslLess;
function glslAnd() {
    var name = 'and_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslAnd = glslAnd;
function glslOr() {
    var name = 'or_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslOr = glslOr;
function glslXor() {
    var name = 'xor_';
    var body = "\n  float " + name + "(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslXor = glslXor;
function glslPow() {
    return glslBuiltinBinary('pow');
}
exports.glslPow = glslPow;
function glslPRelu() {
    var name = 'prelu_';
    var body = "\n  float " + name + "(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslPRelu = glslPRelu;
function glslBuiltinBinary(fname) {
    var name = fname + "_";
    var body = "\n  float " + name + "(float a, float b) {\n    return " + fname + "(a, b);\n  }\n  vec4 " + name + "(vec4 v1, vec4 v2) {\n    return " + fname + "(v1, v2);\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
var createBinaryProgramInfoLoader = function (handler, inputs, glslFunc, outputTensorType, cacheKey) {
    if (outputTensorType === void 0) { outputTensorType = inputs[0].type; }
    var textureType = handler.session.pack ? types_1.TextureType.packed : types_1.TextureType.unpacked;
    return {
        name: glslFunc.name,
        inputNames: ['A', 'B'],
        inputTypes: [textureType, textureType],
        cacheHint: cacheKey,
        get: function () { return createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType); }
    };
};
var createBinaryProgramInfo = function (handler, inputs, glslFunc, outputTensorType) {
    if (outputTensorType === void 0) { outputTensorType = inputs[0].type; }
    var textureType = handler.session.pack ? types_1.TextureType.packed : types_1.TextureType.unpacked;
    var isBroadcast = !util_1.ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);
    var outputShape = inputs[0].dims;
    var usePackedTexture = handler.session.pack;
    if (isBroadcast) {
        var calculatedShape = util_1.BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);
        if (!calculatedShape) {
            throw new Error('Can\'t perform binary op on the given tensors');
        }
        outputShape = calculatedShape;
        var outputRank = outputShape.length;
        var aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;
        var bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;
        var aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';
        var bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';
        var glsl_1 = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
        var shaderSource_1 = usePackedTexture ? "\n      " + glslFunc.body + "\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = " + glslFunc.name + "(a, b);\n        " + glsl_1.output + " = result;\n      }" :
            "\n      " + glslFunc.body + "\n      float process(int indices[" + outputRank + "]) {\n        int aindices[" + aRank + "];\n        int bindices[" + bRank + "];\n        " + aBcast + "\n        " + bBcast + "\n        return " + glslFunc.name + "(_A(aindices), _B(bindices));\n      }";
        return {
            name: glslFunc.name,
            inputNames: ['A', 'B'],
            inputTypes: [textureType, textureType],
            output: { dims: outputShape, type: outputTensorType, textureType: textureType },
            shaderSource: shaderSource_1,
            hasMain: usePackedTexture
        };
    }
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    var shaderSource = "\n    " + glslFunc.body + "\n    void main() {\n      vec4 v1 = " + glsl.texture2D + "(A, TexCoords);\n      vec4 v2 = " + glsl.texture2D + "(B, TexCoords);\n      vec4 result = " + glslFunc.name + "(v1, v2);\n      " + glsl.output + " = result;\n    }\n    ";
    return {
        name: glslFunc.name,
        inputNames: ['A', 'B'],
        inputTypes: [textureType, textureType],
        output: { dims: inputs[0].dims, type: outputTensorType, textureType: textureType },
        shaderSource: shaderSource,
        hasMain: true
    };
};
var add = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)]; };
exports.add = add;
var and = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)]; };
exports.and = and;
var div = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)]; };
exports.div = div;
var equal = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)]; };
exports.equal = equal;
var greater = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)]; };
exports.greater = greater;
var less = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)]; };
exports.less = less;
var mul = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)]; };
exports.mul = mul;
var or = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)]; };
exports.or = or;
var pow = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)]; };
exports.pow = pow;
var pRelu = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)]; };
exports.pRelu = pRelu;
var sub = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)]; };
exports.sub = sub;
var xor = function (handler, inputs) { return [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)]; };
exports.xor = xor;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/concat-packed.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/concat-packed.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPackedConcatProgramInfoLoader = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var createPackedConcatProgramMetadata = function (inputCount, cacheHint) { return ({
    name: 'Concat (packed)',
    inputNames: Array.from({ length: inputCount }, function (v, i) { return "X" + i; }),
    inputTypes: Array(inputCount).fill(types_1.TextureType.packed),
    cacheHint: cacheHint
}); };
var createPackedConcatProgramInfo = function (handler, metadata, inputs, axis) {
    var inputShape = inputs[0].dims.slice();
    if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {
        throw new Error('axis specified for concat doesn\'t match input dimensionality');
    }
    if (axis < 0) {
        axis = inputShape.length + axis;
    }
    // ensure all of the non-concatenated axes match each other
    // calculate the shape of the output tensor while we do that
    var outputShape = inputShape.slice(0);
    for (var i = 1; i < inputs.length; i++) {
        var dataNShape = inputs[i].dims.slice();
        for (var axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {
            // add to the placeholder for computing output shape
            if (axisIndex === axis) {
                outputShape[axis] += dataNShape[axisIndex];
            }
            // ensure all non-cancatenated axes match each other
            else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {
                throw new Error('non concat dimensions must match');
            }
        }
    }
    var rank = outputShape.length;
    var coords = packing_utils_1.getChannels('coords', rank);
    var dtype = utils_1.getCoordsDataType(rank);
    var unpackChannel = packing_utils_1.unpackFromChannel();
    var shapes = inputs.map(function (i) { return i.dims; });
    var channels = utils_1.getGlChannels(rank);
    var offsets = new Array(shapes.length - 1);
    offsets[0] = shapes[0][axis];
    for (var i = 1; i < offsets.length; i++) {
        offsets[i] = offsets[i - 1] + shapes[i][axis];
    }
    var channel = channels[axis];
    var lastChannels = channels.slice(-2);
    var allChannels = channels.join();
    var getValueSnippet = "if (" + channel + " < " + offsets[0] + ") {\n        return getChannel(\n            getX0(" + allChannels + "), vec2(" + lastChannels.join() + "));\n        }";
    for (var i = 1; i < offsets.length; i++) {
        var shift_1 = offsets[i - 1];
        getValueSnippet += "\n            if (" + channel + " < " + offsets[i] + "  && " + channel + " >= " + offsets[i - 1] + ") {\n              return getChannel(\n                getX" + i + "(" + getShiftedChannelsSnippet(channels, channel, shift_1) + "),\n                vec2(" + getShiftedChannelsSnippet(lastChannels, channel, shift_1) + "));\n            }";
    }
    var lastIndex = offsets.length;
    var shift = offsets[offsets.length - 1];
    getValueSnippet += "\n            return getChannel(\n              getX" + lastIndex + "(" + getShiftedChannelsSnippet(channels, channel, shift) + "),\n              vec2(" + getShiftedChannelsSnippet(lastChannels, channel, shift) + "));";
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    var shaderSource = "\n          " + unpackChannel + "\n          float getValue(" + channels.map(function (x) { return 'int ' + x; }) + ") {\n            " + getValueSnippet + "\n          }\n\n          void main() {\n            " + dtype + " coords = getOutputCoords();\n            int lastDim = coords." + channels[rank - 1] + ";\n            coords." + channels[rank - 1] + " = coords." + channels[rank - 2] + ";\n            coords." + channels[rank - 2] + " = lastDim;\n\n            vec4 result = vec4(getValue(" + coords + "), 0., 0., 0.);\n\n            " + coords[rank - 1] + " = " + coords[rank - 1] + " + 1;\n            if (" + coords[rank - 1] + " < " + outputShape[rank - 1] + ") {\n              result.g = getValue(" + coords + ");\n            }\n\n            " + coords[rank - 2] + " = " + coords[rank - 2] + " + 1;\n            if (" + coords[rank - 2] + " < " + outputShape[rank - 2] + ") {\n              result.a = getValue(" + coords + ");\n            }\n\n            " + coords[rank - 1] + " = " + coords[rank - 1] + " - 1;\n            if (" + coords[rank - 2] + " < " + outputShape[rank - 2] + " &&\n                " + coords[rank - 1] + " < " + outputShape[rank - 1] + ") {\n              result.b = getValue(" + coords + ");\n            }\n            " + glsl.output + " = result;\n          }\n        ";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.packed }, shaderSource: shaderSource, hasMain: true });
};
var createPackedConcatProgramInfoLoader = function (handler, inputs, attributes) {
    var metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis); } });
};
exports.createPackedConcatProgramInfoLoader = createPackedConcatProgramInfoLoader;
var getShiftedChannelsSnippet = function (channels, channel, shift) {
    var channelIdx = channels.indexOf(channel);
    var res = channels.map(function (c, idx) {
        if (idx === channelIdx) {
            return c + " - " + shift;
        }
        else {
            return c;
        }
    });
    return res.join();
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/concat.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/concat.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseConcatAttributes = exports.concat = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var concat_packed_1 = __webpack_require__(/*! ./concat-packed */ "./lib/onnxjs/backends/webgl/ops/concat-packed.ts");
var concat = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {
        var output = inferenceHandler.run(concat_packed_1.createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);
        return [output];
    }
    else {
        var output = inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);
        return [output];
    }
};
exports.concat = concat;
var createUnpackedConcatProgramMetadata = function (inputCount, cacheHint) { return ({
    name: 'Concat',
    inputNames: Array.from({ length: inputCount }, function (v, i) { return "X" + i; }),
    inputTypes: Array(inputCount).fill(types_1.TextureType.unpacked),
    cacheHint: cacheHint
}); };
var createUnpackedConcatProgramInfo = function (handler, metadata, inputs, axis) {
    var inputShape = inputs[0].dims.slice();
    if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {
        throw new Error('axis specified for concat doesn\'t match input dimensionality');
    }
    if (axis < 0) {
        axis = inputShape.length + axis;
    }
    // ensure all of the non-concatenated axes match each other
    // calculate the shape of the output tensor while we do that
    var outputShape = inputShape.slice(0);
    for (var i = 1; i < inputs.length; i++) {
        var dataNShape = inputs[i].dims.slice();
        for (var axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {
            // add to the placeholder for computing output shape
            if (axisIndex === axis) {
                outputShape[axis] += dataNShape[axisIndex];
            }
            // ensure all non-cancatenated axes match each other
            else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {
                throw new Error('non concat dimensions must match');
            }
        }
    }
    var rank = outputShape.length;
    var sizeInConcatAxis = new Array(inputs.length);
    var previousSum = 0;
    for (var i = 0; i < sizeInConcatAxis.length; ++i) {
        previousSum += inputs[i].dims[axis];
        sizeInConcatAxis[i] = previousSum;
    }
    var getTextureIndexWhereDataResidesMethod = '';
    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated
    if (inputs.length < 5) {
        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);
    }
    else {
        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);
    }
    var fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);
    var getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);
    var shaderSource = "\n        " + fetchDataFromCorrectTextureMethod + "\n        " + getSizeInConcatAxisValueFromIndexMethod + "\n        " + getTextureIndexWhereDataResidesMethod + "\n        float process(int indices[" + rank + "]) {\n          int textureIndex = getTextureWhereDataResides (indices[" + axis + "]);\n\n          if(textureIndex != 0) {\n            indices[" + axis + "] = indices[" + axis + "] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var createUnpackedConcatProgramInfoLoader = function (handler, inputs, attributes) {
    var metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis); } });
};
var getTextureIndexWhereDataResidesLinearSearch = function (sizeInConcatAxis) {
    var searchAxis = sizeInConcatAxis.map(function (size, i) { return "if(index<" + size + ") {return " + i + ";}\n"; });
    return "int getTextureWhereDataResides(int index) {\n      " + searchAxis.join('') + "\n    }";
};
// TODO: Implement BinarySearch in GLSL
var getTextureIndexWhereDataResidesBinarySearch = function (sizeInConcatAxis) {
    return getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);
};
var getFetchDataFromCorrectTextureMethod = function (numberOfTensors, tensorRank) {
    var codeLines = ["float fetchDataFromCorrectTexture(int textureIndex, int indices[" + tensorRank + "]) {"];
    for (var i = 0; i < numberOfTensors; ++i) {
        if (i === 0) {
            codeLines.push('\t' +
                ("if (textureIndex == " + i + ") { return _X" + i + "(indices); }"));
        }
        else if (i === numberOfTensors - 1) {
            codeLines.push('\t' +
                ("else { return _X" + i + "(indices); }"));
        }
        else {
            codeLines.push('\t' +
                ("else if (textureIndex == " + i + ") { return _X" + i + "(indices); }"));
        }
    }
    codeLines.push('\t' +
        '}');
    return codeLines.join('\n');
};
var getGetSizeInConcatAxisValueFromIndexMethod = function (sizeInConcatAxis) {
    var codeLines = ['int getSizeInConcatAxisValueFromIndex(int index) {'];
    for (var i = 0; i < sizeInConcatAxis.length; ++i) {
        if (i === 0) {
            codeLines.push('\t' +
                ("if (index == " + i + ") { return " + sizeInConcatAxis[i] + "; }"));
        }
        else if (i === sizeInConcatAxis.length - 1) {
            codeLines.push('\t' +
                ("else { return " + sizeInConcatAxis[i] + "; }"));
        }
        else {
            codeLines.push('\t' +
                ("else if (index == " + i + ") { return " + sizeInConcatAxis[i] + "; }"));
        }
    }
    codeLines.push('\t' +
        '}');
    return codeLines.join('\n');
};
var parseConcatAttributes = function (node) {
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ axis: node.attributes.getInt('axis') });
};
exports.parseConcatAttributes = parseConcatAttributes;
var validateInputs = function (inputs) {
    var e_1, _a;
    if (!inputs || inputs.length < 1) {
        throw new Error('too few inputs');
    }
    var inputType = inputs[0].type;
    var inputDimensionality = inputs[0].dims.length;
    // TODO: Support string concat
    if (inputType === 'string') {
        throw new Error('string tensor is not supported yet');
    }
    try {
        for (var inputs_1 = __values(inputs), inputs_1_1 = inputs_1.next(); !inputs_1_1.done; inputs_1_1 = inputs_1.next()) {
            var input = inputs_1_1.value;
            // make sure types of all inputs match
            if (input.type !== inputType) {
                throw new Error('input tensors should be one type');
            }
            // make sure the dimensionality of all inputs are the same
            if (input.dims.length !== inputDimensionality) {
                throw new Error('input tensors should have the same shape');
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (inputs_1_1 && !inputs_1_1.done && (_a = inputs_1.return)) _a.call(inputs_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/conv-grouped.ts":
/*!*******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/conv-grouped.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUnpackedGroupedConvProgramInfoLoader = void 0;
var instrument_1 = __webpack_require__(/*! ../../../instrument */ "./lib/onnxjs/instrument.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var conv_1 = __webpack_require__(/*! ./conv */ "./lib/onnxjs/backends/webgl/ops/conv.ts");
var fuse_utils_1 = __webpack_require__(/*! ./fuse-utils */ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts");
var createUnpackedGroupedConvProgramMetadata = function (hasBias, cacheHint) { return ({
    name: 'GroupedConv',
    inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],
    inputTypes: hasBias ? [types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked] :
        [types_1.TextureType.unpacked, types_1.TextureType.unpacked],
    cacheHint: cacheHint
}); };
var createUnpackedGroupedConvProgramInfo = function (inferenceHandler, inputs, metadata, attributes) {
    var hasBias = inputs.length > 2;
    var processBias = hasBias ? 'value += getBias(output_channel);' : '';
    var xShape = inputs[0].dims.slice();
    var wShape = inputs[1].dims.slice();
    var outputChannelsPerGroup = wShape[0] / attributes.group;
    instrument_1.Logger.verbose('GroupedConv', "autpPad:" + attributes.autoPad + ", dilations:" + attributes.dilations + ", group:" + attributes.group + ", kernelShape:" + attributes.kernelShape + ", pads:" + attributes.pads + ", strides:" + attributes.strides);
    var outputShape = conv_1.calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var _a = fuse_utils_1.getActicationSnippet(attributes), activationFunction = _a.activationFunction, applyActivation = _a.applyActivation;
    var shaderSource = "\n  const ivec2 strides = ivec2(" + attributes.strides[0] + ", " + attributes.strides[1] + ");\n  const ivec2 pads = ivec2(" + attributes.pads[0] + ", " + attributes.pads[1] + ");\n  " + activationFunction + "\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / " + outputChannelsPerGroup + ";\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < " + wShape[1] + "; wInChannel++) {\n      int input_channel = group_id * " + wShape[1] + " + wInChannel;\n      for (int wHeight = 0; wHeight < " + wShape[2] + "; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * " + attributes.dilations[0] + ";\n\n        if (xHeight < 0 || xHeight >= " + xShape[2] + ") {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < " + wShape[3] + "; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * " + attributes.dilations[1] + ";\n          if (xWidth < 0 || xWidth >= " + xShape[3] + ") {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    " + processBias + "\n    " + applyActivation + "\n    " + glsl.output + " = vec4(value, .0, .0, .0);\n  }\n";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource, hasMain: true });
};
var createUnpackedGroupedConvProgramInfoLoader = function (inferenceHandler, inputs, attributes) {
    var metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes); } });
};
exports.createUnpackedGroupedConvProgramInfoLoader = createUnpackedGroupedConvProgramInfoLoader;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/conv-pack.ts":
/*!****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/conv-pack.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.conv2DPacked = exports.conv2DPackedPointwise = void 0;
var conv_1 = __webpack_require__(/*! ./conv */ "./lib/onnxjs/backends/webgl/ops/conv.ts");
var im2col_pack_1 = __webpack_require__(/*! ./im2col-pack */ "./lib/onnxjs/backends/webgl/ops/im2col-pack.ts");
var matmul_pack_1 = __webpack_require__(/*! ./matmul-pack */ "./lib/onnxjs/backends/webgl/ops/matmul-pack.ts");
var conv2DPackedPointwise = function (inferenceHandler, inputs, attributes) {
    var xshape = inputs[0].dims;
    var kshape = inputs[1].dims;
    var outputShape = conv_1.calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);
    var reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);
    var reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);
    var matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];
    var matmulOutput = inferenceHandler.run(matmul_pack_1.createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);
    return inferenceHandler.reshapePacked(matmulOutput, outputShape);
};
exports.conv2DPackedPointwise = conv2DPackedPointwise;
var conv2DPacked = function (inferenceHandler, inputs, attributes) {
    var xshape = inputs[0].dims;
    var kshape = inputs[1].dims;
    var outputShape = conv_1.calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);
    // run im2col
    var im2colOutput = inferenceHandler.run(im2col_pack_1.createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);
    // reshape kernel
    var kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);
    // run matmul
    var matmulInputs = (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];
    var matmulOutput = inferenceHandler.run(matmul_pack_1.createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);
    // reshape output
    var outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);
    return outputReshaped;
};
exports.conv2DPacked = conv2DPacked;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/conv.ts":
/*!***********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/conv.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseConvAttributes = exports.conv = exports.calculateOutputShape = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var conv_grouped_1 = __webpack_require__(/*! ./conv-grouped */ "./lib/onnxjs/backends/webgl/ops/conv-grouped.ts");
var conv_pack_1 = __webpack_require__(/*! ./conv-pack */ "./lib/onnxjs/backends/webgl/ops/conv-pack.ts");
var dot_product_1 = __webpack_require__(/*! ./dot-product */ "./lib/onnxjs/backends/webgl/ops/dot-product.ts");
var fuse_utils_1 = __webpack_require__(/*! ./fuse-utils */ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts");
var im2col_1 = __webpack_require__(/*! ./im2col */ "./lib/onnxjs/backends/webgl/ops/im2col.ts");
var matmul_1 = __webpack_require__(/*! ./matmul */ "./lib/onnxjs/backends/webgl/ops/matmul.ts");
var calculateOutputShape = function (inputShape, kernelShape, dilations, adjustPads, strides) {
    var _a;
    var batchSize = inputShape[0];
    var inputSpatialShape = inputShape.slice(2);
    var spatialRank = inputSpatialShape.length;
    var outChannels = kernelShape[0];
    var kernelSpatialShape = kernelShape.slice(2);
    var dilatedKernelShape = kernelSpatialShape.map(function (v, i) { return v + (v - 1) * (dilations[i] - 1); });
    var inputSpatialShapeWithPad = inputSpatialShape.map(function (v, i) { return v + adjustPads[i] + adjustPads[i + spatialRank]; });
    var outputSpatialShape = inputSpatialShapeWithPad.map(function (v, i) { return Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]); });
    var outputShape = (_a = [batchSize, outChannels]).concat.apply(_a, __spreadArray([], __read(outputSpatialShape)));
    return outputShape;
};
exports.calculateOutputShape = calculateOutputShape;
var conv = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs, attributes); // currently will fail if not conv2D
    return conv2d(inferenceHandler, inputs, attributes);
};
exports.conv = conv;
var conv2d = function (inferenceHandler, inputs, attributes) {
    var adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);
    var packMode = inferenceHandler.session.pack;
    var isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;
    if (adjustedAttributes.group > 1) {
        var result = inferenceHandler.run(conv_grouped_1.createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);
        return [result];
    }
    else if (isPointwise && packMode) {
        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];
    }
    else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {
        return [conv_pack_1.conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];
    }
    else {
        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];
    }
};
var conv2DUnpackedPointwise = function (inferenceHandler, inputs, attributes) {
    var xshape = inputs[0].dims;
    var kshape = inputs[1].dims;
    var outputShape = exports.calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);
    var reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);
    var reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);
    var matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];
    var matmulOutput = inferenceHandler.run(matmul_1.createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);
    return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);
};
var conv2DUnpacked = function (inferenceHandler, inputs, attributes) {
    var xshape = inputs[0].dims;
    var kshape = inputs[1].dims;
    var outputShape = exports.calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);
    var xIm2Col = inferenceHandler.run(im2col_1.createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);
    var dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];
    var output = inferenceHandler.run(dot_product_1.createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);
    return output;
};
var getAdjustedConvAttributes = function (attributes, inputs) {
    var kernelShape = attributes.kernelShape.slice();
    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims
    if (attributes.kernelShape.length === 0) {
        for (var i = 2; i < inputs[1].dims.length; ++i) {
            kernelShape.push(inputs[1].dims[i]);
        }
    }
    var pads = attributes.pads.slice();
    util_1.PoolConvUtil.adjustPadsBasedOnAutoPad(inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);
    // always return a new object so does not modify the original attributes
    var newAttributes = Object.assign({}, attributes);
    Object.assign(newAttributes, { kernelShape: kernelShape, pads: pads, cacheKey: attributes.cacheKey });
    return newAttributes;
};
var parseConvAttributes = function (node) {
    var attributes = node.attributes;
    var activationAttributes = fuse_utils_1.parseInternalActivationAttributes(attributes);
    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv
    var autoPad = attributes.getString('auto_pad', 'NOTSET');
    var dilations = attributes.getInts('dilations', [1, 1]);
    var group = attributes.getInt('group', 1);
    var kernelShape = attributes.getInts('kernel_shape', []);
    var pads = attributes.getInts('pads', [0, 0, 0, 0]);
    var strides = attributes.getInts('strides', [1, 1]);
    return attribute_with_cache_key_1.createAttributeWithCacheKey(__assign({ autoPad: autoPad, dilations: dilations, group: group, kernelShape: kernelShape, pads: pads, strides: strides }, activationAttributes));
};
exports.parseConvAttributes = parseConvAttributes;
var validateInputs = function (inputs, attributes) {
    // Refer to the below link for all input checks
    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv
    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {
        throw new Error('Conv requires 2 or 3 inputs');
    }
    // TODO : Need to add support for multi-dimensional conv
    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {
        throw new Error('currently only support 2-dimensional conv');
    }
    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL
    var dataChannel = inputs[0].dims[1];
    var filterInChannel = inputs[1].dims[1] * attributes.group;
    if (dataChannel !== filterInChannel) {
        throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');
    }
    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps
    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {
        throw new Error('invalid bias');
    }
    var spatialRank = inputs[0].dims.length - 2;
    // wrong dilations dimension
    if (attributes.dilations.length !== spatialRank) {
        throw new Error("dilations should be " + spatialRank + "D");
    }
    // Wrong strides dimension
    if (attributes.strides.length !== spatialRank) {
        throw new Error("strides should be " + spatialRank + "D");
    }
    // Wrong pads dimension
    if (attributes.pads.length !== spatialRank * 2) {
        throw new Error("pads should be " + spatialRank * 2 + "D");
    }
    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor
    // (the first 2 dims are batch_size and channels)
    if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {
        throw new Error('invalid kernel shape');
    }
    // TODO : Need to add support for float64
    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {
        throw new Error('Conv input(X,W) should be float tensor');
    }
    if (inputs.length === 3 && inputs[2].type !== 'float32') {
        throw new Error('Conv input(bias) should be float tensor');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/depth-to-space.ts":
/*!*********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/depth-to-space.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseDepthToSpaceAttributes = exports.depthToSpace = void 0;
var transpose_1 = __webpack_require__(/*! ./transpose */ "./lib/onnxjs/backends/webgl/ops/transpose.ts");
var depthToSpace = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var blocksize = attributes.blocksize;
    var blocksizeSqr = blocksize * blocksize;
    var transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];
    var firstReshapeShape = attributes.mode === 'DCR' ?
        [
            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],
            inputs[0].dims[3]
        ] :
        [
            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],
            inputs[0].dims[3]
        ];
    // const transpose = new WebGLTranspose();
    // const attributes = new Attribute(undefined);
    // attributes.set('perm', 'ints', transposePerm);
    // transpose.initialize(attributes);
    // First reshape
    var firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);
    // transpose
    var transposeAttributes = { perm: transposePerm, cacheKey: "" + transposePerm };
    var _a = __read(transpose_1.transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes), 1), transposeOutput = _a[0];
    // Second reshape
    var secondReshapeShape = [
        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,
        inputs[0].dims[3] * blocksize
    ];
    var result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);
    return [result];
};
exports.depthToSpace = depthToSpace;
var parseDepthToSpaceAttributes = function (node) {
    // processing node attributes
    var blocksize = node.attributes.getInt('blocksize');
    if (blocksize < 1) {
        throw new Error("blocksize must be >= 1, but got : " + blocksize + " for DepthToSpace");
    }
    var mode = node.attributes.getString('mode', 'DCR');
    if (mode !== 'DCR' && mode !== 'CRD') {
        throw new Error("unrecognized mode: " + mode + " for DepthToSpace");
    }
    return { mode: mode, blocksize: blocksize };
};
exports.parseDepthToSpaceAttributes = parseDepthToSpaceAttributes;
var validateInputs = function (inputs) {
    if (inputs.length !== 1) {
        throw new Error("DepthToSpace expect 1 inputs, but got " + inputs.length);
    }
    // Input has to be a 4-D tensor
    // TODO: Support string depth-to-space.
    if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {
        throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/dot-product.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/dot-product.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDotProductProgramInfoLoader = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var fuse_utils_1 = __webpack_require__(/*! ./fuse-utils */ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts");
var im2col_1 = __webpack_require__(/*! ./im2col */ "./lib/onnxjs/backends/webgl/ops/im2col.ts");
var createDotProductProgramMetadata = function (hasBias, attributes) { return ({
    name: 'ConvDotProduct',
    inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],
    inputTypes: hasBias ? [types_1.TextureType.unpacked, types_1.TextureType.packedLastDimension, types_1.TextureType.unpacked] :
        [types_1.TextureType.unpacked, types_1.TextureType.packedLastDimension],
    cacheKey: attributes.activationCacheKey
}); };
var createDotProductProgramInfo = function (inferenceHandler, metadata, inputs, outputShape, attributes) {
    var xshape = inputs[0].dims;
    var kshape = inputs[1].dims;
    var adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];
    var im2colShape = im2col_1.calculateIm2ColDims(xshape, kshape, outputShape);
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, types_1.TextureType.packedLastDimension), 2), kWidth = _a[0], kHeight = _a[1];
    var im2colStrides = util_1.ShapeUtil.computeStrides(im2colShape);
    var _b = __read(inferenceHandler.calculateTextureWidthAndHeight(im2colShape, types_1.TextureType.packedLastDimension), 2), im2colWidth = _b[0], im2colHeight = _b[1];
    var rank = outputShape.length;
    var initValue = (inputs.length < 3) ? '0.0' : '_B(b)';
    var sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);
    var _c = fuse_utils_1.getActicationSnippet(attributes), activationFunction = _c.activationFunction, applyActivation = _c.applyActivation;
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var shaderSource = "\n" + activationFunction + "\nfloat process(int indices[" + rank + "]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * " + im2colStrides[0] + " + im2col[1] * " + im2colStrides[1] + " + im2col[2] * " + im2colStrides[2] + ";\n  int kernelOffset = indices[1] * " + adjustedKernelShape[1] + ";\n  float value = " + initValue + ";\n  for (int i = 0; i < " + sharedDim + "; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, " + im2colWidth + ", " + im2colHeight + ");\n    vec2 kernelCoords = offsetToCoords(kernelOffset, " + kWidth + ", " + kHeight + ");\n    value += dot(" + glsl.texture2D + "(Im2Col, im2colCoords), " + glsl.texture2D + "(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  " + applyActivation + "\n  return value;\n}";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var createDotProductProgramInfoLoader = function (inferenceHandler, inputs, outputShape, attributes) {
    var metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);
    return __assign(__assign({}, metadata), { get: function () { return createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes); } });
};
exports.createDotProductProgramInfoLoader = createDotProductProgramInfoLoader;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/flatten.ts":
/*!**************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/flatten.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseFlattenAttributes = exports.flatten = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var flatten = function (inferenceHandler, inputs, axis) {
    validateInputs(inputs, axis);
    var outputDims = util_1.ShapeUtil.flattenShape(inputs[0].dims, axis);
    return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];
};
exports.flatten = flatten;
var parseFlattenAttributes = function (node) {
    return node.attributes.getInt('axis', 1);
}; // default axis is 1
exports.parseFlattenAttributes = parseFlattenAttributes;
var validateInputs = function (inputs, axis) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Flatten requires 1 input.');
    }
    var r = inputs[0].dims.length;
    if (r === 0) {
        throw new Error('scalar tensor is not supported.');
    }
    if (axis < -r || axis > r) {
        throw new Error('Invalid axis');
    }
    // TODO: Support string type
    if (inputs[0].type === 'string') {
        throw new Error('string tensor is not supported.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts":
/*!*****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/fuse-utils.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseInternalActivationAttributes = exports.getActicationSnippet = void 0;
var unary_op_1 = __webpack_require__(/*! ./unary-op */ "./lib/onnxjs/backends/webgl/ops/unary-op.ts");
function getActicationSnippet(attributes) {
    var func;
    switch (attributes.activation) {
        case 'Relu':
            func = unary_op_1.glslRelu();
            break;
        case 'Sigmoid':
            func = unary_op_1.glslSigmoid();
            break;
        case 'Clip':
            func = unary_op_1.glslClip(attributes.clipMin, attributes.clipMax);
            break;
        // TODO: adding other activations that can be fused.
        default:
            return { activationFunction: '', applyActivation: '' };
    }
    var activationName = func.name;
    var activationFunction = func.body;
    var applyActivation = "value = " + activationName + "_(value);";
    return { activationFunction: activationFunction, applyActivation: applyActivation };
}
exports.getActicationSnippet = getActicationSnippet;
var parseInternalActivationAttributes = function (attributes) {
    var activation = attributes.getString('__internal_activation', '');
    if (activation === 'Clip') {
        var clipMax = attributes.getFloat('__clip_max', 3.402823e+38);
        var clipMin = attributes.getFloat('__clip_min', -3.402823e+38);
        return { activation: activation, clipMax: clipMax, clipMin: clipMin, activationCacheKey: activation + ":" + clipMin + "," + clipMax };
    }
    return { activation: activation, activationCacheKey: activation };
};
exports.parseInternalActivationAttributes = parseInternalActivationAttributes;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/gather.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/gather.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseGatherAttributes = exports.gather = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var operators_1 = __webpack_require__(/*! ../../../operators */ "./lib/onnxjs/operators.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var gather = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs, attributes.axis);
    var output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);
    return [output];
};
exports.gather = gather;
var parseGatherAttributes = function (node) {
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 0) });
};
exports.parseGatherAttributes = parseGatherAttributes;
var gatherProgramMetadata = {
    name: 'Gather',
    inputNames: ['A', 'B'],
    inputTypes: [types_1.TextureType.unpacked, types_1.TextureType.unpacked],
};
var createGatherProgramInfo = function (handler, metadata, inputs, axis) {
    var inputShape = inputs[0].dims.slice();
    var indexDataShape = inputs[1].dims.slice();
    var outputShape = new Array(inputShape.length + indexDataShape.length - 1);
    axis = util_1.ShapeUtil.normalizeAxis(axis, inputShape.length);
    var indexCopyOps = [];
    for (var i = 0; i < outputShape.length; i++) {
        // outputShape is divided into three parts: A, B, C
        // |0        axis|  axis + indexDataShape.length |          end|
        // |     A       |             B                 |      C      |
        //
        // inputIdx: [A, inputs[1][B], C]
        if (i < axis) { // A
            outputShape[i] = inputShape[i];
            indexCopyOps.push("inputIdx[" + i + "] = outputIdx[" + i + "];");
        }
        else {
            if (i < axis + indexDataShape.length) { // B
                outputShape[i] = indexDataShape[i - axis];
                indexCopyOps.push("indexDataIdx[" + (i - axis) + "] = outputIdx[" + i + "];");
            }
            else { // C
                outputShape[i] = inputShape[i - indexDataShape.length + 1]; // skip 1 for axis
                indexCopyOps.push("inputIdx[" + (i - indexDataShape.length + 1) + "] = outputIdx[" + i + "];");
            }
        }
    }
    var orank = outputShape.length || 1;
    var irank = inputShape.length;
    var iDrank = indexDataShape.length || 1;
    var shaderSource = "\n      float process(int outputIdx[" + orank + "]) {\n        int inputIdx[" + irank + "];\n        int indexDataIdx[" + iDrank + "];\n        indexDataIdx[0] = 0;\n        " + indexCopyOps.join('\n        ') + "\n        int idx = int(_B(indexDataIdx));\n        inputIdx[" + axis + "] = idx < 0 ? idx + " + inputShape[axis] + " : idx;\n        return _A(inputIdx);\n      }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var createGatherProgramInfoLoader = function (handler, inputs, attributes) {
    var metadata = __assign(__assign({}, gatherProgramMetadata), { cacheHint: attributes.cacheKey });
    return __assign(__assign({}, metadata), { get: function () { return createGatherProgramInfo(handler, metadata, inputs, attributes.axis); } });
};
var validateInputs = function (inputs, axis) {
    if (!inputs || inputs.length !== 2) {
        throw new Error('Gather requires 2 inputs.');
    }
    var tensorRank = inputs[0].dims.length;
    if (tensorRank < 1) {
        throw new Error('Invalid input shape.');
    }
    if (axis < -tensorRank || axis > tensorRank - 1) {
        throw new Error('Invalid axis.');
    }
    if (operators_1.NUMBER_TYPES.indexOf(inputs[0].type) === -1) {
        throw new Error('Invaid input type.');
    }
    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {
        throw new Error('Invaid input type.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/gemm.ts":
/*!***********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/gemm.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseGemmAttributesV11 = exports.parseGemmAttributesV7 = exports.gemm = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var gemm = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs, attributes);
    var output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);
    return [output];
};
exports.gemm = gemm;
var parseGemmAttributes = function (node, isOptionalC) {
    var transA = node.attributes.getInt('transA', 0) !== 0;
    var transB = node.attributes.getInt('transB', 0) !== 0;
    var alpha = node.attributes.getFloat('alpha', 1.0);
    var beta = node.attributes.getFloat('beta', 1.0);
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ transA: transA, transB: transB, alpha: alpha, beta: beta, isOptionalC: isOptionalC });
};
var parseGemmAttributesV7 = function (node) {
    return parseGemmAttributes(node, false);
};
exports.parseGemmAttributesV7 = parseGemmAttributesV7;
var parseGemmAttributesV11 = function (node) {
    return parseGemmAttributes(node, true);
};
exports.parseGemmAttributesV11 = parseGemmAttributesV11;
var createGemmProgramInfoLoader = function (inputs, attributes) {
    var metadata = {
        name: 'Gemm',
        inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],
        inputTypes: inputs.length === 3 ? [types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked] :
            [types_1.TextureType.unpacked, types_1.TextureType.unpacked],
        key: attributes.cacheKey
    };
    return __assign(__assign({}, metadata), { get: function () { return createGemmProgramInfo(metadata, inputs, attributes); } });
};
var createGemmProgramInfo = function (metadata, inputs, attributes) {
    var aShape = inputs[0].dims.slice();
    var bShape = inputs[1].dims.slice();
    var _a = __read(util_1.GemmUtil.getShapeOfGemmResult(aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined), 2), M = _a[0], N = _a[1];
    var outputShape = [M, N];
    if (!outputShape) {
        throw new Error('Can\'t use gemm on the given tensors');
    }
    var sharedDim = aShape[aShape.length - 1];
    var line = '';
    if (attributes.transA) {
        sharedDim = aShape[0];
    }
    if (attributes.transA && attributes.transB) {
        line = 'value += _A_T(a) * _B_T(b);';
    }
    else if (attributes.transA && !attributes.transB) {
        line = 'value += _A_T(a) * _B(b);';
    }
    else if (!attributes.transA && attributes.transB) {
        line = 'value += _A(a) * _B_T(b);';
    }
    else if (!attributes.transA && !attributes.transB) {
        line = 'value += _A(a) * _B(b);';
    }
    var rank = outputShape.length;
    var declareC = inputs.length === 3 ? "int c[" + inputs[2].dims.length + "];" : '';
    var broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';
    var calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';
    var shaderSource = "\n      float process(int indices[" + rank + "]) {\n          int a[" + rank + "];\n          int b[" + rank + "];\n          " + declareC + "\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          " + broadcastC + "\n\n          float value = 0.0;\n          for (int k=0; k<" + sharedDim + "; ++k) {\n              a[" + (rank - 1) + "] = k;\n              b[" + (rank - 2) + "] = k;\n              " + line + "\n          }\n\n          value = value * alpha;\n          " + calculateC + "\n          return value;\n      }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, variables: [
            { name: 'alpha', type: 'float', data: attributes.alpha }, { name: 'beta', type: 'float', data: attributes.beta }
        ], shaderSource: shaderSource });
};
var validateInputs = function (inputs, attributes) {
    if (!inputs) {
        throw new Error('Input is missing');
    }
    if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {
        throw new Error('Invaid input shape.');
    }
    if (!attributes.isOptionalC && inputs.length !== 3) {
        throw new Error('Gemm requires 3 inputs');
    }
    // 'C' can be of dimensionality 1 or 2 only
    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {
        throw new Error('Invalid input shape of C');
    }
    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||
        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||
        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {
        throw new Error('Invalid input type.');
    }
    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {
        throw new Error('Input types are mismatched');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/im2col-pack.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/im2col-pack.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPackedIm2ColProgramInfoLoader = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var createPackedIm2ColProgramMetadata = function (cacheHint) { return ({
    name: 'Im2Col (packed)',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.packed],
    cacheHint: cacheHint,
}); };
var createPackedIm2ColProgramInfo = function (inferenceHandler, metadata, x, w, outputShape, attributes) {
    var xshape = x.dims;
    var wshape = w.dims;
    var rowDim = 2;
    var colDim = 3;
    var rank = outputShape.length;
    var im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];
    var kernelSize = wshape[2] * wshape[3];
    var unpackChannel = packing_utils_1.unpackFromChannel();
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var unrolled = '';
    for (var row = 0; row <= 1; row++) {
        for (var col = 0; col <= 1; col++) {
            unrolled += "\n            blockIndex = rc.x + " + col + ";\n            pos = rc.y + " + row + ";\n\n            if(blockIndex < " + im2colShape[1] + " && pos < " + im2colShape[0] + ") {\n              offsetY = int(blockIndex / (" + outputShape[rank - 1] + ")) * " + attributes.strides[0] + " - " + attributes.pads[0] + ";\n              d0 = offsetY + " + attributes.dilations[0] + " * (imod(pos, " + kernelSize + ") / " + wshape[2] + ");\n\n              if(d0 < " + xshape[rowDim] + " && d0 >= 0) {\n                offsetX = imod(blockIndex, " + outputShape[rank - 1] + ") * " + attributes.strides[1] + " - " + attributes.pads[1] + ";\n                d1 = offsetX + " + attributes.dilations[1] + " * imod(imod(pos, " + kernelSize + "), " + wshape[2] + ");\n\n                if(d1 < " + xshape[colDim] + " && d1 >= 0) {\n\n                  ch = int(float(pos)/ " + kernelSize + ".);\n                    innerDims = vec2(d0, d1);\n                    result[" + (row * 2 + col) + "] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          ";
        }
    }
    var shaderSource = "\n      " + unpackChannel + "\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          " + unrolled + "\n          " + glsl.output + " = result;\n      }\n            ";
    return __assign(__assign({}, metadata), { output: { dims: im2colShape, type: x.type, textureType: types_1.TextureType.packed }, shaderSource: shaderSource, hasMain: true });
};
var createPackedIm2ColProgramInfoLoader = function (inferenceHandler, x, w, outputShape, attributes) {
    var metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes); } });
};
exports.createPackedIm2ColProgramInfoLoader = createPackedIm2ColProgramInfoLoader;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/im2col.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/im2col.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.calculateIm2ColDims = exports.createIm2ColProgramInfoLoader = void 0;
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var createIm2ColProgramMetadata = function (cacheHint) { return ({
    name: 'Im2Col',
    inputNames: ['X'],
    inputTypes: [types_1.TextureType.unpacked],
    cacheHint: cacheHint,
}); };
var createIm2ColProgramInfo = function (inferenceHandler, metadata, x, w, outputShape, attributes) {
    var xshape = x.dims;
    var wshape = w.dims;
    var rank = outputShape.length;
    var im2colDims = exports.calculateIm2ColDims(xshape, wshape, outputShape, 4);
    var shaderSource = "\n        const int XC = " + xshape[1] + ";\n        const int XH = " + xshape[2] + ";\n        const int XW = " + xshape[3] + ";\n        const int KH = " + attributes.kernelShape[0] + ";\n        const int KW = " + attributes.kernelShape[1] + ";\n        const int dilationH = " + attributes.dilations[0] + ";\n        const int dilationW = " + attributes.dilations[1] + ";\n        const int strideH = " + attributes.strides[0] + ";\n        const int strideW = " + attributes.strides[1] + ";\n        const int padH = " + attributes.pads[0] + ";\n        const int padW = " + attributes.pads[1] + ";\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[" + rank + "]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[" + xshape.length + "];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        ";
    return __assign(__assign({}, metadata), { output: { dims: im2colDims, type: x.type, textureType: types_1.TextureType.packedLastDimension }, shaderSource: shaderSource });
};
var createIm2ColProgramInfoLoader = function (inferenceHandler, x, w, outputShape, attributes) {
    var metadata = createIm2ColProgramMetadata(attributes.cacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes); } });
};
exports.createIm2ColProgramInfoLoader = createIm2ColProgramInfoLoader;
var calculateIm2ColDims = function (inputShape, kernelShape, outputShape, channels) {
    if (channels === void 0) { channels = 4; }
    return [outputShape[0], outputShape[2], outputShape[3],
        Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];
};
exports.calculateIm2ColDims = calculateIm2ColDims;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/image-scaler.ts":
/*!*******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/image-scaler.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseImageScalerAttributes = exports.imageScaler = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var imageScaler = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var output = inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);
    return [output];
};
exports.imageScaler = imageScaler;
var parseImageScalerAttributes = function (node) {
    var scale = node.attributes.getFloat('scale');
    var bias = node.attributes.getFloats('bias');
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ scale: scale, bias: bias });
};
exports.parseImageScalerAttributes = parseImageScalerAttributes;
var imageScalerProgramMetadata = {
    name: 'ImageScaler',
    inputNames: ['X'],
    inputTypes: [types_1.TextureType.unpacked],
};
var createImageScalerProgramInfo = function (handler, metadata, inputs, attributes) {
    var outputShape = inputs[0].dims.slice();
    var rank = outputShape.length;
    var getBiasMethod = createGetBiasMethod(attributes.bias.length);
    var shaderSource = "\n      " + getBiasMethod + "\n      float process(int indices[" + rank + "]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, variables: [
            { name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias },
            { name: 'scale', type: 'float', data: attributes.scale }
        ], shaderSource: shaderSource });
};
var createImageScalerProgramInfoLoader = function (handler, inputs, attributes) {
    var metadata = __assign(__assign({}, imageScalerProgramMetadata), { cacheHint: attributes.cacheKey });
    return __assign(__assign({}, metadata), { get: function () { return createImageScalerProgramInfo(handler, metadata, inputs, attributes); } });
};
var createGetBiasMethod = function (numChannels) {
    var codeLines = ["float getBias(float bias[" + numChannels + "], int channel) {"];
    for (var i = 0; i < numChannels; ++i) {
        if (i === 0) {
            codeLines.push('\t' +
                ("if (channel == " + i + ") { return bias[" + i + "]; }"));
        }
        else if (i === numChannels - 1) {
            codeLines.push('\t' +
                ("else { return bias[" + i + "]; }"));
        }
        else {
            codeLines.push('\t' +
                ("else if (channel == " + i + ") { return bias[" + i + "]; }"));
        }
    }
    codeLines.push('\t' +
        '}');
    return codeLines.join('\n');
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('ImageScaler requires 1 input.');
    }
    if (inputs[0].dims.length !== 4) {
        throw new Error('Invalid input shape.');
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('Invalid input type.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/instance-normalization.ts":
/*!*****************************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/instance-normalization.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseInstanceNormalizationAttributes = exports.instanceNormalization = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var instanceNormalization = function (inferenceHandler, inputs, epsilon) {
    validateInputs(inputs);
    var meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);
    var output = inferenceHandler.run(createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims), [inputs[0], meanAndVariance, inputs[1], inputs[2]]);
    return [output];
};
exports.instanceNormalization = instanceNormalization;
var parseInstanceNormalizationAttributes = function (node) {
    return node.attributes.getFloat('epsilon', 1e-5);
};
exports.parseInstanceNormalizationAttributes = parseInstanceNormalizationAttributes;
var meanAndVarianceProgramMetadata = {
    name: 'InstanceNormalization_MeanAndVariance',
    inputNames: ['X'],
    inputTypes: [types_1.TextureType.unpacked],
};
var createMeanAndVarianceProgramInfo = function (metadata, input) {
    var xDims = input.dims.slice();
    var channel = xDims[1];
    var channelSize = xDims[2] * xDims[3];
    var outputShape = [xDims[0], channel];
    var shaderSource = "\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<" + xDims[2] + "; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<" + xDims[3] + "; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(" + channelSize + ");\n        temp = 0.0;\n        for(int a2=0; a2<" + xDims[2] + "; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<" + xDims[3] + "; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(" + channelSize + ");\n\n        return v;\n      }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: input.type, textureType: types_1.TextureType.packedLastDimension }, shaderSource: shaderSource });
};
var createMeanAndVarianceProgramInfoLoader = function (input) { return (__assign(__assign({}, meanAndVarianceProgramMetadata), { get: function () { return createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input); } })); };
var computeOutputProgramMetadata = {
    name: 'InstanceNormalization_ComputeOutput',
    inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],
    inputTypes: [types_1.TextureType.unpacked, types_1.TextureType.packedLastDimension, types_1.TextureType.unpacked, types_1.TextureType.unpacked],
};
var createComputeOutputProgramInfo = function (inferenceHandler, metadata, input, epsilon, meanAndVarianceShape) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, types_1.TextureType.packedLastDimension), 2), textureWidth = _a[0], textureHeight = _a[1];
    var _b = __read([textureWidth / 4, textureHeight], 2), meanAndVarianceWidth = _b[0], meanAndVarianceHeight = _b[1];
    var shaderSource = "\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, " + meanAndVarianceWidth + ", " + meanAndVarianceHeight + ");\n        return " + glsl.texture2D + "(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }";
    return __assign(__assign({}, metadata), { output: { dims: input.dims, type: input.type, textureType: types_1.TextureType.unpacked }, variables: [{ name: 'epsilon', type: 'float', data: epsilon }], shaderSource: shaderSource });
};
var createComputeOutputProgramInfoLoader = function (inferenceHandler, input, epsilon, meanAndVarianceShape) {
    var metadata = __assign(__assign({}, computeOutputProgramMetadata), { cacheHint: "" + epsilon });
    return __assign(__assign({}, metadata), { get: function () { return createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape); } });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 3) {
        throw new Error('InstanceNormalization requires 3 inputs.');
    }
    var X = inputs[0];
    var scale = inputs[1];
    var B = inputs[2];
    // input should at least have three dimensions - N,C,dim1,...,dimn
    // other inputs can have only one dimensions
    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {
        throw new Error('Invalid input shape.');
    }
    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {
        throw new Error('Input shapes are mismatched.');
    }
    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||
        (B.type !== 'float32' && B.type !== 'float64')) {
        throw new Error('Invalid input type.');
    }
    if (inputs[0].dims.length !== 4) {
        throw new Error('Only support 4-D input shape.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/matmul-pack.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/matmul-pack.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPackedMatmulProgramInfoLoader = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var util_2 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var fuse_utils_1 = __webpack_require__(/*! ./fuse-utils */ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts");
var matmul_1 = __webpack_require__(/*! ./matmul */ "./lib/onnxjs/backends/webgl/ops/matmul.ts");
var createPackedMatmulProgramMetadata = function (hasBias, cacheHint) { return ({
    name: 'MatMul (packed)',
    inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],
    inputTypes: hasBias ? [types_1.TextureType.packed, types_1.TextureType.packed, types_1.TextureType.packed] :
        [types_1.TextureType.packed, types_1.TextureType.packed],
    cacheHint: cacheHint
}); };
var createPackedMatmulProgramInfo = function (inferenceHandler, metadata, inputs, activationAttributes) {
    var hasBias = inputs.length > 2;
    var processBias = hasBias ? 'value += getBiasForMatmul();' : '';
    var aShape = inputs[0].dims;
    var bShape = inputs[1].dims;
    var outputShape = util_1.BroadcastUtil.calcShape(aShape, bShape, true);
    var isBroadcast = !util_2.ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);
    if (!outputShape) {
        throw new Error('Can\'t use matmul on the given tensors');
    }
    var sharedDim = aShape[aShape.length - 1];
    var sharedDimIndex = Math.ceil(sharedDim / 2);
    var aRank = aShape.length;
    var bRank = bShape.length;
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var coordsDataType = utils_1.getCoordsDataType(outputShape.length);
    var outRank = outputShape.length;
    var allGlChannels = utils_1.getGlChannels();
    var _a = fuse_utils_1.getActicationSnippet(activationAttributes), activationFunction = _a.activationFunction, applyActivation = _a.applyActivation;
    var getBiasForMatmulSnippet = hasBias ? "" + matmul_1.getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true) : '';
    var getBcastedSamplerForMatmulSnippet = isBroadcast ? "" + getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape) : '';
    var getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : "getA(" + getA(allGlChannels, aRank) + ")";
    var getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : "getB(" + getB(allGlChannels, bRank) + ")";
    var getOutputCoordsSnippet = isBroadcast ? '' : coordsDataType + " rc =\n          getOutputCoords(); int lastDim = rc." + allGlChannels[outRank - 1] + "; rc." + allGlChannels[outRank - 1] + " =\n          rc." + allGlChannels[outRank - 2] + "; rc." + allGlChannels[outRank - 2] + " = lastDim;\n      ";
    var shaderSource = "\n            " + getBcastedSamplerForMatmulSnippet + "\n            " + getBiasForMatmulSnippet + "\n            " + activationFunction + "\n            void main() {\n              " + getOutputCoordsSnippet + "\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < " + sharedDimIndex + "; i++) {\n                vec4 a = " + getSamplerAInLoopSnippet + ";\n                vec4 b = " + getSamplerBInLoopSnippet + ";\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              " + processBias + "\n              " + applyActivation + "\n              " + glsl.output + " = value;\n            }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.packed }, shaderSource: shaderSource, hasMain: true });
};
var createPackedMatmulProgramInfoLoader = function (inferenceHandler, inputs, activationAttributes) {
    var metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes); } });
};
exports.createPackedMatmulProgramInfoLoader = createPackedMatmulProgramInfoLoader;
function getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outShape) {
    var unpackedACoordsSnippet = [];
    var unpackedBCoordsSnippet = [];
    var inAShape = inputs[0].dims;
    var inBShape = inputs[1].dims;
    var inARank = inAShape.length;
    var inBRank = inBShape.length;
    var outRank = outShape.length;
    var rankADiff = outRank - inARank;
    var rankBDiff = outRank - inBRank;
    unpackedACoordsSnippet = inAShape.map(function (s, i) { return "coords." + allGlChannels[i + rankADiff]; });
    unpackedACoordsSnippet[inARank - 1] = 'i*2';
    unpackedACoordsSnippet.join(', ');
    unpackedBCoordsSnippet = inBShape.map(function (s, i) { return "coords." + allGlChannels[i + rankBDiff]; });
    unpackedBCoordsSnippet[inBRank - 2] = 'i*2';
    unpackedBCoordsSnippet.join(', ');
    var broadcastADims = util_1.BroadcastUtil.getBroadcastDims(inAShape, outShape);
    var broadcastBDims = util_1.BroadcastUtil.getBroadcastDims(inBShape, outShape);
    var coordsASnippet = broadcastADims.map(function (d) { return "coords." + allGlChannels[d + rankADiff] + " = 0;"; }).join('\n');
    var coordsBSnippet = broadcastBDims.map(function (d) { return "coords." + allGlChannels[d + rankBDiff] + " = 0;"; }).join('\n');
    var swapDimSnippet = "int lastDim = coords." + allGlChannels[outRank - 1] + ";\n  coords." + allGlChannels[outRank - 1] + " = coords." + allGlChannels[outRank - 2] + ";\n  coords." + allGlChannels[outRank - 2] + " = lastDim;";
    var getBcastSamplerMatmulSource = "\nvec4 getAAtOutCoordsMatmul(int i) {\n  " + coordsDataType + " coords = getOutputCoords();\n  " + swapDimSnippet + "\n  " + coordsASnippet + "\n  vec4 outputValue = getA(" + unpackedACoordsSnippet + ");\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  " + coordsDataType + " coords = getOutputCoords();\n  " + swapDimSnippet + "\n  " + coordsBSnippet + "\n  vec4 outputValue = getB(" + unpackedBCoordsSnippet + ");\n  return outputValue;\n}";
    return getBcastSamplerMatmulSource;
}
function getA(allGlChannels, rank) {
    var res = '';
    for (var i = 0; i < rank - 2; i++) {
        res += "rc." + allGlChannels[i] + ", ";
    }
    res += "rc." + allGlChannels[rank - 2] + ", " +
        'i*2';
    return res;
}
function getB(allGlChannels, rank) {
    var res = '';
    for (var i = 0; i < rank - 2; i++) {
        res += "rc." + allGlChannels[i] + ", ";
    }
    res += 'i*2, ' +
        ("rc." + allGlChannels[rank - 1]);
    return res;
}


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/matmul.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/matmul.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBiasForMatmul = exports.createMatmulProgramInfoLoader = exports.parseMatMulAttributes = exports.matMul = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var fuse_utils_1 = __webpack_require__(/*! ./fuse-utils */ "./lib/onnxjs/backends/webgl/ops/fuse-utils.ts");
var matmul_pack_1 = __webpack_require__(/*! ./matmul-pack */ "./lib/onnxjs/backends/webgl/ops/matmul-pack.ts");
var matMul = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    if (inferenceHandler.session.pack) {
        return [inferenceHandler.run(matmul_pack_1.createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];
    }
    else {
        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];
    }
};
exports.matMul = matMul;
var parseMatMulAttributes = function (node) { return fuse_utils_1.parseInternalActivationAttributes(node.attributes); };
exports.parseMatMulAttributes = parseMatMulAttributes;
var createMatmulProgramMetadata = function (hasBias, cacheHint) { return ({
    name: 'MatMul',
    inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],
    inputTypes: hasBias ? [types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked] :
        [types_1.TextureType.unpacked, types_1.TextureType.unpacked],
    cacheHint: cacheHint
}); };
function createMatmulProgramInfo(metadata, inputs, activationAttributes) {
    var aShape = inputs[0].dims;
    var bShape = inputs[1].dims;
    var outputShape = util_1.BroadcastUtil.calcShape(aShape, bShape, true);
    if (!outputShape) {
        throw new Error('Can\'t use matmul on the given tensors');
    }
    var coordsDataType = utils_1.getCoordsDataType(outputShape.length);
    var allGlChannels = utils_1.getGlChannels();
    var _a = fuse_utils_1.getActicationSnippet(activationAttributes), activationFunction = _a.activationFunction, applyActivation = _a.applyActivation;
    var hasBias = inputs.length > 2;
    var processBias = hasBias ? 'value += getBiasForMatmul();' : '';
    var getBiasForMatmulSnippet = hasBias ? "" + getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false) : '';
    var rank = outputShape.length;
    var arank = aShape.length;
    var brank = bShape.length;
    var sharedDim = aShape[aShape.length - 1];
    var shaderSource = "\n    " + activationFunction + "\n    " + getBiasForMatmulSnippet + "\n    float process(int indices[" + rank + "]) {\n        int a[" + arank + "];\n        int b[" + brank + "];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<" + sharedDim + "; ++k) {\n            a[" + (arank - 1) + "] = k;\n            b[" + (brank - 2) + "] = k;\n            value += _A(a) * _B(b);\n        }\n        " + processBias + "\n        " + applyActivation + "\n        return value;\n    }";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
}
function createMatmulProgramInfoLoader(inputs, activationAttributes) {
    var metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);
    return __assign(__assign({}, metadata), { get: function () { return createMatmulProgramInfo(metadata, inputs, activationAttributes); } });
}
exports.createMatmulProgramInfoLoader = createMatmulProgramInfoLoader;
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 2) {
        throw new Error('MatMul requires 2 inputs.');
    }
    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {
        throw new Error('shared dimension does not match.');
    }
    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||
        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {
        throw new Error('inputs should be float type');
    }
    if (inputs[0].type !== inputs[1].type) {
        throw new Error('inputs types should match');
    }
};
function getBiasForMatmul(coordsDataType, allGlChannels, inShape, outShape, isPacked) {
    var unpackedCoordsSnippet = '';
    var inRank = inShape.length;
    var outRank = outShape.length;
    var rankDiff = outRank - inRank;
    if (outRank < 2 && inRank > 0) {
        unpackedCoordsSnippet = 'coords';
    }
    else {
        unpackedCoordsSnippet = inShape.map(function (s, i) { return "coords." + allGlChannels[i + rankDiff]; }).join(', ');
    }
    var broadcastDims = util_1.BroadcastUtil.getBroadcastDims(inShape, outShape);
    var coordsSnippet = broadcastDims.map(function (d) { return "coords." + allGlChannels[d + rankDiff] + " = 0;"; }).join('\n');
    var inSize = util_1.ShapeUtil.size(inShape);
    var isInputScalar = inSize === 1;
    var output = 'vec4(outputValue.xx, outputValue.yy)';
    if (isInputScalar) {
        output = 'vec4(outputValue.x)';
    }
    var getBiasForMatmulSource = isPacked ? "\nvec4 getBiasForMatmul() {\n  " + coordsDataType + " coords = getOutputCoords();\n  " + coordsSnippet + "\n  vec4 outputValue = getBias(" + unpackedCoordsSnippet + ");\n  return " + output + ";\n}" :
        "\nfloat getBiasForMatmul() {\n  " + coordsDataType + " coords = getOutputCoords();\n  " + coordsSnippet + "\n  return getBias(coords.x);\n}";
    return getBiasForMatmulSource;
}
exports.getBiasForMatmul = getBiasForMatmul;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/pack.ts":
/*!***********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/pack.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createPackProgramInfoLoader = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var packProgramMetadata = {
    name: 'pack',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpackedReversed]
};
var createPackProgramInfo = function (handler, input) {
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    var inputShape = input.dims;
    var inputRank = inputShape.length;
    // createTextureLayoutFromShape won't change output rank. Need to verify by running tests
    var outputRank = input.dims.length;
    var coordsDataType = utils_1.getCoordsDataType(outputRank);
    var channels = packing_utils_1.getChannels('rc', outputRank);
    var setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);
    var reversedInputWH;
    if (inputRank === 0) {
        reversedInputWH = [1, 1];
    }
    else if (inputRank === 1) {
        reversedInputWH = [inputShape[0], 1];
    }
    else {
        reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];
    }
    var outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);
    var output = getOutput(inputShape, channels);
    var shaderSource = "\n        void main() {\n          " + coordsDataType + " rc = getOutputCoords();\n\n          if(" + outOfBoundsCondition + ") {\n            " + glsl.output + " = vec4(0);\n          } else {\n            " + setup + "\n\n            " + glsl.output + " = vec4(" + output + ");\n          }\n        }\n      ";
    return __assign(__assign({}, packProgramMetadata), { hasMain: true, output: { dims: input.dims, type: input.type, textureType: types_1.TextureType.packed }, shaderSource: shaderSource });
};
var createPackProgramInfoLoader = function (handler, input) {
    return (__assign(__assign({}, packProgramMetadata), { get: function () { return createPackProgramInfo(handler, input); } }));
};
exports.createPackProgramInfoLoader = createPackProgramInfoLoader;
/**
 * check output coordinate location and return false if it is outside input's width/height boundary
 */
function getOutOfBoundsCondition(rank, shape, dims) {
    if (rank === 0) {
        return 'false';
    }
    if (rank === 1) {
        return "rc > " + shape[0];
    }
    var cond = '';
    for (var i = rank - 2; i < rank; i++) {
        cond += dims[i] + " >= " + shape[i - rank + 2];
        if (i < rank - 1) {
            cond += '||';
        }
    }
    return cond;
}
/**
 * code snippet to sample input texture with output coordiantes
 */
function getOutput(shape, dims) {
    var rank = shape.length;
    if (rank === 0) {
        return 'getA(), 0, 0, 0';
    }
    if (rank === 1) {
        return "getA(rc),\n            rc + 1 >= " + shape[0] + " ? 0. : getA(rc + 1),\n            0, 0";
    }
    var coord00 = 'r, c';
    var coord01 = 'r, cp1';
    var coord10 = 'rp1, c';
    var coord11 = 'rp1, cp1';
    var D = '';
    if (rank > 2) {
        for (var i = 0; i < rank - 2; ++i) {
            D = D + (dims[i] + ",");
        }
    }
    return "getA(" + D + coord00 + "),\n          rEdge ? 0. : getA(" + D + coord10 + "),\n          cEdge ? 0. : getA(" + D + coord01 + "),\n          rEdge || cEdge ? 0. : getA(" + D + coord11 + ")";
}
/**
 * code snippet to setup 4 coordinates and edge conditions
 */
function getSetup(rank, dims, rows, cols) {
    if (rank === 0 || rank === 1) {
        return '';
    }
    // rank >= 2 for width+height pack.
    else {
        var setup_1 = "\n    int r = " + dims[rank - 2] + ";\n    int c = " + dims[rank - 1] + ";\n    int rp1 = " + dims[rank - 2] + " + 1;\n    int cp1 = " + dims[rank - 1] + " + 1;\n    bool rEdge = rp1 >= " + cols + ";\n    bool cEdge = cp1 >= " + rows + ";\n    ";
        return setup_1;
    }
}


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/packing-utils.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.unpackFromChannel = exports.getChannels = exports.getVecChannels = void 0;
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
function getVecChannels(name, rank) {
    return utils_1.getGlChannels(rank).map(function (d) { return name + "." + d; });
}
exports.getVecChannels = getVecChannels;
function getChannels(name, rank) {
    if (rank === 1) {
        return [name];
    }
    return getVecChannels(name, rank);
}
exports.getChannels = getChannels;
function unpackFromChannel() {
    return "\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  ";
}
exports.unpackFromChannel = unpackFromChannel;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/pad.ts":
/*!**********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/pad.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parsePadAttributes = exports.pad = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var padProgramMetadata = {
    name: 'Pad',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpacked],
};
var pad = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var output = inferenceHandler.run(__assign(__assign({}, padProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createPadProgramInfo(inferenceHandler, inputs, attributes); } }), inputs);
    return [output];
};
exports.pad = pad;
var parsePadAttributes = function (node) {
    var mode = node.attributes.getString('mode', 'constant');
    var value = node.attributes.getFloat('value', 0.0);
    var pads = node.attributes.getInts('pads');
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ mode: mode, value: value, pads: pads });
};
exports.parsePadAttributes = parsePadAttributes;
var createPadProgramInfo = function (inferenceHandler, inputs, attributes) {
    var outputShape = util_1.ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);
    var rank = outputShape.length;
    var padFunction = getPadFunction(inferenceHandler, inputs[0], attributes);
    var shaderSource = "\n      " + padFunction + "\n      float process(int[" + rank + "] indices) {\n          return padA(indices);\n      }";
    return {
        name: 'Pad',
        inputNames: ['A'],
        inputTypes: [types_1.TextureType.unpacked],
        output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked },
        shaderSource: shaderSource
    };
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Pad requires 1 input');
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('Invalid input type.');
    }
};
var getPadFunction = function (inferenceHandler, input, attributes) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(input.dims, types_1.TextureType.unpacked), 2), width = _a[0], height = _a[1];
    var strides = util_1.ShapeUtil.computeStrides(input.dims);
    switch (attributes.mode) {
        case 'constant':
            return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);
        case 'reflect':
            return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);
        case 'edge':
            return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);
        default:
            throw new Error('Invalid mode');
    }
};
var getPadConstant = function (glsl, shape, strides, width, height, pads, value) {
    var rank = shape.length;
    var block = '';
    for (var i = rank - 1; i >= 0; --i) {
        block += "\n        k = m[" + i + "] - " + pads[i] + ";\n        if (k < 0)  return constant;\n        if (k >= " + shape[i] + ") return constant;\n        offset += k * " + strides[i] + ";\n        ";
    }
    return "\n      float padA(int m[" + rank + "]) {\n        const float constant = float(" + value + ");\n        int offset = 0;\n        int k = 0;\n        " + block + "\n        vec2 coords = offsetToCoords(offset, " + width + ", " + height + ");\n        float value = getColorAsFloat(" + glsl.texture2D + "(A, coords));\n        return value;\n      }\n      ";
};
var getPadReflect = function (glsl, shape, strides, width, height, pads) {
    var rank = shape.length;
    var block = '';
    for (var i = rank - 1; i >= 0; --i) {
        block += "\n        k = m[" + i + "] - " + pads[i] + ";\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = " + 2 * (shape[i] - 1) + ";\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= " + shape[i] + ") { k = _2n_1 - k; }\n        }\n        offset += k * " + strides[i] + ";\n        ";
    }
    return "\n      float padA(int m[" + rank + "]) {\n        int offset = 0;\n        int k = 0;\n        " + block + "\n        vec2 coords = offsetToCoords(offset, " + width + ", " + height + ");\n        float value = getColorAsFloat(" + glsl.texture2D + "(A, coords));\n        return value;\n      }\n      ";
};
var getPadEdge = function (glsl, shape, strides, width, height, pads) {
    var rank = shape.length;
    var block = '';
    for (var i = rank - 1; i >= 0; --i) {
        block += "\n        k = m[" + i + "] - " + pads[i] + ";\n        if (k < 0)  k = 0;\n        if (k >= " + shape[i] + ") k = " + (shape[i] - 1) + ";\n        offset += k * " + strides[i] + ";\n      ";
    }
    return "\n      float padA(int m[" + rank + "]) {\n        int offset = 0;\n        int k = 0;\n        " + block + "\n        vec2 coords = offsetToCoords(offset, " + width + ", " + height + ");\n        float value = getColorAsFloat(" + glsl.texture2D + "(A, coords));\n        return value;\n      }\n      ";
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/pool.ts":
/*!***********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/pool.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.globalMaxPool = exports.parseMaxPoolAttributes = exports.maxPool = exports.parseGlobalAveragePoolAttributes = exports.globalAveragePool = exports.parseAveragePoolAttributes = exports.averagePool = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var averagePool = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var metadata = { name: 'AveragePool', inputNames: ['X'], inputTypes: [types_1.TextureType.unpacked], cacheHint: attributes.cacheKey };
    var output = inferenceHandler.run(__assign(__assign({}, metadata), { get: function () { return createAveragePoolProgramInfo(inputs, metadata, false, attributes); } }), inputs);
    return [output];
};
exports.averagePool = averagePool;
var parseAveragePoolAttributes = function (node) {
    var autoPad = node.attributes.getString('auto_pad', 'NOTSET');
    var ceilMode = node.attributes.getInt('ceil_mode', 0);
    var countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);
    var kernelShape = node.attributes.getInts('kernel_shape');
    var strides = node.attributes.getInts('strides', []);
    var pads = node.attributes.getInts('pads', []);
    // TODO: support attribute 'ceil_mode'
    if (ceilMode !== 0) {
        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');
    }
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ autoPad: autoPad, ceilMode: ceilMode, countIncludePad: countIncludePad, kernelShape: kernelShape, strides: strides, pads: pads });
};
exports.parseAveragePoolAttributes = parseAveragePoolAttributes;
var createAveragePoolProgramInfo = function (inputs, metadata, isGlobalOperator, attributes) {
    var inputShape = inputs[0].dims.slice();
    util_1.PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, attributes.kernelShape, attributes.strides, attributes.pads);
    var outputShape = util_1.PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, attributes.strides, attributes.kernelShape, attributes.pads, attributes.autoPad);
    var kernelSize = util_1.ShapeUtil.size(attributes.kernelShape);
    var op1 = 'value += _X(x);';
    var op2 = '';
    if (attributes.countIncludePad) {
        op2 += "value /= float(" + kernelSize + ");";
    }
    else {
        op2 += "value /= float(" + kernelSize + " - pad);";
    }
    var poolingCode = generatePoolingCode(inputs[0].dims, attributes, op1, op2, '0.0');
    var shaderSource = "\n        " + poolingCode + "\n      ";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var globalAveragePool = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var metadata = {
        name: 'GlobalAveragePool',
        inputNames: ['X'],
        inputTypes: [types_1.TextureType.unpacked],
        cacheHint: "" + attributes.countIncludePad
    };
    var output = inferenceHandler.run(__assign(__assign({}, metadata), { get: function () { return createAveragePoolProgramInfo(inputs, metadata, true, attributes); } }), inputs);
    return [output];
};
exports.globalAveragePool = globalAveragePool;
var parseGlobalAveragePoolAttributes = function (node) {
    var countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ autoPad: '', ceilMode: 0, countIncludePad: countIncludePad, kernelShape: [], strides: [], pads: [] });
};
exports.parseGlobalAveragePoolAttributes = parseGlobalAveragePoolAttributes;
var maxPool = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var metadata = { name: 'MaxPool', inputNames: ['X'], inputTypes: [types_1.TextureType.unpacked], cacheHint: attributes.cacheKey };
    var output = inferenceHandler.run(__assign(__assign({}, metadata), { get: function () { return createMaxPoolProgramInfo(inputs, metadata, false, attributes); } }), inputs);
    return [output];
};
exports.maxPool = maxPool;
var parseMaxPoolAttributes = function (node) {
    var autoPad = node.attributes.getString('auto_pad', 'NOTSET');
    var ceilMode = node.attributes.getInt('ceil_mode', 0);
    var kernelShape = node.attributes.getInts('kernel_shape');
    var strides = node.attributes.getInts('strides', []);
    var pads = node.attributes.getInts('pads', []);
    var storageOrder = node.attributes.getInt('storage_order', 0);
    // TODO: support attribute 'ceil_mode' and 'storage_order'
    if (storageOrder !== 0) {
        throw new Error('column major storage order is not yet supported for MaxPool');
    }
    if (ceilMode !== 0) {
        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');
    }
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ autoPad: autoPad, ceilMode: ceilMode, countIncludePad: false, kernelShape: kernelShape, strides: strides, pads: pads, storageOrder: storageOrder });
};
exports.parseMaxPoolAttributes = parseMaxPoolAttributes;
var createMaxPoolProgramInfo = function (inputs, metadata, isGlobalOperator, attributes) {
    var inputShape = inputs[0].dims.slice();
    util_1.PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, attributes.kernelShape, attributes.strides, attributes.pads);
    var outputShape = util_1.PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, attributes.strides, attributes.kernelShape, attributes.pads, attributes.autoPad);
    var op1 = "\n      value = max(_X(x), value);\n    ";
    var op2 = '';
    var poolingCode = generatePoolingCode(inputShape, attributes, op1, op2, '-1e5');
    var shaderSource = "\n      " + poolingCode + "\n    ";
    return __assign(__assign({}, metadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var globalMaxPoolAttributes = {
    autoPad: '',
    ceilMode: 0,
    countIncludePad: false,
    kernelShape: [],
    strides: [],
    pads: [],
    storageOrder: 0,
    cacheKey: ''
};
var globalMaxPoolMetadata = {
    name: 'GlobalMaxPool',
    inputNames: ['X'],
    inputTypes: [types_1.TextureType.unpacked]
};
var globalMaxPool = function (inferenceHandler, inputs) {
    validateInputs(inputs);
    var output = inferenceHandler.run(__assign(__assign({}, globalMaxPoolMetadata), { get: function () { return createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes); } }), inputs);
    return [output];
};
exports.globalMaxPool = globalMaxPool;
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Pool ops requires 1 input.');
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('Invalid input type.');
    }
};
var generatePoolingCode = function (inputDims, attributes, op1, op2, start) {
    var rank = inputDims.length;
    if (attributes.kernelShape.length <= 2) {
        var kw = attributes.kernelShape[attributes.kernelShape.length - 1];
        var sw = attributes.strides[attributes.strides.length - 1];
        var pwStart = attributes.pads[attributes.pads.length / 2 - 1];
        var pwEnd = attributes.pads[attributes.pads.length - 1];
        var dimW = inputDims[rank - 1];
        var codeW = '';
        var codeH = '';
        var codeHEnd = '';
        if (pwStart + pwEnd !== 0) {
            codeW = "\n          for (int i = 0; i < " + kw + "; i++) {\n            x[" + rank + " - 1] = indices[" + rank + " - 1] * " + sw + " - " + pwStart + " + i;\n            if (x[" + rank + " - 1] < 0 || x[" + rank + " - 1] >= " + dimW + ") {\n              pad++;\n              continue;\n            }\n            " + op1 + "\n          }";
        }
        else {
            codeW = "\n          for (int i = 0; i < " + kw + "; i++) {\n            x[" + rank + " - 1] = indices[" + rank + " - 1] * " + sw + " - " + pwStart + " + i;\n            " + op1 + "\n          }";
        }
        if (attributes.kernelShape.length === 2) {
            var kh = attributes.kernelShape[attributes.kernelShape.length - 2];
            var sh = attributes.strides[attributes.strides.length - 2];
            var phStart = attributes.pads[attributes.pads.length / 2 - 2];
            var phEnd = attributes.pads[attributes.pads.length - 2];
            var dimH = inputDims[rank - 2];
            if (phStart + phEnd !== 0) {
                codeH = "\n            for (int j = 0; j < " + kh + "; j++) {\n              x[" + rank + " - 2] = indices[" + rank + " - 2] * " + sh + " - " + phStart + " + j;\n              if (x[" + rank + " - 2] < 0 || x[" + rank + " - 2] >= " + dimH + ") {\n                pad+= " + kw + ";\n                continue;\n              }\n          ";
            }
            else {
                codeH = "\n            for (int j = 0; j < " + kh + "; j++) {\n              x[" + rank + " - 2] = indices[" + rank + " - 2] * " + sh + " - " + phStart + " + j;\n            ";
            }
            codeHEnd = "\n          }\n        ";
        }
        var poolingCode = "\n        float process(int indices[" + rank + "]) {\n          int x[" + rank + "];\n          copyVec(indices, x);\n\n          float value = " + start + ";\n          int pad = 0;\n          " + codeH + "\n          " + codeW + "\n          " + codeHEnd + "\n          " + op2 + "\n          return value;\n        }\n      ";
        return poolingCode;
    }
    else {
        var kernelSize = util_1.ShapeUtil.size(attributes.kernelShape);
        var kernelStrides = util_1.ShapeUtil.computeStrides(attributes.kernelShape);
        var stridesRank = kernelStrides.length;
        var padsRank = attributes.pads.length;
        var offsetToIndicesFunction = offsetToIndices(stridesRank);
        var copyInputDims = copyArray(inputDims, 'inputDims');
        var copyPads = copyArray(attributes.pads, 'pads');
        var copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');
        var copyStrides = copyArray(attributes.strides, 'strides');
        var hasPads = attributes.pads.reduce(function (sum, cur) { return sum + cur; });
        var padCode = '';
        if (hasPads) {
            padCode = "\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            " + op1 + "\n          }";
        }
        else {
            padCode = "\n          }\n          " + op1 + "\n        ";
        }
        var poolingCode = "\n        " + offsetToIndicesFunction + "\n        float process(int indices[" + rank + "]) {\n          int x[" + rank + "];\n          copyVec(indices, x);\n          int offset[" + stridesRank + "];\n          int pads[" + padsRank + "];\n          int inputDims[" + rank + "];\n          int kernelStrides[" + stridesRank + "];\n          int strides[" + stridesRank + "];\n          " + copyPads + "\n          " + copyInputDims + "\n          " + copyStrides + "\n          " + copyKernelStrides + "\n\n          float value = " + start + ";\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < " + kernelSize + "; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = " + rank + " - " + stridesRank + "; j < " + rank + "; j++) {\n              x[j] = indices[j] * strides[j - " + rank + " + " + stridesRank + "]\n                + offset[j - " + rank + " + " + stridesRank + "] - pads[j - 2];\n              " + padCode + "\n          }\n          " + op2 + "\n\n          return value;\n        }\n      ";
        return poolingCode;
    }
};
var copyArray = function (array, arrayName) {
    var block = '';
    for (var i = 0; i < array.length; i++) {
        block += "\n      " + arrayName + "[" + i + "] = " + array[i] + ";\n    ";
    }
    return block;
};
var offsetToIndices = function (rank) { return "\n  void offsetToIndices(int offset, int[" + rank + "] strides, out int[" + rank + "] indices) {\n    if (" + rank + " == 0) {\n      return;\n    }\n    for (int i = 0; i < " + rank + " - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[" + rank + " - 1] = offset;\n  }"; };


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/reduce.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/reduce.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reduceLogSumSquare = exports.reduceLogSum = exports.reduceProd = exports.reduceMin = exports.reduceMax = exports.reduceMean = exports.reduceSum = exports.parseReduceAttributes = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var operators_1 = __webpack_require__(/*! ../../../operators */ "./lib/onnxjs/operators.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var reduce = function (inferenceHandler, inputs, attributes, name, reduceOp) {
    validateInputs(inputs);
    var reduceProgramMetadata = {
        name: name,
        inputNames: ['A'],
        inputTypes: [types_1.TextureType.unpacked],
    };
    var output = inferenceHandler.run(__assign(__assign({}, reduceProgramMetadata), { cacheHint: attributes.cacheKey, get: function () {
            return createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata);
        } }), inputs);
    return [output];
};
var parseReduceAttributes = function (node) {
    var axes = node.attributes.getInts('axes', []);
    var keepDims = node.attributes.getInt('keepdims', 1) === 1;
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ axes: axes, keepDims: keepDims });
};
exports.parseReduceAttributes = parseReduceAttributes;
var createReduceProgramInfo = function (handler, inputs, attributes, name, reduceOp, reduceProgramMetadata) {
    var outputShape = [];
    var iRank = inputs[0].dims.length || 1;
    var idxCopy = []; // copy output indexes to input indexes
    var axes = util_1.ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);
    var ops = reduceOp(inputs, axes);
    var reduceOps = ops[1];
    for (var k = 0; k < inputs[0].dims.length; k++) {
        // if this axis is reduced
        if (axes.indexOf(k) >= 0 || axes.length === 0) {
            if (attributes.keepDims) {
                outputShape.push(1);
            } // else { remove the axis from outputShape; }
            // loop over the d-th axis
            reduceOps = "\n          for(int j" + k + " = 0; j" + k + " < " + inputs[0].dims[k] + "; j" + k + "++) {\n            inputIdx[" + k + "] = j" + k + ";\n            " + reduceOps + "\n          }";
        }
        else {
            idxCopy.push("inputIdx[" + k + "] = outputIdx[" + outputShape.length + "];");
            outputShape.push(inputs[0].dims[k]);
        }
    }
    var oRank = outputShape.length || 1;
    var shaderSource = "\n      float process(int outputIdx[" + oRank + "]) {\n        float value;                 // final result\n        int inputIdx[" + iRank + "];      // addressing input data\n        " + idxCopy.join('\n') + "\n        " + ops[0] + "       // init ops for reduce max/min\n        " + reduceOps + "\n        " + ops[2] + "       // final computation for reduce mean\n        return value;\n      }";
    return __assign(__assign({}, reduceProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Reduce op requires 1 input.');
    }
    if (operators_1.NUMBER_TYPES.indexOf(inputs[0].type) === -1) {
        throw new Error('Invalid input type.');
    }
};
var reduceSum = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function () { return ['value = 0.0;', 'value += _A(inputIdx);', '']; };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);
};
exports.reduceSum = reduceSum;
var reduceMean = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function (inputs, axes) {
        var size = 1.0;
        for (var k = 0; k < inputs[0].dims.length; k++) {
            if (axes.indexOf(k) >= 0 || axes.length === 0) {
                size *= inputs[0].dims[k];
            }
        }
        return ['value = 0.0;', 'value += _A(inputIdx);', "value /= " + size + ".;"]; // ensure real number with `.`
    };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);
};
exports.reduceMean = reduceMean;
var reduceMax = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function (inputs, axes) {
        var idxZero = [];
        for (var k = 0; k < inputs[0].dims.length; k++) {
            if (axes.indexOf(k) >= 0 || axes.length === 0) {
                idxZero.push("inputIdx[" + k + "] = 0;"); // first element
            }
        }
        return [idxZero.join('\n') + "\nvalue = _A(inputIdx);", 'value = max(value, _A(inputIdx));', ''];
    };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);
};
exports.reduceMax = reduceMax;
var reduceMin = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function (inputs, axes) {
        var idxZero = [];
        for (var k = 0; k < inputs[0].dims.length; k++) {
            if (axes.indexOf(k) >= 0 || axes.length === 0) {
                idxZero.push("inputIdx[" + k + "] = 0;"); // first element
            }
        }
        return [idxZero.join('\n') + "\nvalue = _A(inputIdx);", 'value = min(value, _A(inputIdx));', ''];
    };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);
};
exports.reduceMin = reduceMin;
var reduceProd = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function () { return ['value = 1.0;', 'value *= _A(inputIdx);', '']; };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);
};
exports.reduceProd = reduceProd;
var reduceLogSum = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function () { return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);']; };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);
};
exports.reduceLogSum = reduceLogSum;
var reduceLogSumSquare = function (inferenceHandler, inputs, attributes) {
    var reduceOp = function () { return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', '']; };
    return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);
};
exports.reduceLogSumSquare = reduceLogSumSquare;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/reshape-packed.ts":
/*!*********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/reshape-packed.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isReshapeCheap = exports.processDims3D = exports.createPackedReshape3DProgramInfoLoader = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var createPackedReshape3DProgramMetadata = function (outputShape3D) {
    return ({ name: 'Reshape (packed)', inputTypes: [types_1.TextureType.packed], inputNames: ['A'], cacheHint: "" + outputShape3D });
};
var createPackedReshape3DProgramInfo = function (handler, input3D, metadata, outputShape3D) {
    var inputShape3D = input3D.dims;
    var squeezedOutputShape = outputShape3D;
    var mainLoop = '';
    for (var i = 0; i < 4; i++) {
        var outputCoords = '';
        switch (i) {
            case 0:
                outputCoords = 'outputCoords = rc;';
                break;
            case 1:
                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';
                break;
            case 2:
                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';
                break;
            case 3:
                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';
                break;
            default:
                throw new Error();
        }
        mainLoop += "\n        " + outputCoords + "\n        " + (i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : '') + "\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + i + "] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        " + (i > 0 ? '}' : '') + "\n      ";
    }
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    var shaderSource = "\n      " + getReshapedInputCoords(inputShape3D) + "\n      " + getFlattenedIndexFrom3D(squeezedOutputShape) + "\n      " + packing_utils_1.unpackFromChannel() + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = " + squeezedOutputShape[2] + ";\n        int cols = " + squeezedOutputShape[1] + ";\n\n        " + mainLoop + "\n        " + glsl.output + " = result;\n      }\n    ";
    return __assign(__assign({}, metadata), { output: { dims: squeezedOutputShape, type: input3D.type, textureType: types_1.TextureType.packed }, shaderSource: shaderSource, hasMain: true });
};
var createPackedReshape3DProgramInfoLoader = function (handler, input3D, outputShape3D) {
    var metadata = createPackedReshape3DProgramMetadata(outputShape3D);
    return __assign(__assign({}, metadata), { get: function () { return createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D); } });
};
exports.createPackedReshape3DProgramInfoLoader = createPackedReshape3DProgramInfoLoader;
function processDims3D(shape) {
    if (shape.length === 0) {
        return [1, 1, 1];
    }
    // TODO: squeeze other shapes to 2D case
    var batch = 1;
    for (var i = 0; i < shape.length - 2; ++i) {
        batch *= shape[i];
    }
    return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];
}
exports.processDims3D = processDims3D;
// For packed reshape, we need to re-arrange texel data for output shape.
// Our pack is designed to pack a 2x2 tile in last h and w dimension, so
// for the reshaped new tensor, we just need to re-arrange the last h and
// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we
// first convert it to 3D by collapsing other dimension to batch dim, then
// process with the last two dimensions.
// Note: we only need the shape tensor to calculate output shape, so the
// content in shape tensor is never uploaded to GPU. It is always kept in CPU.
// TODO: optimize the algorithm -- in some cases, if the last two dims are
// the same between input shape and output shape, the packed reshape can be
// treated as no-op.
function isReshapeCheap(dims, reshapedDims) {
    var isCheapReshape = false;
    if (dims.length === 0 || reshapedDims.length === 0) { // scalar
        isCheapReshape = true;
    }
    else if (dims.length < 2 || reshapedDims.length < 2) { // 1D
        isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];
    }
    else { // 2D +
        isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&
            dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];
    }
    return isCheapReshape;
}
exports.isReshapeCheap = isReshapeCheap;
function getReshapedInputCoords(shape) {
    var strides = util_1.ShapeUtil.computeStrides(shape);
    var coords = ['b', 'r', 'c'];
    var index = 'index';
    var coordsFromIndexSnippet = strides
        .map(function (stride, i) {
        var line1 = "int " + coords[i] + " = " + index + " / " + stride;
        var line2 = i === strides.length - 1 ?
            "int " + coords[i + 1] + " = " + index + " - " + coords[i] + " * " + stride :
            "index -= " + coords[i] + " * " + stride;
        return line1 + "; " + line2 + ";";
    })
        .join('');
    return "\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + coordsFromIndexSnippet + "\n      return ivec3(b, r, c);\n    }\n  ";
}
function getFlattenedIndexFrom3D(shape) {
    var strides = util_1.ShapeUtil.computeStrides(shape);
    return "\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * " + strides[0] + " + coords.z * " + strides[1] + " + coords.y;\n  }\n";
}


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/reshape.ts":
/*!**************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/reshape.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.reshape = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var reshape = function (handler, inputs) {
    var reshapedDims = util_1.ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);
    if (handler.session.pack) {
        return [handler.reshapePacked(inputs[0], reshapedDims)];
    }
    else {
        return [handler.reshapeUnpacked(inputs[0], reshapedDims)];
    }
};
exports.reshape = reshape;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/resize-packed.ts":
/*!********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/resize-packed.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseResizeAttributesV11 = exports.parseResizeAttributesV10 = exports.resize = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var upsample_1 = __webpack_require__(/*! ./upsample */ "./lib/onnxjs/backends/webgl/ops/upsample.ts");
var resizeProgramMetadata = {
    name: 'Resize',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.packed]
};
var resize = function (inferenceHandler, inputs, attributes) {
    upsample_1.validateInputs(inputs, attributes);
    var output = inferenceHandler.run(__assign(__assign({}, resizeProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createPackedResizeProgramInfo(inferenceHandler, inputs, attributes); } }), inputs);
    return [output];
};
exports.resize = resize;
var parseResizeAttributesV10 = function (node) { return upsample_1.parseUpsampleAttributes(node, 10); };
exports.parseResizeAttributesV10 = parseResizeAttributesV10;
var parseResizeAttributesV11 = function (node) { return upsample_1.parseUpsampleAttributes(node, 11); };
exports.parseResizeAttributesV11 = parseResizeAttributesV11;
var createPackedResizeProgramInfo = function (inferenceHandler, inputs, attributes) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var _a = __read(prepareInputs(inputs, attributes), 2), scales = _a[0], outputShape = _a[1];
    var isSame = scales.every(function (s) { return s === 1; }) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';
    if (isSame) {
        return __assign(__assign({}, resizeProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.packed }, hasMain: true, shaderSource: "void main() {\n                    vec4 v = " + glsl.texture2D + "(X, TexCoords);\n                    " + glsl.output + " = v;\n                }" });
    }
    var dim = outputShape.length;
    if (dim < 2) {
        throw new Error("output dimension should be at least 2, but got " + dim);
    }
    var outputHeight = outputShape[dim - 2];
    var outputWidth = outputShape[dim - 1];
    var inputShape = inputs[0].dims;
    if (dim !== inputShape.length) {
        throw new Error("output dimension should match input " + inputShape.length + ", but got " + dim);
    }
    var inputHeight = inputShape[dim - 2];
    var inputWidth = inputShape[dim - 1];
    var scalesHeight = scales[dim - 2];
    var scalesWidth = scales[dim - 1];
    var getSourceFracIndex = '';
    if (attributes.mode !== 'linear') {
        // TODO: support other modes
        throw new Error("resize (packed) does not support mode: '" + attributes.mode + "'");
    }
    switch (attributes.coordinateTransformMode) {
        case 'asymmetric':
            getSourceFracIndex = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                ";
            break;
        case 'half_pixel':
            getSourceFracIndex = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                ";
            break;
        case 'align_corners':
            getSourceFracIndex = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(" + outputWidth + ".0 - 1.0, " + outputHeight + ".0 - 1.0, " + outputWidth + ".0 - 1.0,\n                            " + outputHeight + ".0 - 1.0);\n                        vec4 original = vec4(" + inputWidth + ".0 - 1.0, " + inputHeight + ".0 - 1.0, " + inputWidth + ".0 - 1.0,\n                            " + inputHeight + ".0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                ";
            break;
        default:
            // TODO:supporting other coordinateTransformModes
            throw new Error("resize (packed) does not support coordinateTransformMode:                                 '" + attributes.coordinateTransformMode + "'");
    }
    var coordsDataType = utils_1.getCoordsDataType(dim);
    var unpackChannel = packing_utils_1.unpackFromChannel();
    var shaderSource = "\n            const vec2 inputWH = vec2(" + inputHeight + ".0, " + inputWidth + ".0);\n            const vec4 scaleWHWH = vec4(" + scalesHeight + ".0, " + scalesWidth + ".0, " + scalesHeight + ".0, " + scalesWidth + ".0);\n            " + unpackChannel + "\n            " + getSourceFracIndex + "\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                " + coordsDataType + " rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < " + (outputHeight - 1) + ";\n                bool hasNextCol = rc.z < " + (outputWidth - 1) + ";\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                " + glsl.output + " = vec4(newValue);\n            }\n        ";
    return __assign(__assign({}, resizeProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.packed }, hasMain: true, shaderSource: shaderSource });
};
var prepareInputs = function (inputs, attributes) {
    var x = inputs[0];
    var xDims = x.dims;
    var scales = attributes.scales;
    var outputSizes;
    if (scales.length === 0) {
        var scalesTensor = inputs[attributes.scalesInputIdx];
        if (scalesTensor && scalesTensor.size !== 0) {
            if (inputs[attributes.sizesInputIdx]) {
                throw new Error('Only one of scales or sizes must be provided as input.');
            }
            scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);
        }
        else {
            var sizesTensor = inputs[attributes.sizesInputIdx];
            if (!sizesTensor || sizesTensor.size === 0) {
                throw new Error('Either scales or sizes MUST be provided as input.');
            }
            outputSizes = Array.from(sizesTensor.integerData);
            scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);
        }
    }
    else {
        if (inputs[attributes.sizesInputIdx]) {
            throw new Error('Only one of scales or sizes must be provided as input.');
        }
    }
    var yDims = outputSizes || (xDims.map(function (dim, i) { return Math.floor(dim * scales[i]); }));
    return [scales, yDims];
};
var parseScalesData = function (scale, mode, isResize) {
    var scales = Array.from(scale.floatData);
    upsample_1.scalesValidation(scales, mode, isResize);
    return scales;
};
var parseScalesDataFromOutputSize = function (yDims, xDims, mode, isResize) {
    var length = xDims.length;
    var scales = new Array(length);
    for (var i = 0, end = length; i < end; i++) {
        if (xDims[i] === 0) {
            if (yDims[i] !== 0) {
                throw new Error('Input dim is zero but required output dim is non-zero.');
            }
            scales[i] = 1;
        }
        else {
            scales[i] = yDims[i] / xDims[i];
        }
    }
    upsample_1.scalesValidation(scales, mode, isResize);
    return scales;
};
// roi data is not used yet. but leave here for future usage.
// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {
//     let roi: number[] = [];
//     if (attributes.needRoiInput) {
//         if (attributes.roiInputIdx <= 0) {
//             throw new Error('Invalid roi input index.');
//         }
//         const roiTensor = inputs[attributes.roiInputIdx];
//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];
//     } else {
//         roi = new Array(inputs[0].dims.length * 2).fill(0);
//     }
//     return roi;
// };


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/shape.ts":
/*!************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/shape.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.shape = void 0;
var tensor_1 = __webpack_require__(/*! ../../../tensor */ "./lib/onnxjs/tensor.ts");
var shape = function (inferenceHandler, inputs) {
    validateInputs(inputs);
    return [new tensor_1.Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];
};
exports.shape = shape;
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Shape requires 1 input.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/slice.ts":
/*!************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/slice.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sliceV10 = exports.parseSliceAttributes = exports.slice = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var operators_1 = __webpack_require__(/*! ../../../operators */ "./lib/onnxjs/operators.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var sliceProgramMetadata = {
    name: 'Slice',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpacked]
};
var slice = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var output = inferenceHandler.run(__assign(__assign({}, sliceProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createSliceProgramInfo(inferenceHandler, inputs[0], attributes); } }), inputs);
    return [output];
};
exports.slice = slice;
var parseSliceAttributes = function (node) {
    var starts = node.attributes.getInts('starts');
    var ends = node.attributes.getInts('ends');
    var axes = node.attributes.getInts('axes', []);
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ starts: starts, ends: ends, axes: axes });
};
exports.parseSliceAttributes = parseSliceAttributes;
var createSliceProgramInfo = function (inferenceHandler, input, attributes) {
    var axes = (attributes.axes.length === 0) ? input.dims.slice(0).map(function (val, i) { return i; }) : attributes.axes;
    var normalizedAxes = util_1.ShapeUtil.normalizeAxes(axes, input.dims.length);
    var starts = attributes.starts.map(function (start, i) {
        if (start > input.dims[normalizedAxes[i]] - 1) {
            return input.dims[normalizedAxes[i]];
        }
        return util_1.ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);
    });
    var ends = attributes.ends.map(function (end, i) {
        if (end > input.dims[normalizedAxes[i]] - 1) {
            return input.dims[normalizedAxes[i]];
        }
        return util_1.ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);
    });
    var outputShape = input.dims.slice();
    var sliceOps = [];
    for (var i = 0; i < normalizedAxes.length; i++) {
        outputShape[normalizedAxes[i]] = ends[i] - starts[i];
        if (starts[i] > 0) {
            sliceOps.push("outputIdx[" + normalizedAxes[i] + "] += " + starts[i] + ";");
        } // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }
    }
    var rank = outputShape.length;
    var shaderSource = "\n      float process(int outputIdx[" + rank + "]) {\n        " + sliceOps.join('\n      ') + "\n        return _A(outputIdx);\n      }";
    return __assign(__assign({}, sliceProgramMetadata), { output: { dims: outputShape, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Slice requires 1 input.');
    }
    if (operators_1.NUMBER_TYPES.indexOf(inputs[0].type) === -1) {
        throw new Error('Invalid input type.');
    }
};
var sliceV10 = function (inferenceHandler, inputs) {
    validateInputsV10(inputs);
    var attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);
    var output = inferenceHandler.run(__assign(__assign({}, sliceProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createSliceProgramInfo(inferenceHandler, inputs[0], attributes); } }), [inputs[0]]);
    return [output];
};
exports.sliceV10 = sliceV10;
var generateSliceAttributesFromInputs = function (inferenceHandler, inputs) {
    if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||
        !inferenceHandler.session.isInitializer(inputs[2].dataId) ||
        (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||
        (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {
        throw new Error('dynamic slice attributes are not allowed');
    }
    if (inputs.length >= 5 && inputs[4].integerData.some(function (i) { return i !== 1; })) {
        throw new Error('currently non-1 steps is not supported for Slice');
    }
    var starts = Array.from(inputs[1].integerData);
    var ends = Array.from(inputs[2].integerData);
    var axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];
    var cacheKey = axes + ";" + starts + ";" + ends;
    return { starts: starts, ends: ends, axes: axes, cacheKey: cacheKey };
};
var validateInputsV10 = function (inputs) {
    if (!inputs || inputs.length < 3 || inputs.length > 5) {
        throw new Error('Invalid input number.');
    }
    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {
        throw new Error('Invalid input type.');
    }
    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {
        throw new Error('Invalid input type.');
    }
    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {
        throw new Error('Invalid input type.');
    }
    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {
        throw new Error('Invalid input type.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/softmax.ts":
/*!**************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/softmax.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseSoftmaxAttributes = exports.softmax = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var softmaxComputeMaxProgramMetadata = {
    name: 'SoftmaxComputeMax',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpacked],
};
var softmaxComputeScaleProgramMetadata = {
    name: 'SoftmaxComputeScale',
    inputNames: ['A', 'Max'],
    inputTypes: [types_1.TextureType.unpacked, types_1.TextureType.unpacked],
};
var softmaxProgramMetadata = {
    name: 'SoftMax',
    inputNames: ['A', 'Max', 'Norm'],
    inputTypes: [types_1.TextureType.unpacked, types_1.TextureType.unpacked, types_1.TextureType.unpacked],
};
var softmax = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var inputShape = inputs[0].dims.slice();
    var axis = util_1.ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);
    var N = util_1.ShapeUtil.sizeToDimension(inputShape, axis);
    var D = util_1.ShapeUtil.sizeFromDimension(inputShape, axis);
    var computeMaxProgramInfo = createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);
    var max = inferenceHandler.run(__assign(__assign({}, softmaxComputeMaxProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return computeMaxProgramInfo; } }), inputs);
    var computeScaleProgramInfo = createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.output.dims, [N]);
    var scale = inferenceHandler.run(__assign(__assign({}, softmaxComputeScaleProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return computeScaleProgramInfo; } }), [inputs[0], max]);
    var softMaxProgramInfo = createSoftMaxProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.output.dims, computeScaleProgramInfo.output.dims);
    var output = inferenceHandler.run(__assign(__assign({}, softmaxProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return softMaxProgramInfo; } }), [inputs[0], max, scale]);
    return [output];
};
exports.softmax = softmax;
var parseSoftmaxAttributes = function (node) { return attribute_with_cache_key_1.createAttributeWithCacheKey({ axis: node.attributes.getInt('axis', 1) }); };
exports.parseSoftmaxAttributes = parseSoftmaxAttributes;
/**
 * Create a texture that contains the maximum value of each of the 'N' rows
 */
var createComputeMaxProgramInfo = 
// eslint-disable-next-line @typescript-eslint/naming-convention
function (inferenceHandler, input, N, D, outputShape) {
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(input.dims, types_1.TextureType.unpacked), 2), textureWidth = _a[0], textureHeight = _a[1];
    var rank = outputShape.length;
    if (N < 1 || D < 1) {
        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');
    }
    if (outputShape.length !== 1) {
        throw new Error('Dimensionality of the output should be 1');
    }
    if (outputShape[0] !== N) {
        throw new Error('Shape of the output should be equal to logical row count');
    }
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var shaderSource = "\n      float process(int[" + rank + "] indices) {\n        int logical_row_start_offset = indices[0] * " + D + ";\n\n        float max = getColorAsFloat(" + glsl.texture2D + "(A, offsetToCoords(logical_row_start_offset, " + textureWidth + ",\n        " + textureHeight + " )));\n        for(int i=1; i<" + D + "; ++i)\n        {\n          float current = getColorAsFloat(" + glsl.texture2D + "(A, offsetToCoords(logical_row_start_offset + i,\n            " + textureWidth + ", " + textureHeight + ")));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }";
    return __assign(__assign({}, softmaxComputeMaxProgramMetadata), { output: { dims: outputShape, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
/**
 * Create a texture that contains the normalization factor for each of the 'N' rows
 */
var createComputScaleProgramInfo = 
// eslint-disable-next-line @typescript-eslint/naming-convention
function (inferenceHandler, input, N, D, maxElementPerLogicalRow, outputShape) {
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(input.dims, types_1.TextureType.unpacked), 2), textureWidth = _a[0], textureHeight = _a[1];
    var rank = outputShape.length;
    if (N < 1 || D < 1) {
        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');
    }
    if (outputShape.length !== 1) {
        throw new Error('Dimensionality of the output should be 1');
    }
    if (outputShape[0] !== N) {
        throw new Error('Shape of the output should be equal to logical row count');
    }
    if (maxElementPerLogicalRow.length !== 1) {
        throw new Error('Dimensionality of the intermediate results should be 1');
    }
    if (maxElementPerLogicalRow[0] !== N) {
        throw new Error('Shape of the intermediate results should be equal to logical row count');
    }
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var shaderSource = "\n      float process(int[" + rank + "] indices) {\n        int logical_row_start_offset = indices[0] * " + D + ";\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<" + D + "; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(" + glsl.texture2D + "(A, offsetToCoords(logical_row_start_offset + i,\n            " + textureWidth + ", " + textureHeight + "))) - max);\n        }\n\n        return norm_factor;\n      }";
    return __assign(__assign({}, softmaxComputeScaleProgramMetadata), { output: { dims: outputShape, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var createSoftMaxProgramInfo = 
// eslint-disable-next-line @typescript-eslint/naming-convention
function (inferenceHandler, input, N, D, maxElementPerLogicalRow, normalizationPerLogicalRow) {
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(input.dims, types_1.TextureType.unpacked), 2), textureWidth = _a[0], textureHeight = _a[1];
    var rank = input.dims.length;
    if (N < 1 || D < 1) {
        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');
    }
    if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {
        throw new Error('Dimensionality of the intermediate results should be 1');
    }
    if (maxElementPerLogicalRow[0] !== N || normalizationPerLogicalRow[0] !== N) {
        throw new Error('Shape of the intermediate results should be equal to logical row count');
    }
    var shaderSource = "\n      float process(int[" + rank + "] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, " + textureWidth + ", " + textureHeight + ");\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / " + D + ";\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }";
    return __assign(__assign({}, softmaxProgramMetadata), { output: { dims: input.dims, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Softmax requires 1 input.');
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('Invalid input type');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/split.ts":
/*!************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/split.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseSplitAttributes = exports.split = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var splitProgramMetadata = {
    name: 'Split',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpacked],
};
var split = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var axis = util_1.ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);
    var count = getProgramCount(inferenceHandler, inputs, axis, attributes);
    var output = [];
    var _loop_1 = function (i) {
        output.push(inferenceHandler.run(__assign(__assign({}, splitProgramMetadata), { cacheHint: attributes.cacheKey + ";" + i, get: function () { return createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i); } }), inputs));
    };
    for (var i = 0; i < count; ++i) {
        _loop_1(i);
    }
    return output;
};
exports.split = split;
var parseSplitAttributes = function (node) {
    var axis = node.attributes.getInt('axis', 0);
    var split = node.attributes.getInts('split', []);
    var numOutputs = node.outputs.length;
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ axis: axis, split: split, numOutputs: numOutputs });
};
exports.parseSplitAttributes = parseSplitAttributes;
var getProgramCount = function (inferenceHandler, inputs, axis, attributes) {
    var _a = __read(util_1.SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs), 2), offsets = _a[1];
    return offsets.length;
};
var createSplitProgramInfo = function (inferenceHandler, input, attributes, axis, index) {
    var _a = __read(util_1.SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs), 2), shapes = _a[0], offsets = _a[1];
    var offset = offsets[index];
    var outputShape = shapes[index];
    var rank = outputShape.length;
    var shaderSource = "\n      float process(int indices[" + rank + "]) {\n        indices[" + axis + "] += " + offset + ";\n        return _A(indices);\n      }\n    ";
    return __assign(__assign({}, splitProgramMetadata), { cacheHint: attributes.cacheKey + ":" + index, output: { dims: outputShape, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Split requires one input.');
    }
    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&
        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&
        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {
        throw new Error('Invalid input type.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/squeeze.ts":
/*!**************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/squeeze.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseSqueezeAttributes = exports.squeeze = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var squeeze = function (inferenceHandler, inputs, axes) {
    validateInputs(inputs);
    var outputShape = util_1.ShapeUtil.squeezeShape(inputs[0].dims, axes);
    var output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);
    return [output];
};
exports.squeeze = squeeze;
var parseSqueezeAttributes = function (node) {
    return node.attributes.getInts('axes');
};
exports.parseSqueezeAttributes = parseSqueezeAttributes;
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Squeeze requires 1 input.');
    }
    if (inputs[0].type === 'string') {
        throw new Error('invalid input tensor types.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/sum.ts":
/*!**********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/sum.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sum = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var sum = function (inferenceHandler, inputs) {
    validateInputs(inputs);
    var sumProgramMetadata = {
        name: 'Sum',
        inputNames: inputs.map(function (v, i) { return "X" + i; }),
        inputTypes: new Array(inputs.length).fill(types_1.TextureType.unpacked)
    };
    var output = inferenceHandler.run(__assign(__assign({}, sumProgramMetadata), { get: function () { return createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata); } }), inputs);
    return [output];
};
exports.sum = sum;
var createSumProgramInfo = function (inferenceHandler, inputs, sumProgramMetadata) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var outputShape = inputs[0].dims.slice();
    var sumLine = inputs.map(function (v, i) { return glsl.texture2D + "(X" + i + ",TexCoords)"; }).join(' + ');
    var shaderSource = "\n      void main() {\n        vec4 result = " + sumLine + ";\n        " + glsl.output + " = result;\n      }\n    ";
    return __assign(__assign({}, sumProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, hasMain: true, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length === 0) {
        throw new Error('Sum requires inputs.');
    }
    var length = inputs[0].dims.length;
    for (var i = 1; i < inputs.length; i++) {
        if (length !== inputs[i].dims.length) {
            throw new Error('Input shapes are mismatched.');
        }
        for (var j = 0; j < length; j++) {
            if (inputs[0].dims[j] !== inputs[i].dims[j]) {
                throw new Error('Input shapes are not matched.');
            }
        }
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('Invalid input type.');
    }
    for (var i = 1; i < inputs.length; i++) {
        if (inputs[0].type !== inputs[i].type) {
            throw new Error('Input types are not matched.');
        }
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/tile.ts":
/*!***********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/tile.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tile = void 0;
var operators_1 = __webpack_require__(/*! ../../../operators */ "./lib/onnxjs/operators.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var tile = function (inferenceHandler, inputs) {
    validateInputs(inputs);
    var tileProgramMetadata = {
        name: 'Tile',
        inputNames: ['A'],
        inputTypes: [types_1.TextureType.unpacked],
    };
    var output = inferenceHandler.run(__assign(__assign({}, tileProgramMetadata), { get: function () { return createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata); } }), inputs);
    return [output];
};
exports.tile = tile;
var createTileProgramInfo = function (handler, inputs, tileProgramMetadata) {
    var inputShape = inputs[0].dims.slice();
    var outputShape = new Array(inputShape.length);
    var tileOps = [];
    for (var i = 0; i < inputShape.length; i++) {
        outputShape[i] = inputShape[i] * inputs[1].numberData[i];
        tileOps.push("inputIdx[" + i + "] = int(mod(float(outputIdx[" + i + "]), " + inputShape[i] + ".));");
    }
    var rank = outputShape.length;
    var shaderSource = "\n      float process(int outputIdx[" + rank + "]) {\n        int inputIdx[" + rank + "];\n        " + tileOps.join('\n') + "\n        return _A(inputIdx);\n      }\n    ";
    return __assign(__assign({}, tileProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 2) {
        throw new Error('Tile requires 2 input.');
    }
    if (inputs[1].dims.length !== 1) {
        throw new Error('The second input shape must 1 dimension.');
    }
    if (inputs[1].dims[0] !== inputs[0].dims.length) {
        throw new Error('Invalid input shape.');
    }
    if (operators_1.NUMBER_TYPES.indexOf(inputs[0].type) === -1) {
        throw new Error('Invalid input type.');
    }
    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {
        throw new Error('Invalid repeat type.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/transpose.ts":
/*!****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/transpose.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseTransposeAttributes = exports.transpose = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var transposeProgramMetadata = {
    name: 'Transpose',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.unpacked]
};
var transpose = function (inferenceHandler, inputs, attributes) {
    validateInputs(inputs);
    var output = inferenceHandler.run(__assign(__assign({}, transposeProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm); } }), inputs);
    return [output];
};
exports.transpose = transpose;
var parseTransposeAttributes = function (node) { return attribute_with_cache_key_1.createAttributeWithCacheKey({ perm: node.attributes.getInts('perm', []) }); };
exports.parseTransposeAttributes = parseTransposeAttributes;
var createTransposeProgramInfo = function (inferenceHandler, input, perm) {
    var inputShape = input.dims;
    perm = getAdjustedPerm(inputShape, perm);
    var unpackedOutputShape = getOutputShape(inputShape, perm);
    var rank = inputShape.length;
    // A dims=[${inputs[0].dims.toString()}]
    // out Dims=[${unpackedOutputShape.toString()}]
    // based on perm=[${perm.toString()}]
    var shaderSource = "\n      " + getPermFunctionBody('perm', perm, rank) + "\n      float process(int indices[" + rank + "]) {\n        int a[" + rank + "];\n        perm(a, indices);\n        return _A(a);\n      }";
    return __assign(__assign({}, transposeProgramMetadata), { output: { dims: unpackedOutputShape, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
var getAdjustedPerm = function (inputShape, perm) {
    if (perm && perm.length !== inputShape.length) {
        perm = __spreadArray([], __read((inputShape.keys()))).reverse();
    }
    return perm;
};
var getOutputShape = function (inputShape, perm) {
    perm = getAdjustedPerm(inputShape, perm);
    return util_1.ShapeUtil.sortBasedOnPerm(inputShape, perm);
};
var getPermFunctionBody = function (name, perm, rank) {
    var reverseFunc = [];
    reverseFunc.push("void " + name + "(out int a[" + rank + "], int src[" + rank + "]) {");
    for (var i = 0; i < rank; ++i) {
        reverseFunc.push("\ta[" + perm[i] + "]=src[" + i + "];");
    }
    reverseFunc.push('\t}');
    return reverseFunc.join('\n');
};
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Transpose requires 1 input.');
    }
    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {
        throw new Error('input should be float tensor');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/uint8-encode.ts":
/*!*******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/uint8-encode.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.encodeAsUint8 = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var encodeAsUint8 = function (inferenceHandler, input) {
    var outputShape = input.shape;
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    /**
     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts
     */
    var shaderSource = "\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = " + glsl.texture2D + "(X,TexCoords).r;\n      " + glsl.output + " = encodeAsUint8(value);\n    }";
    var programInfo = {
        name: 'Uint8Encode',
        inputTypes: [types_1.TextureType.unpacked],
        inputNames: ['X'],
        output: { dims: outputShape, type: input.tensor.type, textureType: types_1.TextureType.downloadUint8AsFloat },
        shaderSource: shaderSource,
        hasMain: true
    };
    return inferenceHandler.executeProgram(programInfo, [input.tensor]);
};
exports.encodeAsUint8 = encodeAsUint8;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/unary-op.ts":
/*!***************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/unary-op.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.tanh = exports.tan = exports.sqrt = exports.sin = exports.sigmoid = exports.relu = exports.not = exports.neg = exports.log = exports.parseLeakyReluAttributes = exports.leakyRelu = exports.identity = exports.floor = exports.exp = exports.parseEluAttributes = exports.elu = exports.cos = exports.ceil = exports.parseClipAttributes = exports.clip = exports.atan = exports.asin = exports.acos = exports.abs = exports.glslTanh = exports.glslTan = exports.glslSqrt = exports.glslSigmoid = exports.glslRelu = exports.glslSin = exports.glslNot = exports.glslNeg = exports.glslLog = exports.glslLeakyRelu = exports.glslIdentity = exports.glslClip = exports.glslFloor = exports.glslExp = exports.glslElu = exports.glslCos = exports.glslCeil = exports.glslAtan = exports.glslAsin = exports.glslAcos = exports.glslAbs = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var glsl_definitions_1 = __webpack_require__(/*! ../glsl-definitions */ "./lib/onnxjs/backends/webgl/glsl-definitions.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
function glslAbs() {
    return glslBuiltinUnary('abs');
}
exports.glslAbs = glslAbs;
function glslAcos() {
    return glslBuiltinUnary('acos');
}
exports.glslAcos = glslAcos;
function glslAsin() {
    return glslBuiltinUnary('asin');
}
exports.glslAsin = glslAsin;
function glslAtan() {
    return glslBuiltinUnary('atan');
}
exports.glslAtan = glslAtan;
function glslCeil() {
    return glslBuiltinUnary('ceil');
}
exports.glslCeil = glslCeil;
function glslCos() {
    return glslBuiltinUnary('cos');
}
exports.glslCos = glslCos;
function glslElu(alpha) {
    var name = 'elu';
    var body = "\n  const float alpha = float(" + alpha + ");\n\n  float " + name + "_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 " + name + "_(vec4 v) {\n    return vec4(" + name + "_(v.x), " + name + "_(v.y), " + name + "_(v.z), " + name + "_(v.w));\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslElu = glslElu;
function glslExp() {
    return glslBuiltinUnary('exp');
}
exports.glslExp = glslExp;
function glslFloor() {
    return glslBuiltinUnary('floor');
}
exports.glslFloor = glslFloor;
function glslClip(min, max) {
    var name = 'clip';
    var body = "\n  const float min = float(" + min + ");\n  const float max = float(" + max + ");\n\n  float " + name + "_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 " + name + "_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslClip = glslClip;
function glslIdentity() {
    var name = 'indentity';
    var body = "\n  float " + name + "_(float a) {\n    return a;\n  }\n  vec4 " + name + "_(vec4 v) {\n    return v;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslIdentity = glslIdentity;
function glslLeakyRelu(alpha) {
    var name = 'leakyRelu';
    var body = "\n  const float alpha = float(" + alpha + ");\n\n  float " + name + "_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 " + name + "_(vec4 v) {\n    return vec4(" + name + "_(v.x), " + name + "_(v.y), " + name + "_(v.z), " + name + "_(v.w));\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslLeakyRelu = glslLeakyRelu;
function glslLog() {
    return glslBuiltinUnary('log');
}
exports.glslLog = glslLog;
function glslNeg() {
    var name = 'neg';
    var body = "\n  float " + name + "_(float a) {\n    return -a;\n  }\n  vec4 " + name + "_(vec4 v) {\n    return -v;\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslNeg = glslNeg;
function glslNot() {
    var name = 'not';
    var body = "\n  float " + name + "_(float a) {\n    return float( ! bool(a) );\n  }\n  bool " + name + "_(bool a) {\n    return !a;\n  }\n  vec4 " + name + "_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 " + name + "_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslNot = glslNot;
function glslSin() {
    return glslBuiltinUnary('sin');
}
exports.glslSin = glslSin;
function glslRelu() {
    var name = 'relu';
    var body = "\n  float " + name + "_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 " + name + "_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslRelu = glslRelu;
function glslSigmoid() {
    var name = 'sigmoid';
    var body = "\n  float " + name + "_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 " + name + "_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslSigmoid = glslSigmoid;
function glslSqrt() {
    return glslBuiltinUnary('sqrt');
}
exports.glslSqrt = glslSqrt;
function glslTan() {
    return glslBuiltinUnary('tan');
}
exports.glslTan = glslTan;
function glslTanh() {
    var name = 'tanh';
    var body = "\n  float " + name + "_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 " + name + "_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
exports.glslTanh = glslTanh;
function glslBuiltinUnary(name) {
    var body = "\n  float " + name + "_(float a) {\n    return " + name + "(a);\n  }\n  vec4 " + name + "_(vec4 v) {\n    return " + name + "(v);\n  }\n  ";
    return { body: body, name: name, type: glsl_definitions_1.FunctionType.ValueBased };
}
/////
/////
/////
var createElementwiseProgramInfo = function (handler, metadata, input, glslFunc) {
    var textureType = handler.session.pack ? types_1.TextureType.packed : types_1.TextureType.unpacked;
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    return __assign(__assign({}, metadata), { output: { dims: input.dims, type: input.type, textureType: textureType }, shaderSource: "\n     " + glslFunc.body + "\n     void main() {\n       vec4 v = " + glsl.texture2D + "(A, TexCoords);\n       v = " + glslFunc.name + "_(v);\n       " + glsl.output + " = v;\n     }\n     ", hasMain: true });
};
var createElementwiseProgramInfoLoader = function (handler, input, glslFunc, cacheKey) {
    var textureType = handler.session.pack ? types_1.TextureType.packed : types_1.TextureType.unpacked;
    var metadata = { name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey };
    return __assign(__assign({}, metadata), { get: function () { return createElementwiseProgramInfo(handler, metadata, input, glslFunc); } });
};
var abs = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)]; };
exports.abs = abs;
var acos = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)]; };
exports.acos = acos;
var asin = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)]; };
exports.asin = asin;
var atan = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)]; };
exports.atan = atan;
var clip = function (handler, inputs, attributes) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey), inputs)]; };
exports.clip = clip;
var parseClipAttributes = function (node) { return attribute_with_cache_key_1.createAttributeWithCacheKey({
    min: node.attributes.getFloat('min', -3.4028234663852886e+38),
    max: node.attributes.getFloat('max', 3.4028234663852886e+38)
}); };
exports.parseClipAttributes = parseClipAttributes;
var ceil = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)]; };
exports.ceil = ceil;
var cos = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)]; };
exports.cos = cos;
var elu = function (handler, inputs, attributes) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey), inputs)]; };
exports.elu = elu;
var parseEluAttributes = function (node) {
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 1.0) });
};
exports.parseEluAttributes = parseEluAttributes;
var exp = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)]; };
exports.exp = exp;
var floor = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)]; };
exports.floor = floor;
var identity = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)]; };
exports.identity = identity;
var leakyRelu = function (handler, inputs, attributes) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey), inputs)]; };
exports.leakyRelu = leakyRelu;
var parseLeakyReluAttributes = function (node) {
    return attribute_with_cache_key_1.createAttributeWithCacheKey({ alpha: node.attributes.getFloat('alpha', 0.01) });
};
exports.parseLeakyReluAttributes = parseLeakyReluAttributes;
var log = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)]; };
exports.log = log;
var neg = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)]; };
exports.neg = neg;
var not = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)]; };
exports.not = not;
var relu = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)]; };
exports.relu = relu;
var sigmoid = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)]; };
exports.sigmoid = sigmoid;
var sin = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)]; };
exports.sin = sin;
var sqrt = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)]; };
exports.sqrt = sqrt;
var tan = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)]; };
exports.tan = tan;
var tanh = function (handler, inputs) { return [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)]; };
exports.tanh = tanh;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/unpack.ts":
/*!*************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/unpack.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createUnpackProgramInfoLoader = exports.createUnpackProgramInfo = void 0;
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./lib/onnxjs/backends/webgl/utils.ts");
var packing_utils_1 = __webpack_require__(/*! ./packing-utils */ "./lib/onnxjs/backends/webgl/ops/packing-utils.ts");
var unpackProgramMetadata = {
    name: 'unpack',
    inputNames: ['A'],
    inputTypes: [types_1.TextureType.packed]
};
var createUnpackProgramInfo = function (handler, input) {
    var rank = input.dims.length;
    var channels = packing_utils_1.getChannels('rc', rank);
    var innerDims = channels.slice(-2);
    var coordsDataType = utils_1.getCoordsDataType(rank);
    var unpackChannel = packing_utils_1.unpackFromChannel();
    var isScalar = (input.dims.length === 0);
    var sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);
    var coords = rank <= 1 ? 'rc' : "vec2(" + innerDims.join(',') + ")";
    var glsl = glsl_source_1.getGlsl(handler.session.backend.glContext.version);
    var shaderSource = "\n    " + unpackChannel + "\n    void main() {\n      " + coordsDataType + " rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(" + sourceCoords + ");\n\n       " + glsl.output + " = vec4(getChannel(packedInput, " + coords + "), 0, 0, 0);\n     }\n   ";
    return __assign(__assign({}, unpackProgramMetadata), { hasMain: true, output: { dims: input.dims, type: input.type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource });
};
exports.createUnpackProgramInfo = createUnpackProgramInfo;
var createUnpackProgramInfoLoader = function (handler, input) {
    return (__assign(__assign({}, unpackProgramMetadata), { get: function () { return exports.createUnpackProgramInfo(handler, input); } }));
};
exports.createUnpackProgramInfoLoader = createUnpackProgramInfoLoader;
function getSourceCoords(rank, dims) {
    if (rank === 1) {
        return 'rc';
    }
    var coords = '';
    for (var i = 0; i < rank; i++) {
        coords += dims[i];
        if (i < rank - 1) {
            coords += ',';
        }
    }
    return coords;
}


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/unsqueeze.ts":
/*!****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/unsqueeze.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseUnsqueezeAttributes = exports.unsqueeze = void 0;
var util_1 = __webpack_require__(/*! ../../../util */ "./lib/onnxjs/util.ts");
var unsqueeze = function (inferenceHandler, inputs, axes) {
    validateInputs(inputs);
    var outputShape = util_1.ShapeUtil.unsqueezeShape(inputs[0].dims, axes);
    var output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);
    return [output];
};
exports.unsqueeze = unsqueeze;
var parseUnsqueezeAttributes = function (node) {
    return node.attributes.getInts('axes');
};
exports.parseUnsqueezeAttributes = parseUnsqueezeAttributes;
var validateInputs = function (inputs) {
    if (!inputs || inputs.length !== 1) {
        throw new Error('Unsqueeze requires 1 input.');
    }
    if (inputs[0].type === 'string') {
        throw new Error('invalid input tensor types.');
    }
};


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/ops/upsample.ts":
/*!***************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/ops/upsample.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.scalesValidation = exports.validateInputs = exports.parseUpsampleAttributes = exports.parseUpsampleAttributesV9 = exports.parseUpsampleAttributesV7 = exports.upsample = void 0;
var attribute_with_cache_key_1 = __webpack_require__(/*! ../../../attribute-with-cache-key */ "./lib/onnxjs/attribute-with-cache-key.ts");
var glsl_source_1 = __webpack_require__(/*! ../glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
var types_1 = __webpack_require__(/*! ../types */ "./lib/onnxjs/backends/webgl/types.ts");
var upsampleProgramMetadata = {
    name: 'Upsample',
    inputNames: ['X'],
    inputTypes: [types_1.TextureType.unpacked],
};
var upsample = function (inferenceHandler, inputs, attributes) {
    exports.validateInputs(inputs, attributes);
    var output = inferenceHandler.run(__assign(__assign({}, upsampleProgramMetadata), { cacheHint: attributes.cacheKey, get: function () { return createUpsampleProgramInfo(inferenceHandler, inputs, attributes); } }), inputs);
    return [output];
};
exports.upsample = upsample;
var parseUpsampleAttributesV7 = function (node) { return exports.parseUpsampleAttributes(node, 7); };
exports.parseUpsampleAttributesV7 = parseUpsampleAttributesV7;
var parseUpsampleAttributesV9 = function (node) { return exports.parseUpsampleAttributes(node, 9); };
exports.parseUpsampleAttributesV9 = parseUpsampleAttributesV9;
var parseUpsampleAttributes = function (node, opset) {
    var isResize = (opset >= 10);
    // processing node attributes
    var mode = node.attributes.getString('mode', 'nearest');
    if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {
        throw new Error("unrecognized mode: " + mode);
    }
    var scales = [];
    if (opset < 9) {
        scales = node.attributes.getFloats('scales');
        exports.scalesValidation(scales, mode, isResize);
    }
    var extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);
    var coordinateTransformMode = opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';
    if ([
        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'
    ].indexOf(coordinateTransformMode) === -1) {
        throw new Error("coordinate_transform_mode '" + coordinateTransformMode + "' is not supported");
    }
    var needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');
    var useExtrapolation = needRoiInput;
    var nearestMode = (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';
    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {
        throw new Error("nearest_mode '" + nearestMode + "' is not supported");
    }
    var cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);
    var excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;
    if (excludeOutside && mode !== 'cubic') {
        throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');
    }
    var useNearest2xOptimization = (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');
    var roiInputIdx = 0;
    var scalesInputIdx = 0;
    var sizesInputIdx = 0;
    if (opset > 10) {
        roiInputIdx = 1;
        scalesInputIdx = 2;
        sizesInputIdx = 3;
    }
    else if (opset === 9) {
        scalesInputIdx = 1;
    }
    return attribute_with_cache_key_1.createAttributeWithCacheKey({
        opset: opset,
        isResize: isResize,
        mode: mode,
        scales: scales,
        extrapolationValue: extrapolationValue,
        coordinateTransformMode: coordinateTransformMode,
        useExtrapolation: useExtrapolation,
        needRoiInput: needRoiInput,
        nearestMode: nearestMode,
        cubicCoefficientA: cubicCoefficientA,
        excludeOutside: excludeOutside,
        useNearest2xOptimization: useNearest2xOptimization,
        roiInputIdx: roiInputIdx,
        scalesInputIdx: scalesInputIdx,
        sizesInputIdx: sizesInputIdx
    });
};
exports.parseUpsampleAttributes = parseUpsampleAttributes;
var createUpsampleProgramInfo = function (inferenceHandler, inputs, attributes) {
    var glsl = glsl_source_1.getGlsl(inferenceHandler.session.backend.glContext.version);
    var _a = __read(inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, types_1.TextureType.unpacked), 2), inputWidth = _a[0], inputHeight = _a[1];
    var outputShape = inputs[0].dims.map(function (dim, i) { return Math.floor(dim * attributes.scales[i]); });
    var _b = __read(inferenceHandler.calculateTextureWidthAndHeight(outputShape, types_1.TextureType.unpacked), 2), outputWidth = _b[0], outputHeight = _b[1];
    var dim = outputShape.length;
    var outputPitches = new Array(dim);
    var inputPitches = new Array(dim);
    var precalculatedPitches = "\n      int output_pitches[" + dim + "];\n      int input_pitches[" + dim + "];\n      ";
    for (var d = dim - 1; d >= 0; d--) {
        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];
        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];
        precalculatedPitches += "\n        output_pitches[" + d + "] = " + outputPitches[d] + ";\n        input_pitches[" + d + "] = " + inputPitches[d] + ";\n        ";
    }
    var getInputFloatFunction = "\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, " + inputWidth + ", " + inputHeight + ");\n        float value = getColorAsFloat(" + glsl.texture2D + "(X, coords));\n        return value;\n      }\n      ";
    var shaderSource = attributes.mode === 'nearest' ?
        // nearest
        "\n    " + getInputFloatFunction + "\n    float process(int indices[" + dim + "]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, " + outputWidth + ", " + outputHeight + ");\n\n      " + precalculatedPitches + "\n\n      int d, m;\n      for (int dim = 0; dim < " + dim + "; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }" :
        dim === 4 ?
            // bilinear 4D
            "\n    " + getInputFloatFunction + "\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, " + outputWidth + ", " + outputHeight + ");\n\n      " + precalculatedPitches + "\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (" + inputs[0].dims[2] + " - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }" :
            // bilinear 2D
            "\n    " + getInputFloatFunction + "\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, " + outputWidth + ", " + outputHeight + ");\n\n      " + precalculatedPitches + "\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (" + inputs[0].dims[0] + " - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }";
    return __assign(__assign({}, upsampleProgramMetadata), { output: { dims: outputShape, type: inputs[0].type, textureType: types_1.TextureType.unpacked }, shaderSource: shaderSource, variables: [{
                name: 'scales',
                type: 'int',
                arrayLength: attributes.scales.length,
                data: attributes.scales.map(function (x) { return Math.ceil(x); })
            }] });
};
var validateInputs = function (inputs, attribute) {
    if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||
        (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||
        (attribute.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {
        throw new Error('invalid inputs.');
    }
    if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {
        throw new Error('Invalid input shape.');
    }
    if (inputs[0].type === 'string') {
        throw new Error('Invalid input tensor types.');
    }
};
exports.validateInputs = validateInputs;
var scalesValidation = function (scales, mode, isResize) {
    var e_1, _a, e_2, _b;
    if (!isResize) {
        try {
            for (var scales_1 = __values(scales), scales_1_1 = scales_1.next(); !scales_1_1.done; scales_1_1 = scales_1.next()) {
                var scale = scales_1_1.value;
                if (scale < 1) {
                    throw new Error('Scale value should be greater than or equal to 1.');
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (scales_1_1 && !scales_1_1.done && (_a = scales_1.return)) _a.call(scales_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    else {
        try {
            for (var scales_2 = __values(scales), scales_2_1 = scales_2.next(); !scales_2_1.done; scales_2_1 = scales_2.next()) {
                var scale = scales_2_1.value;
                if (scale <= 0) {
                    throw new Error('Scale value should be greater than 0.');
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (scales_2_1 && !scales_2_1.done && (_b = scales_2.return)) _b.call(scales_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    if (mode === 'linear' || mode === 'cubic') {
        if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {
            throw new Error("'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the " + (isResize ? 'Resize' : 'Upsample') + " opeartor.");
        }
    }
};
exports.scalesValidation = scalesValidation;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/program-manager.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/program-manager.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgramManager = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
var glsl_preprocessor_1 = __webpack_require__(/*! ./glsl-preprocessor */ "./lib/onnxjs/backends/webgl/glsl-preprocessor.ts");
var glsl_source_1 = __webpack_require__(/*! ./glsl-source */ "./lib/onnxjs/backends/webgl/glsl-source.ts");
/**
 * ProgramManager is the main class behind running computations
 * It builds ProgramInfo's into Artifacts
 * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)
 * Uses the artifact to run the computation by calling Draw on
 * the WebGL drawing buffer
 * ProgramManager automatically maps (binds) input variables to their
 * corresponding Location's in the binary program
 */
var ProgramManager = /** @class */ (function () {
    function ProgramManager(profiler, glContext, textureLayoutStrategy) {
        this.profiler = profiler;
        this.glContext = glContext;
        this.textureLayoutStrategy = textureLayoutStrategy;
        this.repo = new Map();
        this.attributesBound = false;
    }
    ProgramManager.prototype.getArtifact = function (key) {
        return this.repo.get(key);
    };
    ProgramManager.prototype.setArtifact = function (key, artifact) {
        this.repo.set(key, artifact);
    };
    ProgramManager.prototype.run = function (buildArtifact, inputs, output) {
        var _this = this;
        var _a;
        this.profiler.event('op', "ProgramManager.run " + ((_a = buildArtifact.programInfo.name) !== null && _a !== void 0 ? _a : 'unknown kernel'), function () {
            var _a;
            var gl = _this.glContext.gl;
            var program = buildArtifact.program;
            gl.useProgram(program);
            try {
                _this.bindOutput(output);
                if (!_this.attributesBound) {
                    _this.bindAttributes(buildArtifact.attribLocations);
                }
                _this.bindUniforms(buildArtifact.uniformLocations, (_a = buildArtifact.programInfo.variables) !== null && _a !== void 0 ? _a : [], inputs);
            }
            catch (err) {
                instrument_1.Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);
                throw err;
            }
            _this.profiler.event('backend', 'GlContext.draw()', function () {
                _this.glContext.draw();
            });
        }, this.glContext);
    };
    ProgramManager.prototype.dispose = function () {
        var _this = this;
        if (this.vertexShader) {
            this.glContext.deleteShader(this.vertexShader);
        }
        this.repo.forEach(function (a) { return _this.glContext.deleteProgram(a.program); });
    };
    ProgramManager.prototype.build = function (programInfo, inputTextureLayouts, outputTextureLayout) {
        var _this = this;
        return this.profiler.event('backend', 'ProgramManager.build', function () {
            var preprocessor = new glsl_preprocessor_1.GlslPreprocessor(_this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);
            var fragScript = preprocessor.preprocess();
            var program = _this.compile(fragScript);
            var artifact = {
                programInfo: programInfo,
                program: program,
                uniformLocations: _this.getUniformLocations(program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),
                attribLocations: _this.getAttribLocations(program)
            };
            return artifact;
        });
    };
    ProgramManager.prototype.compile = function (fragShaderScript) {
        if (!this.vertexShader) {
            instrument_1.Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');
            var vertexShaderScript = glsl_source_1.getVertexShaderSource(this.glContext.version);
            this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);
        }
        if (onnxruntime_common_1.env.debug) {
            instrument_1.Logger.verbose('ProrgramManager', "FragShader:\n" + fragShaderScript + "\n");
        }
        var fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);
        var program = this.glContext.createProgram(this.vertexShader, fragShader);
        this.glContext.deleteShader(fragShader);
        return program;
    };
    ProgramManager.prototype.bindOutput = function (td) {
        var width = td.width;
        var height = td.height;
        instrument_1.Logger.verbose('ProrgramManager', "Binding output texture to Framebuffer: w/h=" + width + "/" + height + ", shape=" + td.shape + ", type=" + td.tensor.type);
        this.glContext.attachFramebuffer(td.texture, width, height);
    };
    ProgramManager.prototype.bindAttributes = function (attribLocations) {
        var positionHandle = attribLocations.position;
        var textureCoordHandle = attribLocations.textureCoord;
        this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);
        this.attributesBound = true;
    };
    ProgramManager.prototype.bindUniforms = function (uniformLocations, variables, textures) {
        var e_1, _a;
        var _b;
        var gl = this.glContext.gl;
        var texturePosition = 0;
        var _loop_1 = function (name_1, type, location_1, arrayLength) {
            var value = (_b = variables.find(function (v) { return v.name === name_1; })) === null || _b === void 0 ? void 0 : _b.data;
            if (type !== 'sampler2D' && !value) {
                throw new Error("variable '" + name_1 + "' does not have data defined in program info");
            }
            switch (type) {
                case 'sampler2D':
                    this_1.bindTexture(textures[texturePosition], location_1, texturePosition);
                    texturePosition++;
                    break;
                case 'float':
                    if (arrayLength) {
                        gl.uniform1fv(location_1, value);
                    }
                    else {
                        gl.uniform1f(location_1, value);
                    }
                    break;
                case 'int':
                    if (arrayLength) {
                        gl.uniform1iv(location_1, value);
                    }
                    else {
                        gl.uniform1i(location_1, value);
                    }
                    break;
                default:
                    throw new Error("Uniform not implemented: " + type);
            }
        };
        var this_1 = this;
        try {
            for (var uniformLocations_1 = __values(uniformLocations), uniformLocations_1_1 = uniformLocations_1.next(); !uniformLocations_1_1.done; uniformLocations_1_1 = uniformLocations_1.next()) {
                var _c = uniformLocations_1_1.value, name_1 = _c.name, type = _c.type, location_1 = _c.location, arrayLength = _c.arrayLength;
                _loop_1(name_1, type, location_1, arrayLength);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (uniformLocations_1_1 && !uniformLocations_1_1.done && (_a = uniformLocations_1.return)) _a.call(uniformLocations_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ProgramManager.prototype.bindTexture = function (td, uniformHandle, position) {
        this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);
    };
    ProgramManager.prototype.getAttribLocations = function (program) {
        return {
            position: this.getAttribLocation(program, 'position'),
            textureCoord: this.getAttribLocation(program, 'textureCoord')
        };
    };
    ProgramManager.prototype.getUniformLocations = function (program, samplers, variables) {
        var e_2, _a, e_3, _b;
        var uniformLocations = [];
        if (samplers) {
            try {
                for (var samplers_1 = __values(samplers), samplers_1_1 = samplers_1.next(); !samplers_1_1.done; samplers_1_1 = samplers_1.next()) {
                    var sampler = samplers_1_1.value;
                    uniformLocations.push({ name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler) });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (samplers_1_1 && !samplers_1_1.done && (_a = samplers_1.return)) _a.call(samplers_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (variables) {
            try {
                for (var variables_1 = __values(variables), variables_1_1 = variables_1.next(); !variables_1_1.done; variables_1_1 = variables_1.next()) {
                    var variable = variables_1_1.value;
                    uniformLocations.push(__assign(__assign({}, variable), { location: this.getUniformLocation(program, variable.name) }));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (variables_1_1 && !variables_1_1.done && (_b = variables_1.return)) _b.call(variables_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return uniformLocations;
    };
    ProgramManager.prototype.getUniformLocation = function (program, name) {
        var gl = this.glContext.gl;
        var reference = gl.getUniformLocation(program, name);
        if (reference === null) {
            throw new Error("Uniform " + name + " not found.");
        }
        return reference;
    };
    ProgramManager.prototype.getAttribLocation = function (program, name) {
        var gl = this.glContext.gl;
        var attributeLocation = gl.getAttribLocation(program, name);
        return attributeLocation;
    };
    return ProgramManager;
}());
exports.ProgramManager = ProgramManager;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/session-handler.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/session-handler.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLSessionHandler = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
var opset_1 = __webpack_require__(/*! ../../opset */ "./lib/onnxjs/opset.ts");
var inference_handler_1 = __webpack_require__(/*! ./inference-handler */ "./lib/onnxjs/backends/webgl/inference-handler.ts");
var op_resolve_rules_1 = __webpack_require__(/*! ./op-resolve-rules */ "./lib/onnxjs/backends/webgl/op-resolve-rules.ts");
var program_manager_1 = __webpack_require__(/*! ./program-manager */ "./lib/onnxjs/backends/webgl/program-manager.ts");
var texture_layout_strategy_1 = __webpack_require__(/*! ./texture-layout-strategy */ "./lib/onnxjs/backends/webgl/texture-layout-strategy.ts");
var texture_manager_1 = __webpack_require__(/*! ./texture-manager */ "./lib/onnxjs/backends/webgl/texture-manager.ts");
var WebGLSessionHandler = /** @class */ (function () {
    function WebGLSessionHandler(backend, context) {
        this.backend = backend;
        this.context = context;
        this.layoutStrategy = new texture_layout_strategy_1.PreferLogicalStrategy(backend.glContext.maxTextureSize);
        this.programManager = new program_manager_1.ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);
        this.textureManager = new texture_manager_1.TextureManager(backend.glContext, this.layoutStrategy, this.context.profiler, { reuseTextures: backend.textureCacheMode === 'full' });
        this.packedTextureDataCache = new Map();
        this.unpackedTextureDataCache = new Map();
        this.pack = backend.pack;
        this.pack2unpackMap = new Map();
        this.unpack2packMap = new Map();
    }
    WebGLSessionHandler.prototype.createInferenceHandler = function () {
        return new inference_handler_1.WebGLInferenceHandler(this);
    };
    WebGLSessionHandler.prototype.onGraphInitialized = function (graph) {
        var initializers = graph.getValues().filter(function (v) { return v.from === -1 && v.tensor; }).map(function (v) { return v.tensor.dataId; });
        this.initializers = new Set(initializers);
    };
    WebGLSessionHandler.prototype.isInitializer = function (tensorId) {
        return this.initializers ? this.initializers.has(tensorId) : false;
    };
    WebGLSessionHandler.prototype.addInitializer = function (tensorId) {
        this.initializers.add(tensorId);
    };
    WebGLSessionHandler.prototype.getTextureData = function (tensorId, isPacked) {
        if (isPacked) {
            return this.packedTextureDataCache.get(tensorId);
        }
        else {
            return this.unpackedTextureDataCache.get(tensorId);
        }
    };
    WebGLSessionHandler.prototype.setTextureData = function (tensorId, textureData, isPacked) {
        if (isPacked === void 0) { isPacked = false; }
        instrument_1.Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');
        if (isPacked) {
            this.packedTextureDataCache.set(tensorId, textureData);
        }
        else {
            this.unpackedTextureDataCache.set(tensorId, textureData);
        }
    };
    WebGLSessionHandler.prototype.dispose = function () {
        var _this = this;
        this.programManager.dispose();
        this.textureManager.clearActiveTextures();
        this.packedTextureDataCache.forEach(function (td) { return _this.textureManager.releaseTexture(td, true); });
        this.packedTextureDataCache = new Map();
        this.unpackedTextureDataCache.forEach(function (td) { return _this.textureManager.releaseTexture(td, true); });
        this.unpackedTextureDataCache = new Map();
    };
    WebGLSessionHandler.prototype.resolve = function (node, opsets, graph) {
        var op = opset_1.resolveOperator(node, opsets, op_resolve_rules_1.WEBGL_OP_RESOLVE_RULES);
        return { impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node };
    };
    return WebGLSessionHandler;
}());
exports.WebGLSessionHandler = WebGLSessionHandler;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/texture-data-encoder.ts":
/*!***********************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/texture-data-encoder.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Uint8DataEncoder = exports.RGBAFloatDataEncoder = exports.RedFloat32DataEncoder = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
/**
 * WebGL2 data encoder
 * Uses R32F as the format for texlet
 */
var RedFloat32DataEncoder = /** @class */ (function () {
    function RedFloat32DataEncoder(gl, channels) {
        if (channels === void 0) { channels = 1; }
        if (channels === 1) {
            this.internalFormat = gl.R32F;
            this.format = gl.RED;
            this.textureType = gl.FLOAT;
            this.channelSize = channels;
        }
        else if (channels === 4) {
            this.internalFormat = gl.RGBA32F;
            this.format = gl.RGBA;
            this.textureType = gl.FLOAT;
            this.channelSize = channels;
        }
        else {
            throw new Error("Invalid number of channels: " + channels);
        }
    }
    RedFloat32DataEncoder.prototype.encode = function (src, textureSize) {
        var result;
        var source;
        if (src.constructor !== Float32Array) {
            instrument_1.Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');
            source = new Float32Array(src);
        }
        if (textureSize * this.channelSize > src.length) {
            instrument_1.Logger.warning('Encoder', 'Source data too small. Allocating larger array');
            source = src;
            result = this.allocate(textureSize * this.channelSize);
            source.forEach(function (v, i) { return result[i] = v; });
        }
        else {
            source = src;
            result = source;
        }
        return result;
    };
    RedFloat32DataEncoder.prototype.allocate = function (size) {
        return new Float32Array(size * 4);
    };
    RedFloat32DataEncoder.prototype.decode = function (buffer, dataSize) {
        if (this.channelSize === 1) {
            var filteredData = buffer.filter(function (value, index) { return index % 4 === 0; }).subarray(0, dataSize);
            return filteredData;
        }
        return buffer.subarray(0, dataSize);
    };
    return RedFloat32DataEncoder;
}());
exports.RedFloat32DataEncoder = RedFloat32DataEncoder;
/**
 * Data encoder for WebGL 1 with support for floating point texture
 */
var RGBAFloatDataEncoder = /** @class */ (function () {
    function RGBAFloatDataEncoder(gl, channels, textureType) {
        if (channels === void 0) { channels = 1; }
        if (channels !== 1 && channels !== 4) {
            throw new Error("Invalid number of channels: " + channels);
        }
        this.internalFormat = gl.RGBA;
        this.format = gl.RGBA;
        this.channelSize = channels;
        this.textureType = textureType || gl.FLOAT;
    }
    RGBAFloatDataEncoder.prototype.encode = function (src, textureSize) {
        var dest = src;
        if (this.channelSize === 1) {
            instrument_1.Logger.verbose('Encoder', 'Exploding into a larger array');
            dest = this.allocate(textureSize);
            src.forEach(function (v, i) { return dest[i * 4] = v; });
        }
        return dest;
    };
    RGBAFloatDataEncoder.prototype.allocate = function (size) {
        return new Float32Array(size * 4);
    };
    RGBAFloatDataEncoder.prototype.decode = function (buffer, dataSize) {
        if (this.channelSize === 1) {
            var filteredData = buffer.filter(function (value, index) { return index % 4 === 0; }).subarray(0, dataSize);
            return filteredData;
        }
        return buffer.subarray(0, dataSize);
    };
    return RGBAFloatDataEncoder;
}());
exports.RGBAFloatDataEncoder = RGBAFloatDataEncoder;
var Uint8DataEncoder = /** @class */ (function () {
    function Uint8DataEncoder(gl, channels) {
        if (channels === void 0) { channels = 1; }
        this.channelSize = 4;
        if (channels === 1) {
            this.internalFormat = gl.ALPHA;
            this.format = gl.ALPHA; // not tested
            this.textureType = gl.UNSIGNED_BYTE;
            this.channelSize = channels;
        }
        else if (channels === 4) {
            this.internalFormat = gl.RGBA;
            this.format = gl.RGBA;
            this.textureType = gl.UNSIGNED_BYTE;
            this.channelSize = channels;
        }
        else {
            throw new Error("Invalid number of channels: " + channels);
        }
    }
    Uint8DataEncoder.prototype.encode = function (src, _textureSize) {
        return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);
    };
    Uint8DataEncoder.prototype.allocate = function (size) {
        return new Uint8Array(size * this.channelSize);
    };
    Uint8DataEncoder.prototype.decode = function (buffer, dataSize) {
        if (buffer instanceof Uint8Array) {
            return buffer.subarray(0, dataSize);
        }
        throw new Error("Invalid array type: " + buffer.constructor);
    };
    return Uint8DataEncoder;
}());
exports.Uint8DataEncoder = Uint8DataEncoder;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/texture-layout-strategy.ts":
/*!**************************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/texture-layout-strategy.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBatchDim = exports.sizeToSquarishShape = exports.getRowsCols = exports.sizeFromShape = exports.isInt = exports.parseAxisParam = exports.squeezeShape = exports.PreferLogicalStrategy = exports.AlwaysKeepOriginalSizeStrategy = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
var util_1 = __webpack_require__(/*! ../../util */ "./lib/onnxjs/util.ts");
/**
 * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)
 */
var AlwaysKeepOriginalSizeStrategy = /** @class */ (function () {
    function AlwaysKeepOriginalSizeStrategy(maxTextureSize) {
        this.maxTextureSize = maxTextureSize;
    }
    AlwaysKeepOriginalSizeStrategy.prototype.computeTextureWH = function (shape, prefs) {
        // scalar tensor
        if (shape.length === 0) {
            return [1, 1];
        }
        var maxTextureSize = this.maxTextureSize;
        if (prefs && prefs.breakAxis !== undefined) {
            // check to see if dims fit
            var wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce(function (a, b) { return a * b; });
            var hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce(function (a, b) { return a * b; });
            if (wsize > maxTextureSize || hsize > maxTextureSize) {
                // ignore preferences
                // continue with default layout
                instrument_1.Logger.verbose('TextureLayout', "Given width/height preferences were unattainable: shape:" + shape + ", breakAxis:" + prefs.breakAxis);
            }
            else {
                return [wsize, hsize];
            }
        }
        var totalSize = shape.reduce(function (a, b) { return a * b; });
        var width = Math.floor(Math.sqrt(totalSize));
        for (; width < maxTextureSize && width < totalSize; width++) {
            if (totalSize % width === 0) {
                break;
            }
        }
        if (width >= maxTextureSize || totalSize % width !== 0) {
            throw new Error("The given dimensions are outside this GPU's boundaries: " + shape);
        }
        return [width, totalSize / width];
    };
    return AlwaysKeepOriginalSizeStrategy;
}());
exports.AlwaysKeepOriginalSizeStrategy = AlwaysKeepOriginalSizeStrategy;
var PreferLogicalStrategy = /** @class */ (function () {
    function PreferLogicalStrategy(maxTextureSize) {
        this.maxTextureSize = maxTextureSize;
    }
    PreferLogicalStrategy.prototype.computeTextureWH = function (shape, prefs) {
        var wh = this.computeTexture(shape, prefs);
        if (prefs && prefs.isPacked) {
            wh[0] /= 2;
            wh[1] /= 2;
        }
        if (prefs && prefs.reverseWH) {
            return [wh[1], wh[0]];
        }
        return wh;
    };
    PreferLogicalStrategy.prototype.computeTexture = function (shape, prefs) {
        var isPacked = prefs && prefs.isPacked;
        // scalar tensor
        if (shape.length === 0) {
            return isPacked ? [2, 2] : [1, 1];
        }
        var maxTextureSize = this.maxTextureSize;
        if (prefs && prefs.breakAxis !== undefined) {
            // check to see if dims fit
            var wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce(function (a, b) { return a * b; });
            var hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce(function (a, b) { return a * b; });
            if (wsize > maxTextureSize || hsize > maxTextureSize) {
                // ignore preferences
                // continue with default layout
                instrument_1.Logger.verbose('TextureLayout', "Given width/height preferences were unattainable: shape:" + shape + ", breakAxis:" + prefs.breakAxis);
            }
            else {
                return [wsize, hsize];
            }
        }
        var logShape = shape.slice(0);
        if (isPacked) {
            maxTextureSize = maxTextureSize * 2;
            // This logic ensures we accurately count the number of packed texels needed
            // to accommodate the tensor. We can only pack values in the same texel if
            // they are from adjacent pairs of rows/cols within the same batch. So if a
            // tensor has 3 rows, we pretend it has 4 rows in order to account for the
            // fact that the texels containing the third row are half empty.
            logShape = logShape.map(function (d, i) { return i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]; });
            // Packed texture height is at least 2 (the channel height of a single
            // texel).
            if (logShape.length === 1) {
                logShape = [2, logShape[0]];
            }
        }
        // If logical shape is 2, we don't squeeze, since we want to match physical.
        if (logShape.length !== 2) {
            var squeezeResult = squeezeShape(logShape);
            logShape = squeezeResult.newShape;
        }
        var size = sizeFromShape(logShape);
        if (logShape.length <= 1 && size <= maxTextureSize) {
            return [1, size];
        }
        else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {
            return logShape;
        }
        else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {
            return [logShape[0] * logShape[1], logShape[2]];
        }
        else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {
            return [logShape[0], logShape[1] * logShape[2]];
        }
        else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&
            logShape[3] <= maxTextureSize) {
            return [logShape[0] * logShape[1] * logShape[2], logShape[3]];
        }
        else if (logShape.length === 4 && logShape[0] <= maxTextureSize &&
            logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {
            return [logShape[0], logShape[1] * logShape[2] * logShape[3]];
        }
        else {
            if (isPacked) {
                // For packed textures size equals the number of channels required to
                // accommodate the texture data. However in order to squarify such that
                // inner dimensions stay even, we rewrite size to equal the number of
                // texels. Then in the return statement we rehydrate the squarified
                // dimensions to channel units.
                return sizeToSquarishShape(size / 4).map(function (d) { return d * 2; });
            }
            return sizeToSquarishShape(size);
        }
    };
    return PreferLogicalStrategy;
}());
exports.PreferLogicalStrategy = PreferLogicalStrategy;
function squeezeShape(shape, axis) {
    var newShape = [];
    var keptDims = [];
    var isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    var axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();
    var j = 0;
    for (var i = 0; i < shape.length; ++i) {
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) {
                throw new Error("Can't squeeze axis " + i + " since its dim '" + shape[i] + "' is not 1");
            }
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) {
                j++;
            }
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape: newShape, keptDims: keptDims };
}
exports.squeezeShape = squeezeShape;
function parseAxisParam(axis, shape) {
    var rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map(function (s, i) { return i; }) : [].concat(axis);
    // Check for valid range
    util_1.assert(axis.every(function (ax) { return ax >= -rank && ax < rank; }), function () { return "All values in axis param must be in range [-" + rank + ", " + rank + ") but " +
        ("got axis " + axis); });
    // Check for only integers
    util_1.assert(axis.every(isInt), function () { return 'All values in axis param must be integers but ' +
        ("got axis " + axis); });
    // Handle negative axis.
    return axis.map(function (a) { return a < 0 ? rank + a : a; });
}
exports.parseAxisParam = parseAxisParam;
function isInt(a) {
    return a % 1 === 0;
}
exports.isInt = isInt;
function sizeFromShape(shape) {
    if (shape.length === 0) {
        // Scalar.
        return 1;
    }
    var size = shape[0];
    for (var i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
exports.sizeFromShape = sizeFromShape;
function getRowsCols(shape) {
    if (shape.length === 0) {
        throw Error('Cannot get rows and columns of an empty shape array.');
    }
    return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];
}
exports.getRowsCols = getRowsCols;
function sizeToSquarishShape(size) {
    var width = Math.ceil(Math.sqrt(size));
    return [width, Math.ceil(size / width)];
}
exports.sizeToSquarishShape = sizeToSquarishShape;
function getBatchDim(shape, dimsToSkip) {
    if (dimsToSkip === void 0) { dimsToSkip = 2; }
    return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));
}
exports.getBatchDim = getBatchDim;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/texture-layout.ts":
/*!*****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/texture-layout.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createTextureLayoutFromShape = exports.calculateTextureWidthAndHeight = exports.createTextureLayoutFromTextureType = void 0;
var util_1 = __webpack_require__(/*! ../../util */ "./lib/onnxjs/util.ts");
var types_1 = __webpack_require__(/*! ./types */ "./lib/onnxjs/backends/webgl/types.ts");
var createTextureLayoutFromTextureType = function (textureLayoutStrategy, shape, textureType) {
    var channel = (textureType === types_1.TextureType.unpacked || textureType === types_1.TextureType.unpackedReversed) ? 1 : 4;
    var isPacked = textureType === types_1.TextureType.packed;
    var reverseWH = (textureType === types_1.TextureType.unpackedReversed || textureType === types_1.TextureType.packed);
    var breakAxis = textureType === types_1.TextureType.packedLastDimension ? shape.length - 1 : undefined;
    var unpackedShape = textureType === types_1.TextureType.packedLastDimension ?
        shape.map(function (d, i) { return i === shape.length - 1 ? d * 4 : d; }) :
        undefined;
    return exports.createTextureLayoutFromShape(textureLayoutStrategy, shape, channel, unpackedShape, { isPacked: isPacked, reverseWH: reverseWH, breakAxis: breakAxis });
};
exports.createTextureLayoutFromTextureType = createTextureLayoutFromTextureType;
var calculateTextureWidthAndHeight = function (textureLayoutStrategy, shape, textureType) {
    var layout = exports.createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);
    return [layout.width, layout.height];
};
exports.calculateTextureWidthAndHeight = calculateTextureWidthAndHeight;
/**
 * Create a TextureLayout object from shape.
 */
var createTextureLayoutFromShape = function (textureLayoutStrategy, shape, channels, unpackedShape, prefs) {
    if (channels === void 0) { channels = 1; }
    var isPacked = !!(prefs && prefs.isPacked);
    var _a = __read(textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs), 2), width = _a[0], height = _a[1];
    var rank = shape.length;
    var inferredDims = shape.slice(0);
    if (rank === 0) {
        inferredDims = [1];
    }
    if (channels === 1) {
        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be
        unpackedShape = shape;
    }
    else if (isPacked) {
        if (channels !== 4) {
            throw new Error('a packed texture must be 4-channel');
        }
        unpackedShape = shape;
        if (rank > 0) {
            inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);
        }
        if (rank > 1) {
            inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);
        }
    }
    else if (!unpackedShape) {
        throw new Error('Unpacked shape is needed when using channels > 1');
    }
    return {
        width: width,
        height: height,
        channels: channels,
        isPacked: isPacked,
        shape: inferredDims,
        strides: util_1.ShapeUtil.computeStrides(inferredDims),
        unpackedShape: unpackedShape,
        reversedWH: (prefs && prefs.reverseWH)
    };
};
exports.createTextureLayoutFromShape = createTextureLayoutFromShape;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/texture-manager.ts":
/*!******************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/texture-manager.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextureManager = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
/**
 * TextureManager is the mainly responsible for caching Textures
 * Textures are cached in 2 levels:
 *   1. the texures which are associated with a dataId (from Tensor)
 *    Caching these is crucial to performance. These are In-use Textures
 *   2. textures which are not in use by any current ProgramInfo/Tensor
 *     These are called Free Textures
 * TextureManager is also used to help creating textures. For this it
 * uses WebGLContext and TextureLayoutStrategy
 */
var TextureManager = /** @class */ (function () {
    function TextureManager(glContext, layoutStrategy, profiler, config) {
        this.glContext = glContext;
        this.layoutStrategy = layoutStrategy;
        this.profiler = profiler;
        this.config = config;
        this.pendingRead = new Map();
        if (config.reuseTextures) {
            this.inUseTextures = new Map();
            this.idleTextures = new Map();
            this.textureLookup = new Map();
        }
    }
    TextureManager.prototype.createTextureFromLayout = function (dataType, layout, data, usage) {
        var textureDataType = this.toEncoderType(dataType);
        var encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);
        if (layout.isPacked && usage === 1 /* UploadOnly */) {
            throw new Error('not implemented');
        }
        var width = layout.width;
        var height = layout.height;
        var key;
        var inUseTextures;
        if (this.config.reuseTextures) {
            key = width + "x" + height + "_" + encoder.format + "_" + encoder.internalFormat + "_" + encoder.textureType;
            inUseTextures = this.inUseTextures.get(key);
            if (!inUseTextures) {
                inUseTextures = [];
                this.inUseTextures.set(key, inUseTextures);
            }
            var idleTextures = this.idleTextures.get(key);
            if (idleTextures && idleTextures.length > 0) {
                var texture_1 = idleTextures.pop();
                inUseTextures.push(texture_1);
                if (usage === 1 /* UploadOnly */) {
                    this.glContext.updateTexture(texture_1, width, height, encoder, this.toTextureData(dataType, data));
                }
                return texture_1;
            }
        }
        instrument_1.Logger.verbose('TextureManager', "Creating new texture of size " + layout.width + "x" + layout.height);
        var texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));
        if (this.config.reuseTextures) {
            inUseTextures.push(texture);
            this.textureLookup.set(texture, key);
        }
        return texture;
    };
    TextureManager.prototype.readTexture = function (td, dataType, channels) {
        var _this = this;
        if (!channels) {
            channels = 1;
        }
        return this.profiler.event('backend', 'TextureManager.readTexture', function () {
            var dataSize = td.shape.reduce(function (a, b) { return a * b; }) * channels;
            var data = _this.glContext.readTexture(td.texture, td.width, td.height, dataSize, _this.toEncoderType(dataType), channels);
            return _this.toTensorData(dataType, data);
        });
    };
    TextureManager.prototype.readTextureAsync = function (td, dataType, channels) {
        return __awaiter(this, void 0, void 0, function () {
            var dataId, subscribers_1;
            var _this = this;
            return __generator(this, function (_a) {
                dataId = td.tensor.dataId;
                if (!channels) {
                    channels = 1;
                }
                if (this.pendingRead.has(dataId)) {
                    subscribers_1 = this.pendingRead.get(dataId);
                    return [2 /*return*/, new Promise(function (resolve) { return subscribers_1 === null || subscribers_1 === void 0 ? void 0 : subscribers_1.push(resolve); })];
                }
                return [2 /*return*/, this.profiler.event('backend', 'TextureManager.readTextureAsync', function () { return __awaiter(_this, void 0, void 0, function () {
                        var dataSize, data, tensorData, subscribers;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.pendingRead.set(dataId, []);
                                    dataSize = td.shape.reduce(function (a, b) { return a * b; }) * channels;
                                    // add a fence waiting for the data to be ready
                                    return [4 /*yield*/, this.glContext.createAndWaitForFence()];
                                case 1:
                                    // add a fence waiting for the data to be ready
                                    _a.sent();
                                    data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels);
                                    tensorData = this.toTensorData(dataType, data);
                                    subscribers = this.pendingRead.get(dataId);
                                    this.pendingRead.delete(dataId);
                                    subscribers === null || subscribers === void 0 ? void 0 : subscribers.forEach(function (resolve) { return resolve(tensorData); });
                                    return [2 /*return*/, tensorData];
                            }
                        });
                    }); })];
            });
        });
    };
    TextureManager.prototype.readUint8TextureAsFloat = function (td) {
        var _this = this;
        return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', function () {
            var dataSize = td.shape.reduce(function (a, b) { return a * b; });
            var data = _this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);
            return new Float32Array(data.buffer, data.byteOffset, dataSize);
        });
    };
    TextureManager.prototype.releaseTexture = function (textureData, deleteTexture) {
        var key;
        if (this.config.reuseTextures) {
            key = this.textureLookup.get(textureData.texture);
            if (key) {
                if (deleteTexture) {
                    this.textureLookup.delete(key);
                }
                var inUseTextures = this.inUseTextures.get(key);
                if (inUseTextures) {
                    var index = inUseTextures.indexOf(textureData.texture);
                    if (index !== -1) {
                        inUseTextures.splice(index, 1);
                        var idleTextures = this.idleTextures.get(key);
                        if (!idleTextures) {
                            idleTextures = [];
                            this.idleTextures.set(key, idleTextures);
                        }
                        idleTextures.push(textureData.texture);
                    }
                }
            }
        }
        if (!key || deleteTexture) {
            instrument_1.Logger.verbose('TextureManager', "Deleting texture of size " + textureData.width + "x" + textureData.height);
            this.glContext.deleteTexture(textureData.texture);
        }
    };
    TextureManager.prototype.toTensorData = function (dataType, data) {
        switch (dataType) {
            case 'int16':
                return data instanceof Int16Array ? data : Int16Array.from(data);
            case 'int32':
                return data instanceof Int32Array ? data : Int32Array.from(data);
            case 'int8':
                return data instanceof Int8Array ? data : Int8Array.from(data);
            case 'uint16':
                return data instanceof Uint16Array ? data : Uint16Array.from(data);
            case 'uint32':
                return data instanceof Uint32Array ? data : Uint32Array.from(data);
            case 'uint8':
            case 'bool':
                return data instanceof Uint8Array ? data : Uint8Array.from(data);
            case 'float32':
                return data instanceof Float32Array ? data : Float32Array.from(data);
            case 'float64':
                return data instanceof Float64Array ? data : Float64Array.from(data);
            default:
                throw new Error("TensorData type " + dataType + " is not supported");
        }
    };
    TextureManager.prototype.toTextureData = function (dataType, data) {
        if (!data) {
            return undefined;
        }
        return (data instanceof Float32Array) ? data : new Float32Array(data);
        /*
        switch (dataType) {
          case 'int16':
          case 'int32':
          case 'uint16':
          case 'uint32':
            return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);
          case 'int8':
          case 'uint8':
          case 'bool':
            return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);
          case 'float32':
          case 'float64':
            return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);
          default:
            throw new Error(`TensorData type ${dataType} is not supported`);
        }
        */
    };
    TextureManager.prototype.toEncoderType = function (_dataType) {
        return 'float';
        // switch (dataType) {
        //   case 'int16':
        //   case 'int32':
        //   case 'uint16':
        //   case 'uint32':
        //     return 'int';
        //   case 'uint8':
        //   case 'bool':
        //     return 'byte';
        //   case 'float32':
        //   case 'float64':
        //     return 'float';
        //   default:
        //     throw new Error(`TensorData type ${dataType} is not supported`);
        // }
    };
    TextureManager.prototype.clearActiveTextures = function () {
        this.glContext.clearActiveTextures();
    };
    return TextureManager;
}());
exports.TextureManager = TextureManager;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/types.ts":
/*!********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/types.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextureType = void 0;
var TextureType;
(function (TextureType) {
    TextureType[TextureType["unpacked"] = 0] = "unpacked";
    TextureType[TextureType["unpackedReversed"] = 1] = "unpackedReversed";
    TextureType[TextureType["packed"] = 2] = "packed";
    TextureType[TextureType["downloadUint8AsFloat"] = 3] = "downloadUint8AsFloat";
    TextureType[TextureType["packedLastDimension"] = 4] = "packedLastDimension"; // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)
})(TextureType = exports.TextureType || (exports.TextureType = {}));


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/utils.ts":
/*!********************************************!*\
  !*** ./lib/onnxjs/backends/webgl/utils.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getGlChannels = exports.getCoordsDataType = exports.getSqueezedParams = exports.squeezeInputShape = exports.generateShaderFuncNameFromInputSamplerNameAtOutCoords = exports.generateShaderFuncNameFromInputSamplerName = exports.repeatedTry = exports.getPackedShape = void 0;
var util_1 = __webpack_require__(/*! ../../util */ "./lib/onnxjs/util.ts");
/**
 * Given a non RGBA shape calculate the R version
 * It is assumed that the dimensions are multiples of given channels
 * NOTE: it is always the last dim that gets packed.
 * @param unpackedShape original shape to create a packed version from
 */
function getPackedShape(unpackedShape) {
    var len = unpackedShape.length;
    return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);
}
exports.getPackedShape = getPackedShape;
function repeatedTry(checkFn, delayFn, maxCounter) {
    if (delayFn === void 0) { delayFn = function (_counter) { return 0; }; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var tryCount = 0;
                    var tryFn = function () {
                        if (checkFn()) {
                            resolve();
                            return;
                        }
                        tryCount++;
                        var nextBackoff = delayFn(tryCount);
                        if (maxCounter != null && tryCount >= maxCounter) {
                            reject();
                            return;
                        }
                        setTimeout(tryFn, nextBackoff);
                    };
                    tryFn();
                })];
        });
    });
}
exports.repeatedTry = repeatedTry;
/**
 * Generates the function name from an input sampler name.
 * @param samplerName Name of the sampler.
 */
function generateShaderFuncNameFromInputSamplerName(samplerName) {
    util_1.assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, function () { return 'empty string found for sampler name'; });
    return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);
}
exports.generateShaderFuncNameFromInputSamplerName = generateShaderFuncNameFromInputSamplerName;
/**
 * Generates the function name from an input sampler name at output coordinates.
 * @param samplerName Name of the sampler.
 */
function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName) {
    util_1.assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, function () { return 'empty string found for sampler name'; });
    return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';
}
exports.generateShaderFuncNameFromInputSamplerNameAtOutCoords = generateShaderFuncNameFromInputSamplerNameAtOutCoords;
/** Returns a new input shape (a copy) that has a squeezed logical shape. */
function squeezeInputShape(inputShape, squeezedShape) {
    // Deep copy.
    var newInputShape = JSON.parse(JSON.stringify(inputShape));
    newInputShape = squeezedShape;
    return newInputShape;
}
exports.squeezeInputShape = squeezeInputShape;
/** Returns a list of squeezed parameters for shader functions */
function getSqueezedParams(params, keptDims) {
    return keptDims.map(function (d) { return params[d]; }).join(', ');
}
exports.getSqueezedParams = getSqueezedParams;
/** Returns the data type for different ranks. */
function getCoordsDataType(rank) {
    if (rank <= 1) {
        return 'int';
    }
    else if (rank === 2) {
        return 'ivec2';
    }
    else if (rank === 3) {
        return 'ivec3';
    }
    else if (rank === 4) {
        return 'ivec4';
    }
    else if (rank === 5) {
        return 'ivec5';
    }
    else if (rank === 6) {
        return 'ivec6';
    }
    else {
        throw Error("GPU for rank " + rank + " is not yet supported");
    }
}
exports.getCoordsDataType = getCoordsDataType;
function getGlChannels(rank) {
    if (rank === void 0) { rank = 6; }
    return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);
}
exports.getGlChannels = getGlChannels;


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/webgl-context-factory.ts":
/*!************************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/webgl-context-factory.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createNewWebGLContext = exports.createWebGLContext = void 0;
var instrument_1 = __webpack_require__(/*! ../../instrument */ "./lib/onnxjs/instrument.ts");
var webgl_context_1 = __webpack_require__(/*! ./webgl-context */ "./lib/onnxjs/backends/webgl/webgl-context.ts");
var cache = {};
/**
 * This factory function creates proper WebGLRenderingContext based on
 * the current browsers capabilities
 * The order is from higher/most recent versions to most basic
 */
function createWebGLContext(contextId) {
    var context;
    if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {
        context = cache.webgl2;
    }
    else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {
        context = cache.webgl;
    }
    context = context || createNewWebGLContext(contextId);
    contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';
    var gl = context.gl;
    cache[contextId] = context;
    if (gl.isContextLost()) {
        delete cache[contextId];
        return createWebGLContext(contextId);
    }
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.DITHER);
    gl.disable(gl.POLYGON_OFFSET_FILL);
    gl.disable(gl.SAMPLE_COVERAGE);
    gl.enable(gl.SCISSOR_TEST);
    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    return context;
}
exports.createWebGLContext = createWebGLContext;
function createNewWebGLContext(contextId) {
    var canvas = createCanvas();
    var contextAttributes = {
        alpha: false,
        depth: false,
        antialias: false,
        stencil: false,
        preserveDrawingBuffer: false,
        premultipliedAlpha: false,
        failIfMajorPerformanceCaveat: false
    };
    var gl;
    var ca = contextAttributes;
    if (!contextId || contextId === 'webgl2') {
        gl = canvas.getContext('webgl2', ca);
        if (gl) {
            try {
                return new webgl_context_1.WebGLContext(gl, 2);
            }
            catch (err) {
                instrument_1.Logger.warning('GlContextFactory', "failed to create WebGLContext using contextId 'webgl2'. Error: " + err);
            }
        }
    }
    if (!contextId || contextId === 'webgl') {
        gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca);
        if (gl) {
            try {
                return new webgl_context_1.WebGLContext(gl, 1);
            }
            catch (err) {
                instrument_1.Logger.warning('GlContextFactory', "failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: " + err);
            }
        }
    }
    throw new Error('WebGL is not supported');
}
exports.createNewWebGLContext = createNewWebGLContext;
function createCanvas() {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    return canvas;
}


/***/ }),

/***/ "./lib/onnxjs/backends/webgl/webgl-context.ts":
/*!****************************************************!*\
  !*** ./lib/onnxjs/backends/webgl/webgl-context.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLContext = exports.linearSearchLastTrue = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var DataEncoders = __importStar(__webpack_require__(/*! ./texture-data-encoder */ "./lib/onnxjs/backends/webgl/texture-data-encoder.ts"));
var utils_1 = __webpack_require__(/*! ./utils */ "./lib/onnxjs/backends/webgl/utils.ts");
function linearSearchLastTrue(arr) {
    var i = 0;
    for (; i < arr.length; ++i) {
        var isDone = arr[i]();
        if (!isDone) {
            break;
        }
    }
    return i - 1;
}
exports.linearSearchLastTrue = linearSearchLastTrue;
/**
 * Abstraction and wrapper around WebGLRenderingContext and its operations
 */
var WebGLContext = /** @class */ (function () {
    function WebGLContext(gl, version) {
        this.frameBufferBound = false;
        this.itemsToPoll = [];
        this.gl = gl;
        this.version = version;
        this.getExtensions();
        this.vertexbuffer = this.createVertexbuffer();
        this.framebuffer = this.createFramebuffer();
        this.queryVitalParameters();
    }
    WebGLContext.prototype.allocateTexture = function (width, height, encoder, data) {
        var gl = this.gl;
        // create the texture
        var texture = gl.createTexture();
        // bind the texture so the following methods effect this texture.
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        var buffer = data ? encoder.encode(data, width * height) : null;
        gl.texImage2D(gl.TEXTURE_2D, 0, // Level of detail.
        encoder.internalFormat, width, height, 0, // Always 0 in OpenGL ES.
        encoder.format, encoder.textureType, buffer);
        this.checkError();
        return texture;
    };
    WebGLContext.prototype.updateTexture = function (texture, width, height, encoder, data) {
        var gl = this.gl;
        gl.bindTexture(gl.TEXTURE_2D, texture);
        var buffer = encoder.encode(data, width * height);
        gl.texSubImage2D(gl.TEXTURE_2D, 0, // level
        0, // xoffset
        0, // yoffset
        width, height, encoder.format, encoder.textureType, buffer);
        this.checkError();
    };
    WebGLContext.prototype.attachFramebuffer = function (texture, width, height) {
        var gl = this.gl;
        // Make it the target for framebuffer operations - including rendering.
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs
        this.checkError();
        gl.viewport(0, 0, width, height);
        gl.scissor(0, 0, width, height);
    };
    WebGLContext.prototype.readTexture = function (texture, width, height, dataSize, dataType, channels) {
        var gl = this.gl;
        if (!channels) {
            channels = 1;
        }
        if (!this.frameBufferBound) {
            this.attachFramebuffer(texture, width, height);
        }
        var encoder = this.getEncoder(dataType, channels);
        var buffer = encoder.allocate(width * height);
        // bind texture to framebuffer
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // 0, we aren't using MIPMAPs
        // TODO: Check if framebuffer is ready
        gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);
        this.checkError();
        // unbind FB
        return encoder.decode(buffer, dataSize);
    };
    WebGLContext.prototype.isFramebufferReady = function () {
        // TODO: Implement logic to check if the framebuffer is ready
        return true;
    };
    WebGLContext.prototype.getActiveTexture = function () {
        var gl = this.gl;
        var n = gl.getParameter(this.gl.ACTIVE_TEXTURE);
        return "TEXTURE" + (n - gl.TEXTURE0);
    };
    WebGLContext.prototype.getTextureBinding = function () {
        return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
    };
    WebGLContext.prototype.getFramebufferBinding = function () {
        return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
    };
    WebGLContext.prototype.setVertexAttributes = function (positionHandle, textureCoordHandle) {
        var gl = this.gl;
        gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);
        gl.enableVertexAttribArray(positionHandle);
        if (textureCoordHandle !== -1) {
            gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);
            gl.enableVertexAttribArray(textureCoordHandle);
        }
        this.checkError();
    };
    WebGLContext.prototype.createProgram = function (vertexShader, fragShader) {
        var gl = this.gl;
        var program = gl.createProgram();
        // the program consists of our shaders
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragShader);
        gl.linkProgram(program);
        return program;
    };
    WebGLContext.prototype.compileShader = function (shaderSource, shaderType) {
        var gl = this.gl;
        var shader = gl.createShader(shaderType);
        if (!shader) {
            throw new Error("createShader() returned null with type " + shaderType);
        }
        gl.shaderSource(shader, shaderSource);
        gl.compileShader(shader);
        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {
            throw new Error("Failed to compile shader: " + gl.getShaderInfoLog(shader) + "\nShader source:\n" + shaderSource);
        }
        return shader;
    };
    WebGLContext.prototype.deleteShader = function (shader) {
        this.gl.deleteShader(shader);
    };
    WebGLContext.prototype.bindTextureToUniform = function (texture, position, uniformHandle) {
        var gl = this.gl;
        gl.activeTexture(gl.TEXTURE0 + position);
        this.checkError();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        this.checkError();
        gl.uniform1i(uniformHandle, position);
        this.checkError();
    };
    WebGLContext.prototype.draw = function () {
        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);
        this.checkError();
    };
    WebGLContext.prototype.checkError = function () {
        if (onnxruntime_common_1.env.debug) {
            var gl = this.gl;
            var error = gl.getError();
            var label = '';
            switch (error) {
                case (gl.NO_ERROR):
                    return;
                case (gl.INVALID_ENUM):
                    label = 'INVALID_ENUM';
                    break;
                case (gl.INVALID_VALUE):
                    label = 'INVALID_VALUE';
                    break;
                case (gl.INVALID_OPERATION):
                    label = 'INVALID_OPERATION';
                    break;
                case (gl.INVALID_FRAMEBUFFER_OPERATION):
                    label = 'INVALID_FRAMEBUFFER_OPERATION';
                    break;
                case (gl.OUT_OF_MEMORY):
                    label = 'OUT_OF_MEMORY';
                    break;
                case (gl.CONTEXT_LOST_WEBGL):
                    label = 'CONTEXT_LOST_WEBGL';
                    break;
                default:
                    label = "Unknown WebGL Error: " + error.toString(16);
            }
            throw new Error(label);
        }
    };
    WebGLContext.prototype.deleteTexture = function (texture) {
        this.gl.deleteTexture(texture);
    };
    WebGLContext.prototype.deleteProgram = function (program) {
        this.gl.deleteProgram(program);
    };
    WebGLContext.prototype.getEncoder = function (dataType, channels, usage) {
        if (usage === void 0) { usage = 0 /* Default */; }
        if (this.version === 2) {
            return new DataEncoders.RedFloat32DataEncoder(this.gl, channels);
        }
        switch (dataType) {
            case 'float':
                if (usage === 1 /* UploadOnly */ || this.isRenderFloat32Supported) {
                    return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);
                }
                else {
                    return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels, this.textureHalfFloatExtension.HALF_FLOAT_OES);
                }
            case 'int':
                throw new Error('not implemented');
            case 'byte':
                return new DataEncoders.Uint8DataEncoder(this.gl, channels);
            default:
                throw new Error("Invalid dataType: " + dataType);
        }
    };
    WebGLContext.prototype.clearActiveTextures = function () {
        var gl = this.gl;
        for (var unit = 0; unit < this.maxTextureImageUnits; ++unit) {
            gl.activeTexture(gl.TEXTURE0 + unit);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
    };
    WebGLContext.prototype.dispose = function () {
        if (this.disposed) {
            return;
        }
        var gl = this.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.deleteFramebuffer(this.framebuffer);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.deleteBuffer(this.vertexbuffer);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        gl.finish();
        this.disposed = true;
    };
    WebGLContext.prototype.createDefaultGeometry = function () {
        // Sets of x,y,z(=0),s,t coordinates.
        return new Float32Array([
            -1.0, 1.0, 0.0, 0.0, 1.0,
            -1.0, -1.0, 0.0, 0.0, 0.0,
            1.0, 1.0, 0.0, 1.0, 1.0,
            1.0, -1.0, 0.0, 1.0, 0.0 // lower right
        ]);
    };
    WebGLContext.prototype.createVertexbuffer = function () {
        var gl = this.gl;
        var buffer = gl.createBuffer();
        if (!buffer) {
            throw new Error('createBuffer() returned null');
        }
        var geometry = this.createDefaultGeometry();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);
        this.checkError();
        return buffer;
    };
    WebGLContext.prototype.createFramebuffer = function () {
        var fb = this.gl.createFramebuffer();
        if (!fb) {
            throw new Error('createFramebuffer returned null');
        }
        return fb;
    };
    WebGLContext.prototype.queryVitalParameters = function () {
        var gl = this.gl;
        this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();
        this.isRenderFloat32Supported = this.checkRenderFloat32();
        this.isFloat32DownloadSupported = this.checkFloat32Download();
        if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {
            throw new Error('both float32 and float16 TextureType are not supported');
        }
        this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();
        // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
        this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
        // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);
        // this.webglVendor = gl.getParameter(gl.VENDOR);
        // this.webglVersion = gl.getParameter(gl.VERSION);
        if (this.version === 2) {
            // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);
            // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);
            // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);
            // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);
        }
    };
    WebGLContext.prototype.getExtensions = function () {
        if (this.version === 2) {
            this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');
            this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');
        }
        else {
            this.textureFloatExtension = this.gl.getExtension('OES_texture_float');
            this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');
        }
    };
    WebGLContext.prototype.checkFloatTextureAttachableToFrameBuffer = function () {
        // test whether Float32 texture is supported:
        // STEP.1 create a float texture
        var gl = this.gl;
        var texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        // eslint-disable-next-line @typescript-eslint/naming-convention
        var internalFormat = this.version === 2 ? gl.RGBA32F : gl.RGBA;
        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
        // STEP.2 bind a frame buffer
        var frameBuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
        // STEP.3 attach texture to framebuffer
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        // STEP.4 test whether framebuffer is complete
        var isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.deleteTexture(texture);
        gl.deleteFramebuffer(frameBuffer);
        return isComplete;
    };
    WebGLContext.prototype.checkRenderFloat32 = function () {
        if (this.version === 2) {
            if (!this.colorBufferFloatExtension) {
                return false;
            }
        }
        else {
            if (!this.textureFloatExtension) {
                return false;
            }
        }
        return this.isFloatTextureAttachableToFrameBuffer;
    };
    WebGLContext.prototype.checkFloat32Download = function () {
        if (this.version === 2) {
            if (!this.colorBufferFloatExtension) {
                return false;
            }
        }
        else {
            if (!this.textureFloatExtension) {
                return false;
            }
            if (!this.gl.getExtension('WEBGL_color_buffer_float')) {
                return false;
            }
        }
        return this.isFloatTextureAttachableToFrameBuffer;
    };
    /**
     * Check whether GL_BLEND is supported
     */
    WebGLContext.prototype.checkFloat32Blend = function () {
        // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported
        // https://github.com/microsoft/onnxjs/issues/145
        var gl = this.gl;
        var texture;
        var frameBuffer;
        var vertexShader;
        var fragmentShader;
        var program;
        try {
            texture = gl.createTexture();
            frameBuffer = gl.createFramebuffer();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            // eslint-disable-next-line @typescript-eslint/naming-convention
            var internalFormat = this.version === 2 ? gl.RGBA32F : gl.RGBA;
            gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            gl.enable(gl.BLEND);
            vertexShader = gl.createShader(gl.VERTEX_SHADER);
            if (!vertexShader) {
                return false;
            }
            gl.shaderSource(vertexShader, 'void main(){}');
            gl.compileShader(vertexShader);
            fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            if (!fragmentShader) {
                return false;
            }
            gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');
            gl.compileShader(fragmentShader);
            program = gl.createProgram();
            if (!program) {
                return false;
            }
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.useProgram(program);
            gl.drawArrays(gl.POINTS, 0, 1);
            return gl.getError() === gl.NO_ERROR;
        }
        finally {
            gl.disable(gl.BLEND);
            if (program) {
                gl.deleteProgram(program);
            }
            if (vertexShader) {
                gl.deleteShader(vertexShader);
            }
            if (fragmentShader) {
                gl.deleteShader(fragmentShader);
            }
            if (frameBuffer) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                gl.deleteFramebuffer(frameBuffer);
            }
            if (texture) {
                gl.bindTexture(gl.TEXTURE_2D, null);
                gl.deleteTexture(texture);
            }
        }
    };
    WebGLContext.prototype.beginTimer = function () {
        if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
            var gl2 = this.gl;
            var ext = this.disjointTimerQueryWebgl2Extension;
            var query = gl2.createQuery();
            gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);
            return query;
        }
        else {
            // TODO: add webgl 1 handling.
            throw new Error('WebGL1 profiling currently not supported.');
        }
    };
    WebGLContext.prototype.endTimer = function () {
        if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
            var gl2 = this.gl;
            var ext = this.disjointTimerQueryWebgl2Extension;
            gl2.endQuery(ext.TIME_ELAPSED_EXT);
            return;
        }
        else {
            // TODO: add webgl 1 handling.
            throw new Error('WebGL1 profiling currently not supported');
        }
    };
    WebGLContext.prototype.isTimerResultAvailable = function (query) {
        var available = false, disjoint = false;
        if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
            var gl2 = this.gl;
            var ext = this.disjointTimerQueryWebgl2Extension;
            available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);
            disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);
        }
        else {
            // TODO: add webgl 1 handling.
            throw new Error('WebGL1 profiling currently not supported');
        }
        return available && !disjoint;
    };
    WebGLContext.prototype.getTimerResult = function (query) {
        var timeElapsed = 0;
        if (this.version === 2) {
            var gl2 = this.gl;
            timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);
            gl2.deleteQuery(query);
        }
        else {
            // TODO: add webgl 1 handling.
            throw new Error('WebGL1 profiling currently not supported');
        }
        // return miliseconds
        return timeElapsed / 1000000;
    };
    WebGLContext.prototype.waitForQueryAndGetTime = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.repeatedTry(function () { return _this.isTimerResultAvailable(query); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.getTimerResult(query)];
                }
            });
        });
    };
    WebGLContext.prototype.createAndWaitForFence = function () {
        return __awaiter(this, void 0, void 0, function () {
            var fenceContext;
            return __generator(this, function (_a) {
                fenceContext = this.createFence(this.gl);
                return [2 /*return*/, this.pollFence(fenceContext)];
            });
        });
    };
    WebGLContext.prototype.createFence = function (gl) {
        var isFencePassed;
        var gl2 = gl;
        var query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);
        gl.flush();
        if (query === null) {
            isFencePassed = function () { return true; };
        }
        else {
            isFencePassed = function () {
                var status = gl2.clientWaitSync(query, 0, 0);
                return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;
            };
        }
        return { query: query, isFencePassed: isFencePassed };
    };
    WebGLContext.prototype.pollFence = function (fenceContext) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        void _this.addItemToPoll(function () { return fenceContext.isFencePassed(); }, function () { return resolve(); });
                    })];
            });
        });
    };
    WebGLContext.prototype.pollItems = function () {
        // Find the last query that has finished.
        var index = linearSearchLastTrue(this.itemsToPoll.map(function (x) { return x.isDoneFn; }));
        for (var i = 0; i <= index; ++i) {
            var resolveFn = this.itemsToPoll[i].resolveFn;
            resolveFn();
        }
        this.itemsToPoll = this.itemsToPoll.slice(index + 1);
    };
    WebGLContext.prototype.addItemToPoll = function (isDoneFn, resolveFn) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.itemsToPoll.push({ isDoneFn: isDoneFn, resolveFn: resolveFn });
                        if (this.itemsToPoll.length > 1) {
                            // We already have a running loop that polls.
                            return [2 /*return*/];
                        }
                        // Start a new loop that polls.
                        return [4 /*yield*/, utils_1.repeatedTry(function () {
                                _this.pollItems();
                                // End the loop if no more items to poll.
                                return _this.itemsToPoll.length === 0;
                            })];
                    case 1:
                        // Start a new loop that polls.
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return WebGLContext;
}());
exports.WebGLContext = WebGLContext;


/***/ }),

/***/ "./lib/onnxjs/execution-plan.ts":
/*!**************************************!*\
  !*** ./lib/onnxjs/execution-plan.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExecutionPlan = void 0;
var instrument_1 = __webpack_require__(/*! ./instrument */ "./lib/onnxjs/instrument.ts");
var KernelOp = /** @class */ (function () {
    function KernelOp(op, node) {
        this.op = op;
        this.node = node;
    }
    return KernelOp;
}());
var ExecutionPlan = /** @class */ (function () {
    function ExecutionPlan(graph, ops, profiler) {
        this.graph = graph;
        this.profiler = profiler;
        this.initialize(ops);
    }
    ExecutionPlan.prototype.initialize = function (ops) {
        var _this = this;
        this.profiler.event('session', 'ExecutionPlan.initialize', function () {
            var graphNodes = _this.graph.getNodes();
            if (graphNodes.length !== ops.length) {
                throw new Error('The size of nodes and OPs do not match.');
            }
            _this._ops = ops.map(function (op, i) { return new KernelOp(op, graphNodes[i]); });
            _this.reset();
            // look for starter node(s)
            _this._starter = [];
            _this._ops.forEach(function (op, i) {
                var e_1, _a;
                var resolved = true;
                try {
                    for (var _b = __values(op.node.inputs), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var input = _c.value;
                        if (!_this._values[input] // not an initialized input
                            && _this.graph.getInputIndices().indexOf(input) === -1 // not model input
                        ) {
                            resolved = false;
                            break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (resolved) {
                    _this._starter.push(i);
                }
            });
        });
    };
    ExecutionPlan.prototype.reset = function () {
        this._values = this.graph.getValues().map(function (i) { return i.tensor; });
    };
    ExecutionPlan.prototype.execute = function (sessionHandler, modelInputs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.profiler.event('session', 'ExecutionPlan.execute', function () { return __awaiter(_this, void 0, void 0, function () {
                        var inferenceHandler, graphInputs, sequence, graphValues, graphNodes, rear, _loop_1, this_1, output, i, outputIndex, outputTensor;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // reset mediem result
                                    this.reset();
                                    inferenceHandler = sessionHandler.createInferenceHandler();
                                    graphInputs = this.graph.getInputIndices();
                                    if (modelInputs.length !== graphInputs.length) {
                                        throw new Error("number of input tensors don't match the number of inputs to the model: actual: " + modelInputs.length + " expected: " + graphInputs.length);
                                    }
                                    modelInputs.forEach(function (input, i) {
                                        var index = graphInputs[i];
                                        _this._values[index] = input;
                                    });
                                    sequence = this._starter.slice(0);
                                    graphValues = this.graph.getValues();
                                    graphNodes = this.graph.getNodes();
                                    rear = 0;
                                    _loop_1 = function () {
                                        var thisOpIndex, thisOp, inputList, inputTensors, outputList, downstreamNodes;
                                        return __generator(this, function (_b) {
                                            switch (_b.label) {
                                                case 0:
                                                    thisOpIndex = sequence[rear++];
                                                    thisOp = this_1._ops[thisOpIndex];
                                                    inputList = thisOp.node.inputs.map(function (i) { return _this._values[i]; });
                                                    if (inputList.indexOf(undefined) !== -1) {
                                                        throw new Error("unresolved input detected: op: " + thisOp.node);
                                                    }
                                                    inputTensors = inputList;
                                                    instrument_1.Logger.verbose('ExecPlan', "Runing op:" + thisOp.node.name + " (" + inputTensors.map(function (t, i) { return "'" + thisOp.node.inputs[i] + "': " + t.type + "[" + t.dims.join(',') + "]"; }).join(', ') + ")");
                                                    return [4 /*yield*/, this_1.profiler.event('node', thisOp.node.name, function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                                            return [2 /*return*/, thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context)];
                                                        }); }); })];
                                                case 1:
                                                    outputList = _b.sent();
                                                    // check output
                                                    if (outputList.length !== thisOp.node.outputs.length) {
                                                        throw new Error('the size of output does not match model definition.');
                                                    }
                                                    // fill value
                                                    outputList.forEach(function (output, i) {
                                                        var j = thisOp.node.outputs[i];
                                                        if (_this._values[j]) {
                                                            throw new Error("output [" + j + "] already has value: op:" + thisOp.node.name);
                                                        }
                                                        _this._values[j] = output;
                                                    });
                                                    downstreamNodes = new Set();
                                                    outputList.forEach(function (output, i) {
                                                        var e_2, _a, e_3, _b;
                                                        var j = thisOp.node.outputs[i];
                                                        try {
                                                            for (var _c = (e_2 = void 0, __values(graphValues[j].to)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                                                var currentDownstreamNodeIndex = _d.value;
                                                                var currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];
                                                                var resolved = true;
                                                                try {
                                                                    for (var _e = (e_3 = void 0, __values(currentDownstreamNode.inputs)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                                                        var k = _f.value;
                                                                        if (!_this._values[k]) {
                                                                            resolved = false;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                                                finally {
                                                                    try {
                                                                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                                                                    }
                                                                    finally { if (e_3) throw e_3.error; }
                                                                }
                                                                if (resolved) {
                                                                    downstreamNodes.add(currentDownstreamNodeIndex);
                                                                }
                                                            }
                                                        }
                                                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                                        finally {
                                                            try {
                                                                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                                                            }
                                                            finally { if (e_2) throw e_2.error; }
                                                        }
                                                    });
                                                    sequence.push.apply(sequence, __spreadArray([], __read(downstreamNodes)));
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_1 = this;
                                    _a.label = 1;
                                case 1:
                                    if (!(rear < sequence.length)) return [3 /*break*/, 3];
                                    return [5 /*yield**/, _loop_1()];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 1];
                                case 3:
                                    output = [];
                                    i = 0;
                                    _a.label = 4;
                                case 4:
                                    if (!(i < this.graph.getOutputIndices().length)) return [3 /*break*/, 9];
                                    outputIndex = this.graph.getOutputIndices()[i];
                                    outputTensor = this._values[outputIndex];
                                    if (outputTensor === undefined) {
                                        throw new Error("required output [" + outputIndex + "] does not have value");
                                    }
                                    if (!(outputIndex === 0)) return [3 /*break*/, 6];
                                    return [4 /*yield*/, outputTensor.getData()];
                                case 5:
                                    _a.sent();
                                    return [3 /*break*/, 7];
                                case 6:
                                    // eslint-disable-next-line no-unused-expressions
                                    outputTensor.data;
                                    _a.label = 7;
                                case 7:
                                    output.push(outputTensor);
                                    _a.label = 8;
                                case 8:
                                    i++;
                                    return [3 /*break*/, 4];
                                case 9:
                                    instrument_1.Logger.verbose('ExecPlan', 'disposing of inferenceHandler');
                                    inferenceHandler.dispose();
                                    return [2 /*return*/, output];
                            }
                        });
                    }); })];
            });
        });
    };
    return ExecutionPlan;
}());
exports.ExecutionPlan = ExecutionPlan;


/***/ }),

/***/ "./lib/onnxjs/graph.ts":
/*!*****************************!*\
  !*** ./lib/onnxjs/graph.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Graph = void 0;
var onnx_proto_1 = __webpack_require__(/*! onnx-proto */ "./node_modules/onnx-proto/dist/onnx.js");
var attribute_1 = __webpack_require__(/*! ./attribute */ "./lib/onnxjs/attribute.ts");
var ort_generated_1 = __webpack_require__(/*! ./ort-schema/ort-generated */ "./lib/onnxjs/ort-schema/ort-generated.ts");
var ortFbs = ort_generated_1.onnxruntime.experimental.fbs;
var tensor_1 = __webpack_require__(/*! ./tensor */ "./lib/onnxjs/tensor.ts");
var util_1 = __webpack_require__(/*! ./util */ "./lib/onnxjs/util.ts");
// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare
exports.Graph = {
    /**
     * construct a graph from a graph protobuf type
     */
    from: function (graphProto, initializer) {
        return new GraphImpl(graphProto, initializer);
    },
};
var Value = /** @class */ (function () {
    function Value(valueInfo) {
        this._from = undefined;
        this._to = [];
        this.tensor = undefined;
        this.type = undefined;
        if (valueInfo) {
            this.type = util_1.ProtoUtil.tensorValueTypeFromProto(valueInfo.type.tensorType);
        }
    }
    Object.defineProperty(Value.prototype, "from", {
        get: function () {
            return this._from;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Value.prototype, "to", {
        get: function () {
            return this._to;
        },
        enumerable: false,
        configurable: true
    });
    return Value;
}());
var Node = /** @class */ (function () {
    function Node(_nodeProto, name) {
        if (_nodeProto instanceof onnx_proto_1.onnx.NodeProto) {
            this.name = _nodeProto.name;
            this.opType = _nodeProto.opType;
            this.attributes = new attribute_1.Attribute(_nodeProto.attribute);
        }
        else if (_nodeProto instanceof ortFbs.Node) {
            this.name = name !== null && name !== void 0 ? name : _nodeProto.name();
            this.opType = _nodeProto.opType();
            this.attributes = new attribute_1.Attribute(util_1.ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));
        }
        this.inputs = [];
        this.outputs = [];
        this.executeNode = true;
    }
    return Node;
}());
var GraphImpl = /** @class */ (function () {
    function GraphImpl(graph, graphInitializer) {
        if (!graph) {
            throw new TypeError('graph is empty');
        }
        // build the graph - will throw exceptions if something fatal is detected
        this.buildGraph(graph);
        // execute any transformation logic for the graph (if applicable)
        this.transformGraph(graphInitializer);
        // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected
        this.checkIsAcyclic();
    }
    GraphImpl.prototype.getInputIndices = function () {
        return this._allInputIndices;
    };
    GraphImpl.prototype.getInputNames = function () {
        return this._allInputNames;
    };
    GraphImpl.prototype.getOutputIndices = function () {
        return this._allOutputIndices;
    };
    GraphImpl.prototype.getOutputNames = function () {
        return this._allOutputNames;
    };
    GraphImpl.prototype.getValues = function () {
        return this._allData;
    };
    GraphImpl.prototype.getNodes = function () {
        return this._nodes;
    };
    GraphImpl.prototype.buildGraph = function (graph) {
        // build the graph - will throw exceptions if something fatal is detected
        if (graph instanceof onnx_proto_1.onnx.GraphProto) {
            this.buildGraphFromOnnxFormat(graph);
        }
        else if (graph instanceof ortFbs.Graph) {
            this.buildGraphFromOrtFormat(graph);
        }
        else {
            throw new TypeError('Graph type is not supported.');
        }
    };
    GraphImpl.prototype.buildGraphFromOnnxFormat = function (graph) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        var dataIndices = new Map();
        this._allData = [];
        this._allInputIndices = [];
        this._allInputNames = [];
        this._allOutputIndices = [];
        this._allOutputNames = [];
        this._nodes = [];
        var nodesIndices = new Map();
        // scan all inputs
        if (!graph.input) {
            throw new Error('missing information in graph: input');
        }
        var inputValueNames = [];
        try {
            for (var _g = __values(graph.input), _h = _g.next(); !_h.done; _h = _g.next()) {
                var i = _h.value;
                if (dataIndices.has(i.name)) {
                    throw new Error("duplicated input name: " + i.name);
                }
                var currentIndex = this._allData.push(new Value(i)) - 1;
                dataIndices.set(i.name, currentIndex);
                inputValueNames.push(i.name);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // scan all initializers
        if (!graph.initializer) {
            throw new Error('missing information in graph: initializer');
        }
        try {
            for (var _j = __values(graph.initializer), _k = _j.next(); !_k.done; _k = _j.next()) {
                var i = _k.value;
                var index = dataIndices.get(i.name);
                if (index === undefined) {
                    var value = new Value();
                    value.type = {
                        shape: { dims: util_1.ProtoUtil.tensorDimsFromProto(i.dims) },
                        tensorType: util_1.ProtoUtil.tensorDataTypeFromProto(i.dataType)
                    };
                    index = this._allData.push(value) - 1;
                    dataIndices.set(i.name, index);
                }
                this._allData[index]._from = -1;
                this._allData[index].tensor = tensor_1.Tensor.fromProto(i);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // filter out input indices
        for (var i = 0; i < this._allData.length; i++) {
            if (!this._allData[i].tensor) {
                this._allInputIndices.push(i);
                this._allInputNames.push(inputValueNames[i]);
            }
        }
        // scan all outputs
        if (!graph.output) {
            throw new Error('missing information in graph: output');
        }
        try {
            for (var _l = __values(graph.output), _m = _l.next(); !_m.done; _m = _l.next()) {
                var i = _m.value;
                if (dataIndices.has(i.name)) {
                    throw new Error("duplicated output name: " + i.name);
                }
                var currentIndex = this._allData.push(new Value(i)) - 1;
                dataIndices.set(i.name, currentIndex);
                this._allOutputIndices.push(currentIndex);
                this._allOutputNames.push(i.name);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // scan all nodes
        if (!graph.node) {
            throw new Error('missing information in graph: node');
        }
        try {
            for (var _o = __values(graph.node), _p = _o.next(); !_p.done; _p = _o.next()) {
                var nodeProto = _p.value;
                if (!nodeProto.name) {
                    // assign a name to the node if it doesn't have one
                    for (var pick = 0;; pick++) {
                        var name_1 = "unnamed_" + nodeProto.opType + "_" + pick;
                        if (!nodesIndices.has(name_1)) {
                            nodeProto.name = name_1;
                            break;
                        }
                    }
                }
                if (nodesIndices.has(nodeProto.name)) {
                    throw new Error("duplicated node name: " + nodeProto.name);
                }
                var currentIndex = this._nodes.push(new Node(nodeProto)) - 1;
                nodesIndices.set(nodeProto.name, currentIndex);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
            }
            finally { if (e_4) throw e_4.error; }
        }
        // scan node's outputs
        for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i];
            var nodeProto = graph.node[i];
            if (!nodeProto.output) {
                throw new Error("missing output for node: " + nodeProto.name);
            }
            try {
                for (var _q = (e_5 = void 0, __values(nodeProto.output)), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var output = _r.value;
                    var dataIndex = dataIndices.get(output);
                    if (typeof dataIndex === 'undefined') {
                        dataIndex = this._allData.push(new Value()) - 1;
                        dataIndices.set(output, dataIndex);
                    }
                    node.outputs.push(dataIndex);
                    if (this._allData[dataIndex]._from !== undefined) {
                        throw new Error("multiple nodes output to one data value: " + dataIndex);
                    }
                    this._allData[dataIndex]._from = i;
                    // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the
                    // operator and ignore the node from the graph
                    if (nodeProto.opType === 'Constant') {
                        if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {
                            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');
                        }
                        if (!nodeProto.output || nodeProto.output.length !== 1) {
                            throw new Error('missing output or incorrect number of outputs for this Constant operator');
                        }
                        node.outputs.pop();
                        node.executeNode = false;
                        this._allData[dataIndex]._from = -1;
                        this._allData[dataIndex].tensor = tensor_1.Tensor.fromProto(nodeProto.attribute[0].t);
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        // scan node's inputs
        for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i];
            var nodeProto = graph.node[i];
            if (!nodeProto.input) {
                throw new Error("missing input for node: " + nodeProto.name);
            }
            try {
                for (var _s = (e_6 = void 0, __values(nodeProto.input)), _t = _s.next(); !_t.done; _t = _s.next()) {
                    var input = _t.value;
                    var dataIndex = dataIndices.get(input);
                    if (typeof dataIndex === 'undefined') {
                        throw new Error("unrecognized input '" + input + "' for node: " + nodeProto.name);
                    }
                    node.inputs.push(dataIndex);
                    this._allData[dataIndex]._to.push(i);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_t && !_t.done && (_f = _s.return)) _f.call(_s);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        return true;
    };
    GraphImpl.prototype.buildGraphFromOrtFormat = function (graph) {
        var _a, _b, _c;
        var dataIndices = new Map();
        this._allData = [];
        this._allInputIndices = [];
        this._allInputNames = [];
        this._allOutputIndices = [];
        this._allOutputNames = [];
        this._nodes = [];
        var nodesIndices = new Map();
        // scan all inputs
        var inputValueNames = [];
        for (var i = 0; i < graph.inputsLength(); i++) {
            var inputName = graph.inputs(i);
            if (dataIndices.has(inputName)) {
                throw new Error("duplicated input name: " + inputName);
            }
            // Find the input typeInfo from nodeargs
            for (var j = 0; j < graph.nodeArgsLength(); j++) {
                if (((_a = graph.nodeArgs(j)) === null || _a === void 0 ? void 0 : _a.name()) === inputName) {
                    var value = new Value();
                    var valueType = (_c = (_b = graph.nodeArgs(j)) === null || _b === void 0 ? void 0 : _b.type()) === null || _c === void 0 ? void 0 : _c.valueType();
                    if (valueType !== ortFbs.TypeInfoValue.tensor_type) {
                        throw new Error('Unexpected value type for the nodeArg.');
                    }
                    var valueInfo = graph.nodeArgs(j).type().value(new ortFbs.TensorTypeAndShape());
                    var type = util_1.ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());
                    var shape = valueInfo.shape();
                    var dims = [];
                    for (var k = 0; k < shape.dimLength(); k++) {
                        dims.push(util_1.LongUtil.longToNumber(shape.dim(k).value().dimValue()));
                    }
                    value.type = { shape: { dims: dims }, tensorType: type };
                    var currentIndex = this._allData.push(value) - 1;
                    dataIndices.set(inputName, currentIndex);
                    inputValueNames.push(inputName);
                }
            }
        }
        // check initializers
        for (var i = 0; i < graph.initializersLength(); i++) {
            var initializer = graph.initializers(i);
            var index = dataIndices.get(initializer.name());
            if (index === undefined) {
                var value = new Value();
                var dims = util_1.ProtoUtil.tensorDimsFromORTFormat(initializer);
                var type = util_1.ProtoUtil.tensorDataTypeFromProto(initializer.dataType());
                value.type = { shape: { dims: dims }, tensorType: type };
                index = this._allData.push(value) - 1;
                dataIndices.set(initializer.name(), index);
            }
            this._allData[index]._from = -1;
            this._allData[index].tensor = tensor_1.Tensor.fromOrtTensor(initializer);
        }
        // filter out input indices
        for (var i = 0; i < this._allData.length; i++) {
            if (!this._allData[i].tensor) {
                this._allInputIndices.push(i);
                this._allInputNames.push(inputValueNames[i]);
            }
        }
        // scan all outputs
        for (var i = 0; i < graph.outputsLength(); i++) {
            var outputName = graph.outputs(i);
            if (dataIndices.has(outputName)) {
                throw new Error("duplicated output name: " + outputName);
            }
            var currentIndex = this._allData.push(new Value()) - 1;
            dataIndices.set(outputName, currentIndex);
            this._allOutputIndices.push(currentIndex);
            this._allOutputNames.push(outputName);
        }
        // scan all nodes
        if (!graph.nodes) {
            throw new Error('missing information in graph: node');
        }
        for (var i = 0; i < graph.nodesLength(); i++) {
            var nodeProto = graph.nodes(i);
            var name_2 = nodeProto.name();
            if (!name_2) {
                // assign a name to the node if it doesn't have one
                for (var pick = 0;; pick++) {
                    name_2 = "unnamed_" + nodeProto.opType() + "_" + pick;
                    if (!nodesIndices.has(name_2)) {
                        // an unique name is found. break.
                        break;
                    }
                }
            }
            if (nodesIndices.has(name_2)) {
                throw new Error("duplicated node name: " + name_2);
            }
            var currentIndex = this._nodes.push(new Node(nodeProto, name_2)) - 1;
            nodesIndices.set(name_2, currentIndex);
        }
        // scan node's outputs
        for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i];
            var nodeProto = graph.nodes(i);
            if (nodeProto == null) {
                throw new Error("No node exists at index " + i);
            }
            if ((nodeProto === null || nodeProto === void 0 ? void 0 : nodeProto.outputsLength()) === 0) {
                throw new Error("missing output for node: " + nodeProto.name);
            }
            for (var j = 0; j < (nodeProto === null || nodeProto === void 0 ? void 0 : nodeProto.outputsLength()); j++) {
                var output = nodeProto === null || nodeProto === void 0 ? void 0 : nodeProto.outputs(j);
                var dataIndex = dataIndices.get(output);
                if (typeof dataIndex === 'undefined') {
                    dataIndex = this._allData.push(new Value()) - 1;
                    dataIndices.set(output, dataIndex);
                }
                node.outputs.push(dataIndex);
                if (this._allData[dataIndex]._from !== undefined) {
                    throw new Error("multiple nodes output to one data value: " + dataIndex);
                }
                this._allData[dataIndex]._from = i;
                // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the
                // operator and ignore the node from the graph
                if (nodeProto.opType() === 'Constant') {
                    if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0).t()) {
                        throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');
                    }
                    if (nodeProto.outputsLength() !== 1) {
                        throw new Error('missing output or incorrect number of outputs for this Constant operator');
                    }
                    node.outputs.pop();
                    node.executeNode = false;
                    this._allData[dataIndex]._from = -1;
                    this._allData[dataIndex].tensor = tensor_1.Tensor.fromOrtTensor(nodeProto.attributes(0).t());
                }
            }
        }
        // scan node's inputs
        for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i];
            var nodeProto = graph.nodes(i);
            if (nodeProto.inputsLength() === 0) {
                throw new Error("missing input for node: " + nodeProto.name);
            }
            for (var j = 0; j < nodeProto.inputsLength(); j++) {
                var input = nodeProto.inputs(j);
                var dataIndex = dataIndices.get(input);
                if (typeof dataIndex === 'undefined') {
                    throw new Error("unrecognized input '" + input + "' for node: " + nodeProto.name());
                }
                node.inputs.push(dataIndex);
                this._allData[dataIndex]._to.push(i);
            }
        }
    };
    GraphImpl.prototype.checkIsAcyclic = function () {
        var _this = this;
        // go through the graph and check for cycles or other fatal inconsistencies
        var starters = new Set();
        this._allInputIndices.forEach(function (i) {
            var data = _this._allData[i];
            data._to.forEach(function (j) {
                starters.add(j);
            });
        });
        // Iterative DFS to check for cycles
        var nodesStack = Array.from(starters);
        var nodesState = new Array(this._nodes.length).fill('white');
        var _loop_1 = function () {
            var nodeIndex = nodesStack.pop();
            // this node has now been processed completely. Mark this node 'black' to denote this.
            if (nodesState[nodeIndex] === 'gray') {
                nodesState[nodeIndex] = 'black';
            }
            else {
                // this node is under processing stage. mark this node 'gray' to denote this.
                nodesStack.push(nodeIndex);
                nodesState[nodeIndex] = 'gray';
                this_1._nodes[nodeIndex].outputs.forEach(function (outgoingEdgeIndex) {
                    var data = _this._allData[outgoingEdgeIndex];
                    if (typeof data.tensor !== 'undefined') {
                        throw new Error('node outputs should not be initialized');
                    }
                    if (data._from !== nodeIndex) {
                        throw new Error('from property of the Value object doesn\'t match index of Node being processed');
                    }
                    data._to.forEach(function (downstreamNodeIndex) {
                        // back edge found - cyclic
                        if (nodesState[downstreamNodeIndex] === 'gray') {
                            throw new Error('model graph is cyclic');
                        }
                        // tree edge found - continue processing by adding it to stack
                        else if (nodesState[downstreamNodeIndex] === 'white') {
                            nodesStack.push(downstreamNodeIndex);
                        }
                    });
                });
            }
        };
        var this_1 = this;
        while (nodesStack.length > 0) {
            _loop_1();
        }
    };
    GraphImpl.prototype.transformGraph = function (graphInitializer) {
        // apply common transform
        this.removeAllIdentityNodes();
        this.removeAllDropoutNodes();
        this.fuseConvActivationNodes();
        // apply initializer specific transform
        if (graphInitializer) {
            graphInitializer.transformGraph(this);
        }
        // finalize graph
        this.finalizeGraph();
    };
    /**
     * finalize the graph.
     *
     * this function should be called after all the transformation completed.
     * this function removes all unnecessary nodes and values from the graph
     */
    GraphImpl.prototype.finalizeGraph = function () {
        var _this = this;
        var offset = 0;
        var _loop_2 = function (i) {
            if (!this_2._nodes[i].executeNode) {
                // delete this node and shift all subsequent nodes up
                offset++;
                // delete all output values
                this_2._nodes[i].outputs.forEach(function (ind) {
                    _this._allData[ind]._from = -2;
                });
                this_2._nodes.splice(i, 1);
                i--;
                return out_i_1 = i, "continue";
            }
            if (offset > 0) {
                // update the value table
                this_2._nodes[i].inputs.forEach(function (value) {
                    var ind = _this._allData[value]._to.indexOf(i + offset);
                    if (ind !== -1) {
                        _this._allData[value]._to[ind] = i;
                    }
                });
                this_2._nodes[i].outputs.forEach(function (value) {
                    if (_this._allData[value]._from && _this._allData[value]._from === i + offset) {
                        _this._allData[value]._from = i;
                    }
                });
            }
            out_i_1 = i;
        };
        var this_2 = this, out_i_1;
        // delete all nodes that are not being executed
        for (var i = 0; i < this._nodes.length; i++) {
            _loop_2(i);
            i = out_i_1;
        }
        offset = 0;
        var _loop_3 = function (i) {
            // if current value is neither linked to next node, nor an output value, remove it.
            if (this_3._allData[i].from === -2 && this_3._allOutputIndices.indexOf(i + offset) === -1) {
                offset++;
                this_3._allData.splice(i, 1);
                i--;
                return out_i_2 = i, "continue";
            }
            if (offset > 0) {
                var ind_1 = -1;
                // if current value is neither an input value nor an initializer, find the node it's
                // coming from and update the corresponding node output
                if (this_3._allData[i].from !== undefined && this_3._allData[i].from !== -1) {
                    ind_1 = this_3._nodes[this_3._allData[i].from].outputs.indexOf(i + offset);
                    if (ind_1 !== -1) {
                        this_3._nodes[this_3._allData[i].from].outputs[ind_1] = i;
                    }
                }
                else {
                    // if current value is an input value, update its reference in inputIndices
                    ind_1 = this_3._allInputIndices.indexOf(i + offset);
                    if (ind_1 !== -1) {
                        this_3._allInputIndices[ind_1] = i;
                    }
                }
                // find the node that the current value is linking to and update its input reference
                this_3._allData[i].to.forEach(function (node) {
                    ind_1 = _this._nodes[node].inputs.indexOf(i + offset);
                    if (ind_1 !== -1) {
                        _this._nodes[node].inputs[ind_1] = i;
                    }
                });
                if (this_3._allData[i].to.length === 0) {
                    // if current value is a graph output, update its reference in outputIndices
                    ind_1 = this_3._allOutputIndices.indexOf(i + offset);
                    if (ind_1 !== -1) {
                        this_3._allOutputIndices[ind_1] = i;
                    }
                }
            }
            out_i_2 = i;
        };
        var this_3 = this, out_i_2;
        // delete all values that are not being referenced
        for (var i = 0; i < this._allData.length; i++) {
            _loop_3(i);
            i = out_i_2;
        }
    };
    /**
     * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes
     * @param nodeIndex The index of node to be deleted
     */
    GraphImpl.prototype.deleteNode = function (nodeIndex) {
        var e_7, _a;
        var node = this._nodes[nodeIndex];
        if (node.inputs.length > 1) {
            throw new Error('Node deletion with multiple inputs is not supported. ');
        }
        if (node.outputs.length > 1) {
            for (var i = 1; i < node.outputs.length; i++) {
                if (this._allData[node.outputs[i]].to.length > 0) {
                    throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');
                }
            }
        }
        // this node wil not be executed
        node.executeNode = false;
        var inputValueIndex = node.inputs[0];
        var outputValueIndex = node.outputs[0];
        var nodesConsumingOutput = this._allData[outputValueIndex].to;
        // remove this node from the to property of the input Value
        var delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);
        // should not happen
        if (delIndex === -1) {
            throw new Error('The Value object doesn\'t have the current Node in it\'s \'to\' property ');
        }
        this._allData[inputValueIndex].to.splice(delIndex, 1);
        // clear node indices consuming this output Value
        this._allData[outputValueIndex]._to = [];
        // if the output of this node is a graph output, adjust the index appropriately
        var index = this._allOutputIndices.indexOf(outputValueIndex);
        if (index !== -1) {
            this._allOutputIndices[index] = inputValueIndex;
        }
        // override the inputs for nodes consuming this node's output with the input to this node
        if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {
            try {
                for (var nodesConsumingOutput_1 = __values(nodesConsumingOutput), nodesConsumingOutput_1_1 = nodesConsumingOutput_1.next(); !nodesConsumingOutput_1_1.done; nodesConsumingOutput_1_1 = nodesConsumingOutput_1.next()) {
                    var nodeIndex_1 = nodesConsumingOutput_1_1.value;
                    var replaceIndex = this._nodes[nodeIndex_1].inputs.indexOf(outputValueIndex);
                    // should not happen
                    if (replaceIndex === -1) {
                        throw new Error('The Node object doesn\'t have the output Value in it\'s \'inputs\' property ');
                    }
                    this._nodes[nodeIndex_1].inputs[replaceIndex] = inputValueIndex;
                    this._allData[inputValueIndex].to.push(nodeIndex_1);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (nodesConsumingOutput_1_1 && !nodesConsumingOutput_1_1.done && (_a = nodesConsumingOutput_1.return)) _a.call(nodesConsumingOutput_1);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    };
    GraphImpl.prototype.removeAllDropoutNodes = function () {
        var e_8, _a;
        var nodeIndex = 0;
        try {
            for (var _b = __values(this._nodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                // weed out 'Dropout' nodes so that no time is wasted in execution
                if (node.opType === 'Dropout') {
                    // the node should have exactly 1 input and 1 or 2 outputs
                    if (node.inputs.length !== 1) {
                        throw new Error('Dropout nodes should only contain one input. ');
                    }
                    if (node.outputs.length !== 1 && node.outputs.length !== 2) {
                        throw new Error('Dropout nodes should contain either 1 or 2 output(s)');
                    }
                    // the second output should not be referenced by any other node
                    if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {
                        throw new Error('Dropout nodes\'s second output should not be referenced by other nodes');
                    }
                    this.deleteNode(nodeIndex);
                }
                nodeIndex++;
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_8) throw e_8.error; }
        }
    };
    GraphImpl.prototype.removeAllIdentityNodes = function () {
        var e_9, _a;
        var nodeIndex = 0;
        try {
            for (var _b = __values(this._nodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                // weed out 'Identity' nodes so that no time is wasted in execution
                if (node.opType === 'Identity') {
                    this.deleteNode(nodeIndex);
                }
                nodeIndex++;
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
    };
    GraphImpl.prototype.isActivation = function (n) {
        switch (n.opType) {
            // TODO: add other activation methods
            case 'Relu':
            case 'Sigmoid':
            case 'Clip':
                return true;
            default:
                return false;
        }
    };
    GraphImpl.prototype.fuseConvActivationNodes = function () {
        var e_10, _a;
        try {
            for (var _b = __values(this._nodes), _c = _b.next(); !_c.done; _c = _b.next()) {
                var node = _c.value;
                if (node.opType === 'Conv') {
                    var next = this._allData[node.outputs[0]]._to;
                    if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {
                        var child = this._nodes[next[0]];
                        node.attributes.set('__internal_activation', 'string', (child.opType));
                        // TODO: need add support for Clip after opset 11, which has min/max as inputs
                        if (child.opType === 'Clip') {
                            node.attributes.set('__clip_min', 'float', child.attributes.getFloat('min'));
                            node.attributes.set('__clip_max', 'float', child.attributes.getFloat('max'));
                        }
                        this.deleteNode(next[0]);
                    }
                }
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_10) throw e_10.error; }
        }
    };
    return GraphImpl;
}());


/***/ }),

/***/ "./lib/onnxjs/instrument.ts":
/*!**********************************!*\
  !*** ./lib/onnxjs/instrument.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.now = exports.Profiler = exports.Logger = void 0;
var NoOpLoggerProvider = /** @class */ (function () {
    function NoOpLoggerProvider() {
    }
    NoOpLoggerProvider.prototype.log = function (_severity, _content, _category) {
        // do nothing
    };
    return NoOpLoggerProvider;
}());
var ConsoleLoggerProvider = /** @class */ (function () {
    function ConsoleLoggerProvider() {
    }
    ConsoleLoggerProvider.prototype.log = function (severity, content, category) {
        // eslint-disable-next-line no-console
        console.log(this.color(severity) + " " + (category ? '\x1b[35m' + category + '\x1b[0m ' : '') + content);
    };
    ConsoleLoggerProvider.prototype.color = function (severity) {
        switch (severity) {
            case 'verbose':
                return '\x1b[34;40mv\x1b[0m';
            case 'info':
                return '\x1b[32mi\x1b[0m';
            case 'warning':
                return '\x1b[30;43mw\x1b[0m';
            case 'error':
                return '\x1b[31;40me\x1b[0m';
            case 'fatal':
                return '\x1b[101mf\x1b[0m';
            default:
                throw new Error("unsupported severity: " + severity);
        }
    };
    return ConsoleLoggerProvider;
}());
var SEVERITY_VALUE = {
    verbose: 1000,
    info: 2000,
    warning: 4000,
    error: 5000,
    fatal: 6000
};
var LOGGER_PROVIDER_MAP = (_a = {},
    _a['none'] = new NoOpLoggerProvider(),
    _a['console'] = new ConsoleLoggerProvider(),
    _a);
var LOGGER_DEFAULT_CONFIG = {
    provider: 'console',
    minimalSeverity: 'warning',
    logDateTime: true,
    logSourceLocation: false
};
var LOGGER_CONFIG_MAP = (_b = {}, _b[''] = LOGGER_DEFAULT_CONFIG, _b);
function log(arg0, arg1, arg2, arg3) {
    if (arg1 === undefined) {
        // log(category: string): Logger.CategorizedLogger;
        return createCategorizedLogger(arg0);
    }
    else if (arg2 === undefined) {
        // log(severity, content);
        logInternal(arg0, arg1, 1);
    }
    else if (typeof arg2 === 'number' && arg3 === undefined) {
        // log(severity, content, stack)
        logInternal(arg0, arg1, arg2);
    }
    else if (typeof arg2 === 'string' && arg3 === undefined) {
        // log(severity, category, content)
        logInternal(arg0, arg2, 1, arg1);
    }
    else if (typeof arg2 === 'string' && typeof arg3 === 'number') {
        // log(severity, category, content, stack)
        logInternal(arg0, arg2, arg3, arg1);
    }
    else {
        throw new TypeError('input is valid');
    }
}
function createCategorizedLogger(category) {
    return {
        verbose: log.verbose.bind(null, category),
        info: log.info.bind(null, category),
        warning: log.warning.bind(null, category),
        error: log.error.bind(null, category),
        fatal: log.fatal.bind(null, category)
    };
}
// NOTE: argument 'category' is put the last parameter beacause typescript
// doesn't allow optional argument put in front of required argument. This
// order is different from a usual logging API.
function logInternal(severity, content, stack, category) {
    var config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];
    if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {
        return;
    }
    if (config.logDateTime) {
        content = new Date().toISOString() + "|" + content;
    }
    if (config.logSourceLocation) {
        // TODO: calculate source location from 'stack'
    }
    LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);
}
// eslint-disable-next-line @typescript-eslint/no-namespace
(function (log) {
    function verbose(arg0, arg1) {
        log('verbose', arg0, arg1);
    }
    log.verbose = verbose;
    function info(arg0, arg1) {
        log('info', arg0, arg1);
    }
    log.info = info;
    function warning(arg0, arg1) {
        log('warning', arg0, arg1);
    }
    log.warning = warning;
    function error(arg0, arg1) {
        log('error', arg0, arg1);
    }
    log.error = error;
    function fatal(arg0, arg1) {
        log('fatal', arg0, arg1);
    }
    log.fatal = fatal;
    function reset(config) {
        LOGGER_CONFIG_MAP = {};
        set('', config || {});
    }
    log.reset = reset;
    function set(category, config) {
        if (category === '*') {
            reset(config);
        }
        else {
            var previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;
            LOGGER_CONFIG_MAP[category] = {
                provider: config.provider || previousConfig.provider,
                minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,
                logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,
                logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :
                    config.logSourceLocation
            };
        }
        // TODO: we want to support wildcard or regex?
    }
    log.set = set;
    function setWithEnv(env) {
        var config = {};
        if (env.logLevel) {
            config.minimalSeverity = env.logLevel;
        }
        set('', config);
    }
    log.setWithEnv = setWithEnv;
})(log || (log = {}));
// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention
exports.Logger = log;
// TODO
// class WebGLEvent implements Profiler.Event {}
var Event = /** @class */ (function () {
    function Event(category, name, startTime, endCallback, timer, ctx) {
        this.category = category;
        this.name = name;
        this.startTime = startTime;
        this.endCallback = endCallback;
        this.timer = timer;
        this.ctx = ctx;
    }
    Event.prototype.end = function () {
        return this.endCallback(this);
    };
    Event.prototype.checkTimer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.ctx === undefined || this.timer === undefined) {
                    throw new Error('No webgl timer found');
                }
                else {
                    this.ctx.endTimer();
                    return [2 /*return*/, this.ctx.waitForQueryAndGetTime(this.timer)];
                }
                return [2 /*return*/];
            });
        });
    };
    return Event;
}());
var EventRecord = /** @class */ (function () {
    function EventRecord(category, name, startTime, endTime) {
        this.category = category;
        this.name = name;
        this.startTime = startTime;
        this.endTime = endTime;
    }
    return EventRecord;
}());
var Profiler = /** @class */ (function () {
    function Profiler(maxNumberEvents, flushBatchSize, flushIntervalInMilliseconds) {
        this._started = false;
        this._flushPointer = 0;
        this._started = false;
        this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;
        this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;
        this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;
    }
    Profiler.create = function (config) {
        if (config === undefined) {
            return new this();
        }
        return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);
    };
    // start profiling
    Profiler.prototype.start = function () {
        this._started = true;
        this._timingEvents = [];
        this._flushTime = exports.now();
        this._flushPointer = 0;
    };
    // stop profiling
    Profiler.prototype.stop = function () {
        this._started = false;
        for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {
            this.logOneEvent(this._timingEvents[this._flushPointer]);
        }
    };
    Profiler.prototype.event = function (category, name, func, ctx) {
        var _this = this;
        var event = this._started ? this.begin(category, name, ctx) : undefined;
        var isPromise = false;
        var res = func();
        // we consider a then-able object is a promise
        if (res && typeof res.then === 'function') {
            isPromise = true;
            return new Promise(function (resolve, reject) {
                res
                    .then(function (value) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!event) return [3 /*break*/, 2];
                                return [4 /*yield*/, event.end()];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                resolve(value);
                                return [2 /*return*/];
                        }
                    });
                }); }, function (reason) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!event) return [3 /*break*/, 2];
                                return [4 /*yield*/, event.end()];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                reject(reason);
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        if (!isPromise && event) {
            var eventRes_1 = event.end();
            if (eventRes_1 && typeof eventRes_1.then === 'function') {
                return new Promise(function (resolve, reject) {
                    (eventRes_1).then(function () {
                        resolve(res);
                    }, function (reason) {
                        reject(reason);
                    });
                });
            }
        }
        return res;
    };
    // begin an event
    Profiler.prototype.begin = function (category, name, ctx) {
        var _this = this;
        if (!this._started) {
            throw new Error('profiler is not started yet');
        }
        if (ctx === undefined) {
            var startTime = exports.now();
            this.flush(startTime);
            return new Event(category, name, startTime, function (e) { return _this.endSync(e); });
        }
        else {
            var timer = ctx.beginTimer();
            return new Event(category, name, 0, function (e) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this.end(e)];
            }); }); }, timer, ctx);
        }
    };
    // end the specific event
    Profiler.prototype.end = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var endTime;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, event.checkTimer()];
                    case 1:
                        endTime = _a.sent();
                        if (this._timingEvents.length < this._maxNumberEvents) {
                            this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));
                            this.flush(endTime);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Profiler.prototype.endSync = function (event) {
        var endTime = exports.now();
        if (this._timingEvents.length < this._maxNumberEvents) {
            this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));
            this.flush(endTime);
        }
    };
    Profiler.prototype.logOneEvent = function (event) {
        exports.Logger.verbose("Profiler." + event.category, (event.endTime - event.startTime).toFixed(2) + "ms on event '" + event.name + "' at " + event.endTime.toFixed(2));
    };
    Profiler.prototype.flush = function (currentTime) {
        if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||
            currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {
            // should flush when either batch size accumlated or interval elepsed
            for (var previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&
                this._flushPointer < this._timingEvents.length; this._flushPointer++) {
                this.logOneEvent(this._timingEvents[this._flushPointer]);
            }
            this._flushTime = exports.now();
        }
    };
    Object.defineProperty(Profiler.prototype, "started", {
        get: function () {
            return this._started;
        },
        enumerable: false,
        configurable: true
    });
    return Profiler;
}());
exports.Profiler = Profiler;
/**
 * returns a number to represent the current timestamp in a resolution as high as possible.
 */
exports.now = (typeof performance !== 'undefined' && performance.now) ? function () { return performance.now(); } : Date.now;


/***/ }),

/***/ "./lib/onnxjs/model.ts":
/*!*****************************!*\
  !*** ./lib/onnxjs/model.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Model = void 0;
var flatbuffers_1 = __webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/js/flatbuffers.mjs");
var onnx_proto_1 = __webpack_require__(/*! onnx-proto */ "./node_modules/onnx-proto/dist/onnx.js");
var graph_1 = __webpack_require__(/*! ./graph */ "./lib/onnxjs/graph.ts");
var ort_generated_1 = __webpack_require__(/*! ./ort-schema/ort-generated */ "./lib/onnxjs/ort-schema/ort-generated.ts");
var ortFbs = ort_generated_1.onnxruntime.experimental.fbs;
var util_1 = __webpack_require__(/*! ./util */ "./lib/onnxjs/util.ts");
var Model = /** @class */ (function () {
    // empty model
    function Model() {
    }
    Model.prototype.load = function (buf, graphInitializer, isOrtFormat) {
        if (!isOrtFormat) {
            // isOrtFormat === false || isOrtFormat === undefined
            try {
                this.loadFromOnnxFormat(buf, graphInitializer);
                return;
            }
            catch (e) {
                if (isOrtFormat !== undefined) {
                    throw e;
                }
            }
        }
        this.loadFromOrtFormat(buf, graphInitializer);
    };
    Model.prototype.loadFromOnnxFormat = function (buf, graphInitializer) {
        var modelProto = onnx_proto_1.onnx.ModelProto.decode(buf);
        var irVersion = util_1.LongUtil.longToNumber(modelProto.irVersion);
        if (irVersion < 3) {
            throw new Error('only support ONNX model with IR_VERSION>=3');
        }
        this._opsets =
            modelProto.opsetImport.map(function (i) { return ({ domain: i.domain, version: util_1.LongUtil.longToNumber(i.version) }); });
        this._graph = graph_1.Graph.from(modelProto.graph, graphInitializer);
    };
    Model.prototype.loadFromOrtFormat = function (buf, graphInitializer) {
        var fb = new flatbuffers_1.flatbuffers.ByteBuffer(buf);
        var ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model();
        var irVersion = util_1.LongUtil.longToNumber(ortModel.irVersion());
        if (irVersion < 3) {
            throw new Error('only support ONNX model with IR_VERSION>=3');
        }
        this._opsets = [];
        for (var i = 0; i < ortModel.opsetImportLength(); i++) {
            var opsetId = ortModel.opsetImport(i);
            this._opsets.push({ domain: opsetId === null || opsetId === void 0 ? void 0 : opsetId.domain(), version: util_1.LongUtil.longToNumber(opsetId.version()) });
        }
        this._graph = graph_1.Graph.from(ortModel.graph(), graphInitializer);
    };
    Object.defineProperty(Model.prototype, "graph", {
        get: function () {
            return this._graph;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "opsets", {
        get: function () {
            return this._opsets;
        },
        enumerable: false,
        configurable: true
    });
    return Model;
}());
exports.Model = Model;


/***/ }),

/***/ "./lib/onnxjs/operators.ts":
/*!*********************************!*\
  !*** ./lib/onnxjs/operators.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FLOAT_TYPES = exports.INT_TYPES = exports.NUMBER_TYPES = void 0;
exports.NUMBER_TYPES = ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];
exports.INT_TYPES = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];
exports.FLOAT_TYPES = ['float32', 'float64'];


/***/ }),

/***/ "./lib/onnxjs/opset.ts":
/*!*****************************!*\
  !*** ./lib/onnxjs/opset.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveOperator = void 0;
function resolveOperator(node, opsets, rules) {
    var e_1, _a, e_2, _b;
    try {
        for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
            var rule = rules_1_1.value;
            var opType = rule[0];
            var domain = rule[1];
            var versionSelector = rule[2];
            var opImpl = rule[3];
            var opInit = rule[4];
            if (node.opType === opType) { // operator type matches
                try {
                    for (var opsets_1 = (e_2 = void 0, __values(opsets)), opsets_1_1 = opsets_1.next(); !opsets_1_1.done; opsets_1_1 = opsets_1.next()) {
                        var opset = opsets_1_1.value;
                        // opset '' and 'ai.onnx' are considered the same.
                        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) { // opset domain found
                            if (matchSelector(opset.version, versionSelector)) {
                                return { opImpl: opImpl, opInit: opInit };
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (opsets_1_1 && !opsets_1_1.done && (_b = opsets_1.return)) _b.call(opsets_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    throw new TypeError("cannot resolve operator '" + node.opType + "' with opsets: " + opsets.map(function (set) { return (set.domain || 'ai.onnx') + " v" + set.version; }).join(', '));
}
exports.resolveOperator = resolveOperator;
function matchSelector(version, selector) {
    if (selector.endsWith('+')) {
        // minimum version match ('7+' expects version>=7)
        var rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);
        return !isNaN(rangeStart) && rangeStart <= version;
    }
    else if (selector.split('-').length === 2) {
        // range match ('6-8' expects 6<=version<=8)
        var pair = selector.split('-');
        var rangeStart = Number.parseInt(pair[0], 10);
        var rangeEnd = Number.parseInt(pair[1], 10);
        return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;
    }
    else {
        // exact match ('7' expects version===7)
        return Number.parseInt(selector, 10) === version;
    }
}


/***/ }),

/***/ "./lib/onnxjs/ort-schema/ort-generated.ts":
/*!************************************************!*\
  !*** ./lib/onnxjs/ort-schema/ort-generated.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.onnxruntime = void 0;
var flatbuffers_1 = __webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/js/flatbuffers.mjs");
/**
 * @enum {number}
 */
var onnxruntime;
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var AttributeType;
            (function (AttributeType) {
                AttributeType[AttributeType["UNDEFINED"] = 0] = "UNDEFINED";
                AttributeType[AttributeType["FLOAT"] = 1] = "FLOAT";
                AttributeType[AttributeType["INT"] = 2] = "INT";
                AttributeType[AttributeType["STRING"] = 3] = "STRING";
                AttributeType[AttributeType["TENSOR"] = 4] = "TENSOR";
                AttributeType[AttributeType["GRAPH"] = 5] = "GRAPH";
                AttributeType[AttributeType["FLOATS"] = 6] = "FLOATS";
                AttributeType[AttributeType["INTS"] = 7] = "INTS";
                AttributeType[AttributeType["STRINGS"] = 8] = "STRINGS";
                AttributeType[AttributeType["TENSORS"] = 9] = "TENSORS";
                AttributeType[AttributeType["GRAPHS"] = 10] = "GRAPHS";
                AttributeType[AttributeType["SPARSE_TENSOR"] = 11] = "SPARSE_TENSOR";
                AttributeType[AttributeType["SPARSE_TENSORS"] = 12] = "SPARSE_TENSORS";
            })(AttributeType = fbs.AttributeType || (fbs.AttributeType = {}));
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @enum {number}
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var DimensionValueType;
            (function (DimensionValueType) {
                DimensionValueType[DimensionValueType["UNKNOWN"] = 0] = "UNKNOWN";
                DimensionValueType[DimensionValueType["VALUE"] = 1] = "VALUE";
                DimensionValueType[DimensionValueType["PARAM"] = 2] = "PARAM";
            })(DimensionValueType = fbs.DimensionValueType || (fbs.DimensionValueType = {}));
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @enum {number}
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var TensorDataType;
            (function (TensorDataType) {
                TensorDataType[TensorDataType["UNDEFINED"] = 0] = "UNDEFINED";
                TensorDataType[TensorDataType["FLOAT"] = 1] = "FLOAT";
                TensorDataType[TensorDataType["UINT8"] = 2] = "UINT8";
                TensorDataType[TensorDataType["INT8"] = 3] = "INT8";
                TensorDataType[TensorDataType["UINT16"] = 4] = "UINT16";
                TensorDataType[TensorDataType["INT16"] = 5] = "INT16";
                TensorDataType[TensorDataType["INT32"] = 6] = "INT32";
                TensorDataType[TensorDataType["INT64"] = 7] = "INT64";
                TensorDataType[TensorDataType["STRING"] = 8] = "STRING";
                TensorDataType[TensorDataType["BOOL"] = 9] = "BOOL";
                TensorDataType[TensorDataType["FLOAT16"] = 10] = "FLOAT16";
                TensorDataType[TensorDataType["DOUBLE"] = 11] = "DOUBLE";
                TensorDataType[TensorDataType["UINT32"] = 12] = "UINT32";
                TensorDataType[TensorDataType["UINT64"] = 13] = "UINT64";
                TensorDataType[TensorDataType["COMPLEX64"] = 14] = "COMPLEX64";
                TensorDataType[TensorDataType["COMPLEX128"] = 15] = "COMPLEX128";
                TensorDataType[TensorDataType["BFLOAT16"] = 16] = "BFLOAT16";
            })(TensorDataType = fbs.TensorDataType || (fbs.TensorDataType = {}));
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @enum {number}
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var NodeType;
            (function (NodeType) {
                NodeType[NodeType["Primitive"] = 0] = "Primitive";
                NodeType[NodeType["Fused"] = 1] = "Fused";
            })(NodeType = fbs.NodeType || (fbs.NodeType = {}));
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @enum {number}
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var TypeInfoValue;
            (function (TypeInfoValue) {
                TypeInfoValue[TypeInfoValue["NONE"] = 0] = "NONE";
                TypeInfoValue[TypeInfoValue["tensor_type"] = 1] = "tensor_type";
                TypeInfoValue[TypeInfoValue["sequence_type"] = 2] = "sequence_type";
                TypeInfoValue[TypeInfoValue["map_type"] = 3] = "map_type";
            })(TypeInfoValue = fbs.TypeInfoValue || (fbs.TypeInfoValue = {}));
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Shape = /** @class */ (function () {
                function Shape() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Shape
                 */
                Shape.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Shape= obj
                 * @returns Shape
                 */
                Shape.getRootAsShape = function (bb, obj) {
                    return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Shape= obj
                 * @returns Shape
                 */
                Shape.getSizePrefixedRootAsShape = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Dimension= obj
                 * @returns onnxruntime.experimental.fbs.Dimension
                 */
                Shape.prototype.dim = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Shape.prototype.dimLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Shape.startShape = function (builder) {
                    builder.startObject(1);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset dimOffset
                 */
                Shape.addDim = function (builder, dimOffset) {
                    builder.addFieldOffset(0, dimOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Shape.createDimVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Shape.startDimVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Shape.endShape = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Shape.createShape = function (builder, dimOffset) {
                    Shape.startShape(builder);
                    Shape.addDim(builder, dimOffset);
                    return Shape.endShape(builder);
                };
                return Shape;
            }());
            fbs.Shape = Shape;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Dimension = /** @class */ (function () {
                function Dimension() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Dimension
                 */
                Dimension.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Dimension= obj
                 * @returns Dimension
                 */
                Dimension.getRootAsDimension = function (bb, obj) {
                    return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Dimension= obj
                 * @returns Dimension
                 */
                Dimension.getSizePrefixedRootAsDimension = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param onnxruntime.experimental.fbs.DimensionValue= obj
                 * @returns onnxruntime.experimental.fbs.DimensionValue|null
                 */
                Dimension.prototype.value = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                Dimension.prototype.denotation = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Dimension.startDimension = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset valueOffset
                 */
                Dimension.addValue = function (builder, valueOffset) {
                    builder.addFieldOffset(0, valueOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset denotationOffset
                 */
                Dimension.addDenotation = function (builder, denotationOffset) {
                    builder.addFieldOffset(1, denotationOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Dimension.endDimension = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Dimension.createDimension = function (builder, valueOffset, denotationOffset) {
                    Dimension.startDimension(builder);
                    Dimension.addValue(builder, valueOffset);
                    Dimension.addDenotation(builder, denotationOffset);
                    return Dimension.endDimension(builder);
                };
                return Dimension;
            }());
            fbs.Dimension = Dimension;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var DimensionValue = /** @class */ (function () {
                function DimensionValue() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns DimensionValue
                 */
                DimensionValue.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param DimensionValue= obj
                 * @returns DimensionValue
                 */
                DimensionValue.getRootAsDimensionValue = function (bb, obj) {
                    return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param DimensionValue= obj
                 * @returns DimensionValue
                 */
                DimensionValue.getSizePrefixedRootAsDimensionValue = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @returns onnxruntime.experimental.fbs.DimensionValueType
                 */
                DimensionValue.prototype.dimType = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? /**  */ (this.bb.readInt8(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;
                };
                /**
                 * @returns flatbuffers.Long
                 */
                DimensionValue.prototype.dimValue = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                };
                DimensionValue.prototype.dimParam = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                DimensionValue.startDimensionValue = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.DimensionValueType dimType
                 */
                DimensionValue.addDimType = function (builder, dimType) {
                    builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Long dimValue
                 */
                DimensionValue.addDimValue = function (builder, dimValue) {
                    builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset dimParamOffset
                 */
                DimensionValue.addDimParam = function (builder, dimParamOffset) {
                    builder.addFieldOffset(2, dimParamOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                DimensionValue.endDimensionValue = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                DimensionValue.createDimensionValue = function (builder, dimType, dimValue, dimParamOffset) {
                    DimensionValue.startDimensionValue(builder);
                    DimensionValue.addDimType(builder, dimType);
                    DimensionValue.addDimValue(builder, dimValue);
                    DimensionValue.addDimParam(builder, dimParamOffset);
                    return DimensionValue.endDimensionValue(builder);
                };
                return DimensionValue;
            }());
            fbs.DimensionValue = DimensionValue;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var TensorTypeAndShape = /** @class */ (function () {
                function TensorTypeAndShape() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns TensorTypeAndShape
                 */
                TensorTypeAndShape.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param TensorTypeAndShape= obj
                 * @returns TensorTypeAndShape
                 */
                TensorTypeAndShape.getRootAsTensorTypeAndShape = function (bb, obj) {
                    return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param TensorTypeAndShape= obj
                 * @returns TensorTypeAndShape
                 */
                TensorTypeAndShape.getSizePrefixedRootAsTensorTypeAndShape = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @returns onnxruntime.experimental.fbs.TensorDataType
                 */
                TensorTypeAndShape.prototype.elemType = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? /**  */ (this.bb.readInt32(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Shape= obj
                 * @returns onnxruntime.experimental.fbs.Shape|null
                 */
                TensorTypeAndShape.prototype.shape = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Shape())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                TensorTypeAndShape.startTensorTypeAndShape = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.TensorDataType elemType
                 */
                TensorTypeAndShape.addElemType = function (builder, elemType) {
                    builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset shapeOffset
                 */
                TensorTypeAndShape.addShape = function (builder, shapeOffset) {
                    builder.addFieldOffset(1, shapeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                TensorTypeAndShape.endTensorTypeAndShape = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                TensorTypeAndShape.createTensorTypeAndShape = function (builder, elemType, shapeOffset) {
                    TensorTypeAndShape.startTensorTypeAndShape(builder);
                    TensorTypeAndShape.addElemType(builder, elemType);
                    TensorTypeAndShape.addShape(builder, shapeOffset);
                    return TensorTypeAndShape.endTensorTypeAndShape(builder);
                };
                return TensorTypeAndShape;
            }());
            fbs.TensorTypeAndShape = TensorTypeAndShape;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var MapType = /** @class */ (function () {
                function MapType() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns MapType
                 */
                MapType.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param MapType= obj
                 * @returns MapType
                 */
                MapType.getRootAsMapType = function (bb, obj) {
                    return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param MapType= obj
                 * @returns MapType
                 */
                MapType.getSizePrefixedRootAsMapType = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @returns onnxruntime.experimental.fbs.TensorDataType
                 */
                MapType.prototype.keyType = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? /**  */ (this.bb.readInt32(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;
                };
                /**
                 * @param onnxruntime.experimental.fbs.TypeInfo= obj
                 * @returns onnxruntime.experimental.fbs.TypeInfo|null
                 */
                MapType.prototype.valueType = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                MapType.startMapType = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.TensorDataType keyType
                 */
                MapType.addKeyType = function (builder, keyType) {
                    builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset valueTypeOffset
                 */
                MapType.addValueType = function (builder, valueTypeOffset) {
                    builder.addFieldOffset(1, valueTypeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                MapType.endMapType = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                MapType.createMapType = function (builder, keyType, valueTypeOffset) {
                    MapType.startMapType(builder);
                    MapType.addKeyType(builder, keyType);
                    MapType.addValueType(builder, valueTypeOffset);
                    return MapType.endMapType(builder);
                };
                return MapType;
            }());
            fbs.MapType = MapType;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var SequenceType = /** @class */ (function () {
                function SequenceType() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns SequenceType
                 */
                SequenceType.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SequenceType= obj
                 * @returns SequenceType
                 */
                SequenceType.getRootAsSequenceType = function (bb, obj) {
                    return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SequenceType= obj
                 * @returns SequenceType
                 */
                SequenceType.getSizePrefixedRootAsSequenceType = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param onnxruntime.experimental.fbs.TypeInfo= obj
                 * @returns onnxruntime.experimental.fbs.TypeInfo|null
                 */
                SequenceType.prototype.elemType = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                SequenceType.startSequenceType = function (builder) {
                    builder.startObject(1);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset elemTypeOffset
                 */
                SequenceType.addElemType = function (builder, elemTypeOffset) {
                    builder.addFieldOffset(0, elemTypeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                SequenceType.endSequenceType = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                SequenceType.createSequenceType = function (builder, elemTypeOffset) {
                    SequenceType.startSequenceType(builder);
                    SequenceType.addElemType(builder, elemTypeOffset);
                    return SequenceType.endSequenceType(builder);
                };
                return SequenceType;
            }());
            fbs.SequenceType = SequenceType;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var EdgeEnd = /** @class */ (function () {
                function EdgeEnd() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns EdgeEnd
                 */
                EdgeEnd.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @returns number
                 */
                EdgeEnd.prototype.nodeIndex = function () {
                    return this.bb.readUint32(this.bb_pos);
                };
                /**
                 * @returns number
                 */
                EdgeEnd.prototype.srcArgIndex = function () {
                    return this.bb.readInt32(this.bb_pos + 4);
                };
                /**
                 * @returns number
                 */
                EdgeEnd.prototype.dstArgIndex = function () {
                    return this.bb.readInt32(this.bb_pos + 8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number node_index
                 * @param number src_arg_index
                 * @param number dst_arg_index
                 * @returns flatbuffers.Offset
                 */
                EdgeEnd.createEdgeEnd = function (builder, node_index, src_arg_index, dst_arg_index) {
                    builder.prep(4, 12);
                    builder.writeInt32(dst_arg_index);
                    builder.writeInt32(src_arg_index);
                    builder.writeInt32(node_index);
                    return builder.offset();
                };
                return EdgeEnd;
            }());
            fbs.EdgeEnd = EdgeEnd;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var NodeEdge = /** @class */ (function () {
                function NodeEdge() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns NodeEdge
                 */
                NodeEdge.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param NodeEdge= obj
                 * @returns NodeEdge
                 */
                NodeEdge.getRootAsNodeEdge = function (bb, obj) {
                    return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param NodeEdge= obj
                 * @returns NodeEdge
                 */
                NodeEdge.getSizePrefixedRootAsNodeEdge = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @returns number
                 */
                NodeEdge.prototype.nodeIndex = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.EdgeEnd= obj
                 * @returns onnxruntime.experimental.fbs.EdgeEnd
                 */
                NodeEdge.prototype.inputEdges = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())
                        .__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                NodeEdge.prototype.inputEdgesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.EdgeEnd= obj
                 * @returns onnxruntime.experimental.fbs.EdgeEnd
                 */
                NodeEdge.prototype.outputEdges = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())
                        .__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                NodeEdge.prototype.outputEdgesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                NodeEdge.startNodeEdge = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number nodeIndex
                 */
                NodeEdge.addNodeIndex = function (builder, nodeIndex) {
                    builder.addFieldInt32(0, nodeIndex, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset inputEdgesOffset
                 */
                NodeEdge.addInputEdges = function (builder, inputEdgesOffset) {
                    builder.addFieldOffset(1, inputEdgesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                NodeEdge.startInputEdgesVector = function (builder, numElems) {
                    builder.startVector(12, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset outputEdgesOffset
                 */
                NodeEdge.addOutputEdges = function (builder, outputEdgesOffset) {
                    builder.addFieldOffset(2, outputEdgesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                NodeEdge.startOutputEdgesVector = function (builder, numElems) {
                    builder.startVector(12, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                NodeEdge.endNodeEdge = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                NodeEdge.createNodeEdge = function (builder, nodeIndex, inputEdgesOffset, outputEdgesOffset) {
                    NodeEdge.startNodeEdge(builder);
                    NodeEdge.addNodeIndex(builder, nodeIndex);
                    NodeEdge.addInputEdges(builder, inputEdgesOffset);
                    NodeEdge.addOutputEdges(builder, outputEdgesOffset);
                    return NodeEdge.endNodeEdge(builder);
                };
                return NodeEdge;
            }());
            fbs.NodeEdge = NodeEdge;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Node = /** @class */ (function () {
                function Node() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Node
                 */
                Node.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Node= obj
                 * @returns Node
                 */
                Node.getRootAsNode = function (bb, obj) {
                    return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Node= obj
                 * @returns Node
                 */
                Node.getSizePrefixedRootAsNode = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                Node.prototype.name = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Node.prototype.docString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Node.prototype.domain = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Node.prototype.sinceVersion = function () {
                    var offset = this.bb.__offset(this.bb_pos, 10);
                    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns number
                 */
                Node.prototype.index = function () {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
                };
                Node.prototype.opType = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns onnxruntime.experimental.fbs.NodeType
                 */
                Node.prototype.type = function () {
                    var offset = this.bb.__offset(this.bb_pos, 16);
                    return offset ? /**  */ (this.bb.readInt32(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.NodeType.Primitive;
                };
                Node.prototype.executionProviderType = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 18);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Node.prototype.inputs = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Node.prototype.inputsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                Node.prototype.outputs = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 22);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Node.prototype.outputsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 22);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Attribute= obj
                 * @returns onnxruntime.experimental.fbs.Attribute
                 */
                Node.prototype.attributes = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 24);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Node.prototype.attributesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 24);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @returns number
                 */
                Node.prototype.inputArgCounts = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 26);
                    return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
                };
                /**
                 * @returns number
                 */
                Node.prototype.inputArgCountsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 26);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns Int32Array
                 */
                Node.prototype.inputArgCountsArray = function () {
                    var offset = this.bb.__offset(this.bb_pos, 26);
                    return offset ?
                        new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) :
                        null;
                };
                Node.prototype.implicitInputs = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 28);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Node.prototype.implicitInputsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 28);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Node.startNode = function (builder) {
                    builder.startObject(13);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nameOffset
                 */
                Node.addName = function (builder, nameOffset) {
                    builder.addFieldOffset(0, nameOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset docStringOffset
                 */
                Node.addDocString = function (builder, docStringOffset) {
                    builder.addFieldOffset(1, docStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset domainOffset
                 */
                Node.addDomain = function (builder, domainOffset) {
                    builder.addFieldOffset(2, domainOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number sinceVersion
                 */
                Node.addSinceVersion = function (builder, sinceVersion) {
                    builder.addFieldInt32(3, sinceVersion, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number index
                 */
                Node.addIndex = function (builder, index) {
                    builder.addFieldInt32(4, index, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset opTypeOffset
                 */
                Node.addOpType = function (builder, opTypeOffset) {
                    builder.addFieldOffset(5, opTypeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.NodeType type
                 */
                Node.addType = function (builder, type) {
                    builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset executionProviderTypeOffset
                 */
                Node.addExecutionProviderType = function (builder, executionProviderTypeOffset) {
                    builder.addFieldOffset(7, executionProviderTypeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset inputsOffset
                 */
                Node.addInputs = function (builder, inputsOffset) {
                    builder.addFieldOffset(8, inputsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Node.createInputsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Node.startInputsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset outputsOffset
                 */
                Node.addOutputs = function (builder, outputsOffset) {
                    builder.addFieldOffset(9, outputsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Node.createOutputsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Node.startOutputsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset attributesOffset
                 */
                Node.addAttributes = function (builder, attributesOffset) {
                    builder.addFieldOffset(10, attributesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Node.createAttributesVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Node.startAttributesVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset inputArgCountsOffset
                 */
                Node.addInputArgCounts = function (builder, inputArgCountsOffset) {
                    builder.addFieldOffset(11, inputArgCountsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<number> data
                 * @returns flatbuffers.Offset
                 */
                Node.createInputArgCountsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt32(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Node.startInputArgCountsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset implicitInputsOffset
                 */
                Node.addImplicitInputs = function (builder, implicitInputsOffset) {
                    builder.addFieldOffset(12, implicitInputsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Node.createImplicitInputsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Node.startImplicitInputsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Node.endNode = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Node.createNode = function (builder, nameOffset, docStringOffset, domainOffset, sinceVersion, index, opTypeOffset, type, executionProviderTypeOffset, inputsOffset, outputsOffset, attributesOffset, inputArgCountsOffset, implicitInputsOffset) {
                    Node.startNode(builder);
                    Node.addName(builder, nameOffset);
                    Node.addDocString(builder, docStringOffset);
                    Node.addDomain(builder, domainOffset);
                    Node.addSinceVersion(builder, sinceVersion);
                    Node.addIndex(builder, index);
                    Node.addOpType(builder, opTypeOffset);
                    Node.addType(builder, type);
                    Node.addExecutionProviderType(builder, executionProviderTypeOffset);
                    Node.addInputs(builder, inputsOffset);
                    Node.addOutputs(builder, outputsOffset);
                    Node.addAttributes(builder, attributesOffset);
                    Node.addInputArgCounts(builder, inputArgCountsOffset);
                    Node.addImplicitInputs(builder, implicitInputsOffset);
                    return Node.endNode(builder);
                };
                return Node;
            }());
            fbs.Node = Node;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var ValueInfo = /** @class */ (function () {
                function ValueInfo() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns ValueInfo
                 */
                ValueInfo.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param ValueInfo= obj
                 * @returns ValueInfo
                 */
                ValueInfo.getRootAsValueInfo = function (bb, obj) {
                    return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param ValueInfo= obj
                 * @returns ValueInfo
                 */
                ValueInfo.getSizePrefixedRootAsValueInfo = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                ValueInfo.prototype.name = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                ValueInfo.prototype.docString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.TypeInfo= obj
                 * @returns onnxruntime.experimental.fbs.TypeInfo|null
                 */
                ValueInfo.prototype.type = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                ValueInfo.startValueInfo = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nameOffset
                 */
                ValueInfo.addName = function (builder, nameOffset) {
                    builder.addFieldOffset(0, nameOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset docStringOffset
                 */
                ValueInfo.addDocString = function (builder, docStringOffset) {
                    builder.addFieldOffset(1, docStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset typeOffset
                 */
                ValueInfo.addType = function (builder, typeOffset) {
                    builder.addFieldOffset(2, typeOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                ValueInfo.endValueInfo = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                ValueInfo.createValueInfo = function (builder, nameOffset, docStringOffset, typeOffset) {
                    ValueInfo.startValueInfo(builder);
                    ValueInfo.addName(builder, nameOffset);
                    ValueInfo.addDocString(builder, docStringOffset);
                    ValueInfo.addType(builder, typeOffset);
                    return ValueInfo.endValueInfo(builder);
                };
                return ValueInfo;
            }());
            fbs.ValueInfo = ValueInfo;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var TypeInfo = /** @class */ (function () {
                function TypeInfo() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns TypeInfo
                 */
                TypeInfo.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param TypeInfo= obj
                 * @returns TypeInfo
                 */
                TypeInfo.getRootAsTypeInfo = function (bb, obj) {
                    return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param TypeInfo= obj
                 * @returns TypeInfo
                 */
                TypeInfo.getSizePrefixedRootAsTypeInfo = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                TypeInfo.prototype.denotation = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns onnxruntime.experimental.fbs.TypeInfoValue
                 */
                TypeInfo.prototype.valueType = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.TypeInfoValue.NONE;
                };
                /**
                 * @param flatbuffers.Table obj
                 * @returns ?flatbuffers.Table
                 */
                TypeInfo.prototype.value = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                TypeInfo.startTypeInfo = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset denotationOffset
                 */
                TypeInfo.addDenotation = function (builder, denotationOffset) {
                    builder.addFieldOffset(0, denotationOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.TypeInfoValue valueType
                 */
                TypeInfo.addValueType = function (builder, valueType) {
                    builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset valueOffset
                 */
                TypeInfo.addValue = function (builder, valueOffset) {
                    builder.addFieldOffset(2, valueOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                TypeInfo.endTypeInfo = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                TypeInfo.createTypeInfo = function (builder, denotationOffset, valueType, valueOffset) {
                    TypeInfo.startTypeInfo(builder);
                    TypeInfo.addDenotation(builder, denotationOffset);
                    TypeInfo.addValueType(builder, valueType);
                    TypeInfo.addValue(builder, valueOffset);
                    return TypeInfo.endTypeInfo(builder);
                };
                return TypeInfo;
            }());
            fbs.TypeInfo = TypeInfo;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var OperatorSetId = /** @class */ (function () {
                function OperatorSetId() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns OperatorSetId
                 */
                OperatorSetId.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param OperatorSetId= obj
                 * @returns OperatorSetId
                 */
                OperatorSetId.getRootAsOperatorSetId = function (bb, obj) {
                    return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param OperatorSetId= obj
                 * @returns OperatorSetId
                 */
                OperatorSetId.getSizePrefixedRootAsOperatorSetId = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                OperatorSetId.prototype.domain = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns flatbuffers.Long
                 */
                OperatorSetId.prototype.version = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                OperatorSetId.startOperatorSetId = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset domainOffset
                 */
                OperatorSetId.addDomain = function (builder, domainOffset) {
                    builder.addFieldOffset(0, domainOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Long version
                 */
                OperatorSetId.addVersion = function (builder, version) {
                    builder.addFieldInt64(1, version, builder.createLong(0, 0));
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                OperatorSetId.endOperatorSetId = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                OperatorSetId.createOperatorSetId = function (builder, domainOffset, version) {
                    OperatorSetId.startOperatorSetId(builder);
                    OperatorSetId.addDomain(builder, domainOffset);
                    OperatorSetId.addVersion(builder, version);
                    return OperatorSetId.endOperatorSetId(builder);
                };
                return OperatorSetId;
            }());
            fbs.OperatorSetId = OperatorSetId;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Tensor = /** @class */ (function () {
                function Tensor() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Tensor
                 */
                Tensor.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Tensor= obj
                 * @returns Tensor
                 */
                Tensor.getRootAsTensor = function (bb, obj) {
                    return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Tensor= obj
                 * @returns Tensor
                 */
                Tensor.getSizePrefixedRootAsTensor = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                Tensor.prototype.name = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Tensor.prototype.docString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param number index
                 * @returns flatbuffers.Long
                 */
                Tensor.prototype.dims = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) :
                        this.bb.createLong(0, 0);
                };
                /**
                 * @returns number
                 */
                Tensor.prototype.dimsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns onnxruntime.experimental.fbs.TensorDataType
                 */
                Tensor.prototype.dataType = function () {
                    var offset = this.bb.__offset(this.bb_pos, 10);
                    return offset ? /**  */ (this.bb.readInt32(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;
                };
                /**
                 * @param number index
                 * @returns number
                 */
                Tensor.prototype.rawData = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
                };
                /**
                 * @returns number
                 */
                Tensor.prototype.rawDataLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns Uint8Array
                 */
                Tensor.prototype.rawDataArray = function () {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ?
                        new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) :
                        null;
                };
                Tensor.prototype.stringData = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Tensor.prototype.stringDataLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Tensor.startTensor = function (builder) {
                    builder.startObject(6);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nameOffset
                 */
                Tensor.addName = function (builder, nameOffset) {
                    builder.addFieldOffset(0, nameOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset docStringOffset
                 */
                Tensor.addDocString = function (builder, docStringOffset) {
                    builder.addFieldOffset(1, docStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset dimsOffset
                 */
                Tensor.addDims = function (builder, dimsOffset) {
                    builder.addFieldOffset(2, dimsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Long> data
                 * @returns flatbuffers.Offset
                 */
                Tensor.createDimsVector = function (builder, data) {
                    builder.startVector(8, data.length, 8);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt64(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Tensor.startDimsVector = function (builder, numElems) {
                    builder.startVector(8, numElems, 8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.TensorDataType dataType
                 */
                Tensor.addDataType = function (builder, dataType) {
                    builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset rawDataOffset
                 */
                Tensor.addRawData = function (builder, rawDataOffset) {
                    builder.addFieldOffset(4, rawDataOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<number> data
                 * @returns flatbuffers.Offset
                 */
                Tensor.createRawDataVector = function (builder, data) {
                    builder.startVector(1, data.length, 1);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt8(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Tensor.startRawDataVector = function (builder, numElems) {
                    builder.startVector(1, numElems, 1);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset stringDataOffset
                 */
                Tensor.addStringData = function (builder, stringDataOffset) {
                    builder.addFieldOffset(5, stringDataOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Tensor.createStringDataVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Tensor.startStringDataVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Tensor.endTensor = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Tensor.createTensor = function (builder, nameOffset, docStringOffset, dimsOffset, dataType, rawDataOffset, stringDataOffset) {
                    Tensor.startTensor(builder);
                    Tensor.addName(builder, nameOffset);
                    Tensor.addDocString(builder, docStringOffset);
                    Tensor.addDims(builder, dimsOffset);
                    Tensor.addDataType(builder, dataType);
                    Tensor.addRawData(builder, rawDataOffset);
                    Tensor.addStringData(builder, stringDataOffset);
                    return Tensor.endTensor(builder);
                };
                return Tensor;
            }());
            fbs.Tensor = Tensor;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var SparseTensor = /** @class */ (function () {
                function SparseTensor() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns SparseTensor
                 */
                SparseTensor.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SparseTensor= obj
                 * @returns SparseTensor
                 */
                SparseTensor.getRootAsSparseTensor = function (bb, obj) {
                    return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SparseTensor= obj
                 * @returns SparseTensor
                 */
                SparseTensor.getSizePrefixedRootAsSparseTensor = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param onnxruntime.experimental.fbs.Tensor= obj
                 * @returns onnxruntime.experimental.fbs.Tensor|null
                 */
                SparseTensor.prototype.values = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Tensor= obj
                 * @returns onnxruntime.experimental.fbs.Tensor|null
                 */
                SparseTensor.prototype.indices = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param number index
                 * @returns flatbuffers.Long
                 */
                SparseTensor.prototype.dims = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) :
                        this.bb.createLong(0, 0);
                };
                /**
                 * @returns number
                 */
                SparseTensor.prototype.dimsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                SparseTensor.startSparseTensor = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset valuesOffset
                 */
                SparseTensor.addValues = function (builder, valuesOffset) {
                    builder.addFieldOffset(0, valuesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset indicesOffset
                 */
                SparseTensor.addIndices = function (builder, indicesOffset) {
                    builder.addFieldOffset(1, indicesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset dimsOffset
                 */
                SparseTensor.addDims = function (builder, dimsOffset) {
                    builder.addFieldOffset(2, dimsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Long> data
                 * @returns flatbuffers.Offset
                 */
                SparseTensor.createDimsVector = function (builder, data) {
                    builder.startVector(8, data.length, 8);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt64(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                SparseTensor.startDimsVector = function (builder, numElems) {
                    builder.startVector(8, numElems, 8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                SparseTensor.endSparseTensor = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                SparseTensor.createSparseTensor = function (builder, valuesOffset, indicesOffset, dimsOffset) {
                    SparseTensor.startSparseTensor(builder);
                    SparseTensor.addValues(builder, valuesOffset);
                    SparseTensor.addIndices(builder, indicesOffset);
                    SparseTensor.addDims(builder, dimsOffset);
                    return SparseTensor.endSparseTensor(builder);
                };
                return SparseTensor;
            }());
            fbs.SparseTensor = SparseTensor;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Attribute = /** @class */ (function () {
                function Attribute() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Attribute
                 */
                Attribute.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Attribute= obj
                 * @returns Attribute
                 */
                Attribute.getRootAsAttribute = function (bb, obj) {
                    return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Attribute= obj
                 * @returns Attribute
                 */
                Attribute.getSizePrefixedRootAsAttribute = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                Attribute.prototype.name = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Attribute.prototype.docString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns onnxruntime.experimental.fbs.AttributeType
                 */
                Attribute.prototype.type = function () {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? /**  */ (this.bb.readInt32(this.bb_pos + offset)) :
                        onnxruntime.experimental.fbs.AttributeType.UNDEFINED;
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.f = function () {
                    var offset = this.bb.__offset(this.bb_pos, 10);
                    return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
                };
                /**
                 * @returns flatbuffers.Long
                 */
                Attribute.prototype.i = function () {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                };
                Attribute.prototype.s = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Tensor= obj
                 * @returns onnxruntime.experimental.fbs.Tensor|null
                 */
                Attribute.prototype.t = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 16);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Graph= obj
                 * @returns onnxruntime.experimental.fbs.Graph|null
                 */
                Attribute.prototype.g = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 18);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Graph())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param number index
                 * @returns number
                 */
                Attribute.prototype.floats = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.floatsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns Float32Array
                 */
                Attribute.prototype.floatsArray = function () {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ?
                        new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) :
                        null;
                };
                /**
                 * @param number index
                 * @returns flatbuffers.Long
                 */
                Attribute.prototype.ints = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 22);
                    return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) :
                        this.bb.createLong(0, 0);
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.intsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 22);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                Attribute.prototype.strings = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 24);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.stringsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 24);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Tensor= obj
                 * @returns onnxruntime.experimental.fbs.Tensor
                 */
                Attribute.prototype.tensors = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 26);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.tensorsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 26);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Graph= obj
                 * @returns onnxruntime.experimental.fbs.Graph
                 */
                Attribute.prototype.graphs = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 28);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Graph())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Attribute.prototype.graphsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 28);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Attribute.startAttribute = function (builder) {
                    builder.startObject(13);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nameOffset
                 */
                Attribute.addName = function (builder, nameOffset) {
                    builder.addFieldOffset(0, nameOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset docStringOffset
                 */
                Attribute.addDocString = function (builder, docStringOffset) {
                    builder.addFieldOffset(1, docStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param onnxruntime.experimental.fbs.AttributeType type
                 */
                Attribute.addType = function (builder, type) {
                    builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number f
                 */
                Attribute.addF = function (builder, f) {
                    builder.addFieldFloat32(3, f, 0.0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Long i
                 */
                Attribute.addI = function (builder, i) {
                    builder.addFieldInt64(4, i, builder.createLong(0, 0));
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset sOffset
                 */
                Attribute.addS = function (builder, sOffset) {
                    builder.addFieldOffset(5, sOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset tOffset
                 */
                Attribute.addT = function (builder, tOffset) {
                    builder.addFieldOffset(6, tOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset gOffset
                 */
                Attribute.addG = function (builder, gOffset) {
                    builder.addFieldOffset(7, gOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset floatsOffset
                 */
                Attribute.addFloats = function (builder, floatsOffset) {
                    builder.addFieldOffset(8, floatsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<number> data
                 * @returns flatbuffers.Offset
                 */
                Attribute.createFloatsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addFloat32(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Attribute.startFloatsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset intsOffset
                 */
                Attribute.addInts = function (builder, intsOffset) {
                    builder.addFieldOffset(9, intsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Long> data
                 * @returns flatbuffers.Offset
                 */
                Attribute.createIntsVector = function (builder, data) {
                    builder.startVector(8, data.length, 8);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt64(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Attribute.startIntsVector = function (builder, numElems) {
                    builder.startVector(8, numElems, 8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset stringsOffset
                 */
                Attribute.addStrings = function (builder, stringsOffset) {
                    builder.addFieldOffset(10, stringsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Attribute.createStringsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Attribute.startStringsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset tensorsOffset
                 */
                Attribute.addTensors = function (builder, tensorsOffset) {
                    builder.addFieldOffset(11, tensorsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Attribute.createTensorsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Attribute.startTensorsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset graphsOffset
                 */
                Attribute.addGraphs = function (builder, graphsOffset) {
                    builder.addFieldOffset(12, graphsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Attribute.createGraphsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Attribute.startGraphsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Attribute.endAttribute = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Attribute.createAttribute = function (builder, nameOffset, docStringOffset, type, f, i, sOffset, tOffset, gOffset, floatsOffset, intsOffset, stringsOffset, tensorsOffset, graphsOffset) {
                    Attribute.startAttribute(builder);
                    Attribute.addName(builder, nameOffset);
                    Attribute.addDocString(builder, docStringOffset);
                    Attribute.addType(builder, type);
                    Attribute.addF(builder, f);
                    Attribute.addI(builder, i);
                    Attribute.addS(builder, sOffset);
                    Attribute.addT(builder, tOffset);
                    Attribute.addG(builder, gOffset);
                    Attribute.addFloats(builder, floatsOffset);
                    Attribute.addInts(builder, intsOffset);
                    Attribute.addStrings(builder, stringsOffset);
                    Attribute.addTensors(builder, tensorsOffset);
                    Attribute.addGraphs(builder, graphsOffset);
                    return Attribute.endAttribute(builder);
                };
                return Attribute;
            }());
            fbs.Attribute = Attribute;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Graph = /** @class */ (function () {
                function Graph() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Graph
                 */
                Graph.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Graph= obj
                 * @returns Graph
                 */
                Graph.getRootAsGraph = function (bb, obj) {
                    return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Graph= obj
                 * @returns Graph
                 */
                Graph.getSizePrefixedRootAsGraph = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Tensor= obj
                 * @returns onnxruntime.experimental.fbs.Tensor
                 */
                Graph.prototype.initializers = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.initializersLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.ValueInfo= obj
                 * @returns onnxruntime.experimental.fbs.ValueInfo
                 */
                Graph.prototype.nodeArgs = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.nodeArgsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.Node= obj
                 * @returns onnxruntime.experimental.fbs.Node
                 */
                Graph.prototype.nodes = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Node())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.nodesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.maxNodeIndex = function () {
                    var offset = this.bb.__offset(this.bb_pos, 10);
                    return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.NodeEdge= obj
                 * @returns onnxruntime.experimental.fbs.NodeEdge
                 */
                Graph.prototype.nodeEdges = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.nodeEdgesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                Graph.prototype.inputs = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.inputsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                Graph.prototype.outputs = function (index, optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 16);
                    return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.outputsLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 16);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.SparseTensor= obj
                 * @returns onnxruntime.experimental.fbs.SparseTensor
                 */
                Graph.prototype.sparseInitializers = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 18);
                    return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Graph.prototype.sparseInitializersLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 18);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Graph.startGraph = function (builder) {
                    builder.startObject(8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset initializersOffset
                 */
                Graph.addInitializers = function (builder, initializersOffset) {
                    builder.addFieldOffset(0, initializersOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createInitializersVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startInitializersVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nodeArgsOffset
                 */
                Graph.addNodeArgs = function (builder, nodeArgsOffset) {
                    builder.addFieldOffset(1, nodeArgsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createNodeArgsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startNodeArgsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nodesOffset
                 */
                Graph.addNodes = function (builder, nodesOffset) {
                    builder.addFieldOffset(2, nodesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createNodesVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startNodesVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number maxNodeIndex
                 */
                Graph.addMaxNodeIndex = function (builder, maxNodeIndex) {
                    builder.addFieldInt32(3, maxNodeIndex, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nodeEdgesOffset
                 */
                Graph.addNodeEdges = function (builder, nodeEdgesOffset) {
                    builder.addFieldOffset(4, nodeEdgesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createNodeEdgesVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startNodeEdgesVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset inputsOffset
                 */
                Graph.addInputs = function (builder, inputsOffset) {
                    builder.addFieldOffset(5, inputsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createInputsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startInputsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset outputsOffset
                 */
                Graph.addOutputs = function (builder, outputsOffset) {
                    builder.addFieldOffset(6, outputsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createOutputsVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startOutputsVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset sparseInitializersOffset
                 */
                Graph.addSparseInitializers = function (builder, sparseInitializersOffset) {
                    builder.addFieldOffset(7, sparseInitializersOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Graph.createSparseInitializersVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Graph.startSparseInitializersVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Graph.endGraph = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Graph.createGraph = function (builder, initializersOffset, nodeArgsOffset, nodesOffset, maxNodeIndex, nodeEdgesOffset, inputsOffset, outputsOffset, sparseInitializersOffset) {
                    Graph.startGraph(builder);
                    Graph.addInitializers(builder, initializersOffset);
                    Graph.addNodeArgs(builder, nodeArgsOffset);
                    Graph.addNodes(builder, nodesOffset);
                    Graph.addMaxNodeIndex(builder, maxNodeIndex);
                    Graph.addNodeEdges(builder, nodeEdgesOffset);
                    Graph.addInputs(builder, inputsOffset);
                    Graph.addOutputs(builder, outputsOffset);
                    Graph.addSparseInitializers(builder, sparseInitializersOffset);
                    return Graph.endGraph(builder);
                };
                return Graph;
            }());
            fbs.Graph = Graph;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var Model = /** @class */ (function () {
                function Model() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns Model
                 */
                Model.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Model= obj
                 * @returns Model
                 */
                Model.getRootAsModel = function (bb, obj) {
                    return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param Model= obj
                 * @returns Model
                 */
                Model.getSizePrefixedRootAsModel = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @returns flatbuffers.Long
                 */
                Model.prototype.irVersion = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.OperatorSetId= obj
                 * @returns onnxruntime.experimental.fbs.OperatorSetId
                 */
                Model.prototype.opsetImport = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                Model.prototype.opsetImportLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                Model.prototype.producerName = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Model.prototype.producerVersion = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 10);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                Model.prototype.domain = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 12);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @returns flatbuffers.Long
                 */
                Model.prototype.modelVersion = function () {
                    var offset = this.bb.__offset(this.bb_pos, 14);
                    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
                };
                Model.prototype.docString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 16);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Graph= obj
                 * @returns onnxruntime.experimental.fbs.Graph|null
                 */
                Model.prototype.graph = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 18);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Graph())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                Model.prototype.graphDocString = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 20);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                Model.startModel = function (builder) {
                    builder.startObject(9);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Long irVersion
                 */
                Model.addIrVersion = function (builder, irVersion) {
                    builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset opsetImportOffset
                 */
                Model.addOpsetImport = function (builder, opsetImportOffset) {
                    builder.addFieldOffset(1, opsetImportOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                Model.createOpsetImportVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                Model.startOpsetImportVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset producerNameOffset
                 */
                Model.addProducerName = function (builder, producerNameOffset) {
                    builder.addFieldOffset(2, producerNameOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset producerVersionOffset
                 */
                Model.addProducerVersion = function (builder, producerVersionOffset) {
                    builder.addFieldOffset(3, producerVersionOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset domainOffset
                 */
                Model.addDomain = function (builder, domainOffset) {
                    builder.addFieldOffset(4, domainOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Long modelVersion
                 */
                Model.addModelVersion = function (builder, modelVersion) {
                    builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset docStringOffset
                 */
                Model.addDocString = function (builder, docStringOffset) {
                    builder.addFieldOffset(6, docStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset graphOffset
                 */
                Model.addGraph = function (builder, graphOffset) {
                    builder.addFieldOffset(7, graphOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset graphDocStringOffset
                 */
                Model.addGraphDocString = function (builder, graphDocStringOffset) {
                    builder.addFieldOffset(8, graphDocStringOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                Model.endModel = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                Model.createModel = function (builder, irVersion, opsetImportOffset, producerNameOffset, producerVersionOffset, domainOffset, modelVersion, docStringOffset, graphOffset, graphDocStringOffset) {
                    Model.startModel(builder);
                    Model.addIrVersion(builder, irVersion);
                    Model.addOpsetImport(builder, opsetImportOffset);
                    Model.addProducerName(builder, producerNameOffset);
                    Model.addProducerVersion(builder, producerVersionOffset);
                    Model.addDomain(builder, domainOffset);
                    Model.addModelVersion(builder, modelVersion);
                    Model.addDocString(builder, docStringOffset);
                    Model.addGraph(builder, graphOffset);
                    Model.addGraphDocString(builder, graphDocStringOffset);
                    return Model.endModel(builder);
                };
                return Model;
            }());
            fbs.Model = Model;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var KernelCreateInfos = /** @class */ (function () {
                function KernelCreateInfos() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns KernelCreateInfos
                 */
                KernelCreateInfos.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param KernelCreateInfos= obj
                 * @returns KernelCreateInfos
                 */
                KernelCreateInfos.getRootAsKernelCreateInfos = function (bb, obj) {
                    return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param KernelCreateInfos= obj
                 * @returns KernelCreateInfos
                 */
                KernelCreateInfos.getSizePrefixedRootAsKernelCreateInfos = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param number index
                 * @returns number
                 */
                KernelCreateInfos.prototype.nodeIndices = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
                };
                /**
                 * @returns number
                 */
                KernelCreateInfos.prototype.nodeIndicesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @returns Uint32Array
                 */
                KernelCreateInfos.prototype.nodeIndicesArray = function () {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ?
                        new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) :
                        null;
                };
                /**
                 * @param number index
                 * @returns flatbuffers.Long
                 */
                KernelCreateInfos.prototype.kernelDefHashes = function (index) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.readUint64(this.bb.__vector(this.bb_pos + offset) + index * 8) :
                        this.bb.createLong(0, 0);
                };
                /**
                 * @returns number
                 */
                KernelCreateInfos.prototype.kernelDefHashesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                KernelCreateInfos.startKernelCreateInfos = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset nodeIndicesOffset
                 */
                KernelCreateInfos.addNodeIndices = function (builder, nodeIndicesOffset) {
                    builder.addFieldOffset(0, nodeIndicesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<number> data
                 * @returns flatbuffers.Offset
                 */
                KernelCreateInfos.createNodeIndicesVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt32(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                KernelCreateInfos.startNodeIndicesVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset kernelDefHashesOffset
                 */
                KernelCreateInfos.addKernelDefHashes = function (builder, kernelDefHashesOffset) {
                    builder.addFieldOffset(1, kernelDefHashesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Long> data
                 * @returns flatbuffers.Offset
                 */
                KernelCreateInfos.createKernelDefHashesVector = function (builder, data) {
                    builder.startVector(8, data.length, 8);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addInt64(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                KernelCreateInfos.startKernelDefHashesVector = function (builder, numElems) {
                    builder.startVector(8, numElems, 8);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                KernelCreateInfos.endKernelCreateInfos = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                KernelCreateInfos.createKernelCreateInfos = function (builder, nodeIndicesOffset, kernelDefHashesOffset) {
                    KernelCreateInfos.startKernelCreateInfos(builder);
                    KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);
                    KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);
                    return KernelCreateInfos.endKernelCreateInfos(builder);
                };
                return KernelCreateInfos;
            }());
            fbs.KernelCreateInfos = KernelCreateInfos;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var SubGraphSessionState = /** @class */ (function () {
                function SubGraphSessionState() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns SubGraphSessionState
                 */
                SubGraphSessionState.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SubGraphSessionState= obj
                 * @returns SubGraphSessionState
                 */
                SubGraphSessionState.getRootAsSubGraphSessionState = function (bb, obj) {
                    return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SubGraphSessionState= obj
                 * @returns SubGraphSessionState
                 */
                SubGraphSessionState.getSizePrefixedRootAsSubGraphSessionState = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                SubGraphSessionState.prototype.graphId = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.SessionState= obj
                 * @returns onnxruntime.experimental.fbs.SessionState|null
                 */
                SubGraphSessionState.prototype.sessionState = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                SubGraphSessionState.startSubGraphSessionState = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset graphIdOffset
                 */
                SubGraphSessionState.addGraphId = function (builder, graphIdOffset) {
                    builder.addFieldOffset(0, graphIdOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset sessionStateOffset
                 */
                SubGraphSessionState.addSessionState = function (builder, sessionStateOffset) {
                    builder.addFieldOffset(1, sessionStateOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                SubGraphSessionState.endSubGraphSessionState = function (builder) {
                    var offset = builder.endObject();
                    builder.requiredField(offset, 4); // graph_id
                    return offset;
                };
                SubGraphSessionState.createSubGraphSessionState = function (builder, graphIdOffset, sessionStateOffset) {
                    SubGraphSessionState.startSubGraphSessionState(builder);
                    SubGraphSessionState.addGraphId(builder, graphIdOffset);
                    SubGraphSessionState.addSessionState(builder, sessionStateOffset);
                    return SubGraphSessionState.endSubGraphSessionState(builder);
                };
                return SubGraphSessionState;
            }());
            fbs.SubGraphSessionState = SubGraphSessionState;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var SessionState = /** @class */ (function () {
                function SessionState() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns SessionState
                 */
                SessionState.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SessionState= obj
                 * @returns SessionState
                 */
                SessionState.getRootAsSessionState = function (bb, obj) {
                    return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param SessionState= obj
                 * @returns SessionState
                 */
                SessionState.getSizePrefixedRootAsSessionState = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj
                 * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null
                 */
                SessionState.prototype.kernels = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param number index
                 * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj
                 * @returns onnxruntime.experimental.fbs.SubGraphSessionState
                 */
                SessionState.prototype.subGraphSessionStates = function (index, obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())
                        .__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) :
                        null;
                };
                /**
                 * @returns number
                 */
                SessionState.prototype.subGraphSessionStatesLength = function () {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                SessionState.startSessionState = function (builder) {
                    builder.startObject(2);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset kernelsOffset
                 */
                SessionState.addKernels = function (builder, kernelsOffset) {
                    builder.addFieldOffset(0, kernelsOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset subGraphSessionStatesOffset
                 */
                SessionState.addSubGraphSessionStates = function (builder, subGraphSessionStatesOffset) {
                    builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param Array.<flatbuffers.Offset> data
                 * @returns flatbuffers.Offset
                 */
                SessionState.createSubGraphSessionStatesVector = function (builder, data) {
                    builder.startVector(4, data.length, 4);
                    for (var i = data.length - 1; i >= 0; i--) {
                        builder.addOffset(data[i]);
                    }
                    return builder.endVector();
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param number numElems
                 */
                SessionState.startSubGraphSessionStatesVector = function (builder, numElems) {
                    builder.startVector(4, numElems, 4);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                SessionState.endSessionState = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                SessionState.createSessionState = function (builder, kernelsOffset, subGraphSessionStatesOffset) {
                    SessionState.startSessionState(builder);
                    SessionState.addKernels(builder, kernelsOffset);
                    SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);
                    return SessionState.endSessionState(builder);
                };
                return SessionState;
            }());
            fbs.SessionState = SessionState;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));
/**
 * @constructor
 */
(function (onnxruntime) {
    var experimental;
    (function (experimental) {
        var fbs;
        (function (fbs) {
            var InferenceSession = /** @class */ (function () {
                function InferenceSession() {
                    this.bb = null;
                    this.bb_pos = 0;
                }
                /**
                 * @param number i
                 * @param flatbuffers.ByteBuffer bb
                 * @returns InferenceSession
                 */
                InferenceSession.prototype.__init = function (i, bb) {
                    this.bb_pos = i;
                    this.bb = bb;
                    return this;
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param InferenceSession= obj
                 * @returns InferenceSession
                 */
                InferenceSession.getRootAsInferenceSession = function (bb, obj) {
                    return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @param InferenceSession= obj
                 * @returns InferenceSession
                 */
                InferenceSession.getSizePrefixedRootAsInferenceSession = function (bb, obj) {
                    bb.setPosition(bb.position() + flatbuffers_1.flatbuffers.SIZE_PREFIX_LENGTH);
                    return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
                };
                /**
                 * @param flatbuffers.ByteBuffer bb
                 * @returns boolean
                 */
                InferenceSession.bufferHasIdentifier = function (bb) {
                    return bb.__has_identifier('ORTM');
                };
                InferenceSession.prototype.ortVersion = function (optionalEncoding) {
                    var offset = this.bb.__offset(this.bb_pos, 4);
                    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.Model= obj
                 * @returns onnxruntime.experimental.fbs.Model|null
                 */
                InferenceSession.prototype.model = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 6);
                    return offset ? (obj || new onnxruntime.experimental.fbs.Model())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param onnxruntime.experimental.fbs.SessionState= obj
                 * @returns onnxruntime.experimental.fbs.SessionState|null
                 */
                InferenceSession.prototype.sessionState = function (obj) {
                    var offset = this.bb.__offset(this.bb_pos, 8);
                    return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())
                        .__init(this.bb.__indirect(this.bb_pos + offset), this.bb) :
                        null;
                };
                /**
                 * @param flatbuffers.Builder builder
                 */
                InferenceSession.startInferenceSession = function (builder) {
                    builder.startObject(3);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset ortVersionOffset
                 */
                InferenceSession.addOrtVersion = function (builder, ortVersionOffset) {
                    builder.addFieldOffset(0, ortVersionOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset modelOffset
                 */
                InferenceSession.addModel = function (builder, modelOffset) {
                    builder.addFieldOffset(1, modelOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset sessionStateOffset
                 */
                InferenceSession.addSessionState = function (builder, sessionStateOffset) {
                    builder.addFieldOffset(2, sessionStateOffset, 0);
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @returns flatbuffers.Offset
                 */
                InferenceSession.endInferenceSession = function (builder) {
                    var offset = builder.endObject();
                    return offset;
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset offset
                 */
                InferenceSession.finishInferenceSessionBuffer = function (builder, offset) {
                    builder.finish(offset, 'ORTM');
                };
                /**
                 * @param flatbuffers.Builder builder
                 * @param flatbuffers.Offset offset
                 */
                InferenceSession.finishSizePrefixedInferenceSessionBuffer = function (builder, offset) {
                    builder.finish(offset, 'ORTM', true);
                };
                InferenceSession.createInferenceSession = function (builder, ortVersionOffset, modelOffset, sessionStateOffset) {
                    InferenceSession.startInferenceSession(builder);
                    InferenceSession.addOrtVersion(builder, ortVersionOffset);
                    InferenceSession.addModel(builder, modelOffset);
                    InferenceSession.addSessionState(builder, sessionStateOffset);
                    return InferenceSession.endInferenceSession(builder);
                };
                return InferenceSession;
            }());
            fbs.InferenceSession = InferenceSession;
        })(fbs = experimental.fbs || (experimental.fbs = {}));
    })(experimental = onnxruntime.experimental || (onnxruntime.experimental = {}));
})(onnxruntime = exports.onnxruntime || (exports.onnxruntime = {}));


/***/ }),

/***/ "./lib/onnxjs/session-handler.ts":
/*!***************************************!*\
  !*** ./lib/onnxjs/session-handler.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnnxjsSessionHandler = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var tensor_1 = __webpack_require__(/*! ./tensor */ "./lib/onnxjs/tensor.ts");
var OnnxjsSessionHandler = /** @class */ (function () {
    function OnnxjsSessionHandler(session) {
        this.session = session;
        this.inputNames = this.session.inputNames;
        this.outputNames = this.session.outputNames;
    }
    OnnxjsSessionHandler.prototype.dispose = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    OnnxjsSessionHandler.prototype.run = function (feeds, _fetches, _options) {
        return __awaiter(this, void 0, void 0, function () {
            var inputMap, name_1, feed, outputMap, output;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputMap = new Map();
                        for (name_1 in feeds) {
                            if (Object.hasOwnProperty.call(feeds, name_1)) {
                                feed = feeds[name_1];
                                inputMap.set(name_1, new tensor_1.Tensor(feed.dims, feed.type, undefined, undefined, feed.data));
                            }
                        }
                        return [4 /*yield*/, this.session.run(inputMap)];
                    case 1:
                        outputMap = _a.sent();
                        output = {};
                        outputMap.forEach(function (tensor, name) {
                            output[name] = new onnxruntime_common_1.Tensor(tensor.type, tensor.data, tensor.dims);
                        });
                        return [2 /*return*/, output];
                }
            });
        });
    };
    OnnxjsSessionHandler.prototype.startProfiling = function () {
        this.session.startProfiling();
    };
    OnnxjsSessionHandler.prototype.endProfiling = function () {
        this.session.endProfiling();
    };
    return OnnxjsSessionHandler;
}());
exports.OnnxjsSessionHandler = OnnxjsSessionHandler;


/***/ }),

/***/ "./lib/onnxjs/session.ts":
/*!*******************************!*\
  !*** ./lib/onnxjs/session.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Session = void 0;
var fs_1 = __webpack_require__(/*! fs */ "?6c45");
var util_1 = __webpack_require__(/*! util */ "?b3a2");
var backend_1 = __webpack_require__(/*! ./backend */ "./lib/onnxjs/backend.ts");
var execution_plan_1 = __webpack_require__(/*! ./execution-plan */ "./lib/onnxjs/execution-plan.ts");
var instrument_1 = __webpack_require__(/*! ./instrument */ "./lib/onnxjs/instrument.ts");
var model_1 = __webpack_require__(/*! ./model */ "./lib/onnxjs/model.ts");
var Session = /** @class */ (function () {
    function Session(config) {
        if (config === void 0) { config = {}; }
        this._initialized = false;
        this.backendHint = config.backendHint;
        this.profiler = instrument_1.Profiler.create(config.profiler);
        this.context = { profiler: this.profiler, graphInputTypes: [], graphInputDims: [] };
    }
    Object.defineProperty(Session.prototype, "inputNames", {
        get: function () {
            return this._model.graph.getInputNames();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Session.prototype, "outputNames", {
        get: function () {
            return this._model.graph.getOutputNames();
        },
        enumerable: false,
        configurable: true
    });
    Session.prototype.startProfiling = function () {
        this.profiler.start();
    };
    Session.prototype.endProfiling = function () {
        this.profiler.stop();
    };
    Session.prototype.loadModel = function (arg, byteOffset, length) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.profiler.event('session', 'Session.loadModel', function () { return __awaiter(_this, void 0, void 0, function () {
                            var backend, isOrtFormat, buf, response, buf, arr;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, backend_1.resolveBackend(this.backendHint)];
                                    case 1:
                                        backend = _a.sent();
                                        this.sessionHandler = backend.createSessionHandler(this.context);
                                        this._model = new model_1.Model();
                                        if (!(typeof arg === 'string')) return [3 /*break*/, 7];
                                        isOrtFormat = arg.endsWith('.ort');
                                        if (!(typeof fetch === 'undefined')) return [3 /*break*/, 3];
                                        return [4 /*yield*/, util_1.promisify(fs_1.readFile)(arg)];
                                    case 2:
                                        buf = _a.sent();
                                        this.initialize(Buffer.from(buf), isOrtFormat);
                                        return [3 /*break*/, 6];
                                    case 3: return [4 /*yield*/, fetch(arg)];
                                    case 4:
                                        response = _a.sent();
                                        return [4 /*yield*/, response.arrayBuffer()];
                                    case 5:
                                        buf = _a.sent();
                                        this.initialize(new Uint8Array(buf), isOrtFormat);
                                        _a.label = 6;
                                    case 6: return [3 /*break*/, 8];
                                    case 7:
                                        if (!ArrayBuffer.isView(arg)) {
                                            arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);
                                            this.initialize(arr);
                                        }
                                        else {
                                            // load model from Uint8array
                                            this.initialize(arg);
                                        }
                                        _a.label = 8;
                                    case 8: return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Session.prototype.initialize = function (modelProtoBlob, isOrtFormat) {
        var _this = this;
        if (this._initialized) {
            throw new Error('already initialized');
        }
        this.profiler.event('session', 'Session.initialize', function () {
            // load graph
            var graphInitializer = _this.sessionHandler.transformGraph ? _this.sessionHandler : undefined;
            _this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);
            // graph is completely initialzied at this stage , let the interested handlers know
            if (_this.sessionHandler.onGraphInitialized) {
                _this.sessionHandler.onGraphInitialized(_this._model.graph);
            }
            // initialize each operator in the graph
            _this.initializeOps(_this._model.graph);
            // instantiate an ExecutionPlan object to be used by the Session object
            _this._executionPlan = new execution_plan_1.ExecutionPlan(_this._model.graph, _this._ops, _this.profiler);
        });
        this._initialized = true;
    };
    Session.prototype.run = function (inputs) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this._initialized) {
                    throw new Error('session not initialized yet');
                }
                return [2 /*return*/, this.profiler.event('session', 'Session.run', function () { return __awaiter(_this, void 0, void 0, function () {
                        var inputTensors, outputTensors;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    inputTensors = this.normalizeAndValidateInputs(inputs);
                                    return [4 /*yield*/, this._executionPlan.execute(this.sessionHandler, inputTensors)];
                                case 1:
                                    outputTensors = _a.sent();
                                    return [2 /*return*/, this.createOutput(outputTensors)];
                            }
                        });
                    }); })];
            });
        });
    };
    Session.prototype.normalizeAndValidateInputs = function (inputs) {
        var modelInputNames = this._model.graph.getInputNames();
        // normalize inputs
        // inputs: Tensor[]
        if (Array.isArray(inputs)) {
            if (inputs.length !== modelInputNames.length) {
                throw new Error("incorrect input array length: expected " + modelInputNames.length + " but got " + inputs.length);
            }
        }
        // convert map to array
        // inputs: Map<string, Tensor>
        else {
            if (inputs.size !== modelInputNames.length) {
                throw new Error("incorrect input map size: expected " + modelInputNames.length + " but got " + inputs.size);
            }
            var sortedInputs = new Array(inputs.size);
            var sortedInputsIndex = 0;
            for (var i = 0; i < modelInputNames.length; ++i) {
                var tensor = inputs.get(modelInputNames[i]);
                if (!tensor) {
                    throw new Error("missing input tensor for: '" + name + "'");
                }
                sortedInputs[sortedInputsIndex++] = tensor;
            }
            inputs = sortedInputs;
        }
        // validate dims requirements
        // First session run - graph input data is not cached for the session
        if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||
            this.context.graphInputDims.length === 0) {
            var modelInputIndices = this._model.graph.getInputIndices();
            var modelValues = this._model.graph.getValues();
            var graphInputDims = new Array(modelInputIndices.length);
            for (var i = 0; i < modelInputIndices.length; ++i) {
                var graphInput = modelValues[modelInputIndices[i]];
                graphInputDims[i] = graphInput.type.shape.dims;
                // cached for second and subsequent runs.
                // Some parts of the framework works on the assumption that the graph and types and shapes are static
                this.context.graphInputTypes.push(graphInput.type.tensorType);
                this.context.graphInputDims.push(inputs[i].dims);
            }
            this.validateInputTensorDims(graphInputDims, inputs, true);
        }
        // Second and subsequent session runs - graph input data is cached for the session
        else {
            this.validateInputTensorDims(this.context.graphInputDims, inputs, false);
        }
        // validate types requirement
        this.validateInputTensorTypes(this.context.graphInputTypes, inputs);
        return inputs;
    };
    Session.prototype.validateInputTensorTypes = function (graphInputTypes, givenInputs) {
        for (var i = 0; i < givenInputs.length; i++) {
            var expectedType = graphInputTypes[i];
            var actualType = givenInputs[i].type;
            if (expectedType !== actualType) {
                throw new Error("input tensor[" + i + "] check failed: expected type '" + expectedType + "' but got " + actualType);
            }
        }
    };
    Session.prototype.validateInputTensorDims = function (graphInputDims, givenInputs, noneDimSupported) {
        for (var i = 0; i < givenInputs.length; i++) {
            var expectedDims = graphInputDims[i];
            var actualDims = givenInputs[i].dims;
            if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {
                throw new Error("input tensor[" + i + "] check failed: expected shape '[" + expectedDims.join(',') + "]' but got [" + actualDims.join(',') + "]");
            }
        }
    };
    Session.prototype.compareTensorDims = function (expectedDims, actualDims, noneDimSupported) {
        if (expectedDims.length !== actualDims.length) {
            return false;
        }
        for (var i = 0; i < expectedDims.length; ++i) {
            if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {
                // data shape mis-match AND not a 'None' dimension.
                return false;
            }
        }
        return true;
    };
    Session.prototype.createOutput = function (outputTensors) {
        var modelOutputNames = this._model.graph.getOutputNames();
        if (outputTensors.length !== modelOutputNames.length) {
            throw new Error('expected number of outputs do not match number of generated outputs');
        }
        var output = new Map();
        for (var i = 0; i < modelOutputNames.length; ++i) {
            output.set(modelOutputNames[i], outputTensors[i]);
        }
        return output;
    };
    Session.prototype.initializeOps = function (graph) {
        var nodes = graph.getNodes();
        this._ops = new Array(nodes.length);
        for (var i = 0; i < nodes.length; i++) {
            this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);
        }
    };
    return Session;
}());
exports.Session = Session;


/***/ }),

/***/ "./lib/onnxjs/tensor.ts":
/*!******************************!*\
  !*** ./lib/onnxjs/tensor.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tensor = void 0;
var guid_typescript_1 = __webpack_require__(/*! guid-typescript */ "./node_modules/guid-typescript/dist/guid.js");
var long_1 = __importDefault(__webpack_require__(/*! long */ "./node_modules/long/src/long.js"));
var onnx_proto_1 = __webpack_require__(/*! onnx-proto */ "./node_modules/onnx-proto/dist/onnx.js");
var ort_generated_1 = __webpack_require__(/*! ./ort-schema/ort-generated */ "./lib/onnxjs/ort-schema/ort-generated.ts");
var ortFbs = ort_generated_1.onnxruntime.experimental.fbs;
var util_1 = __webpack_require__(/*! ./util */ "./lib/onnxjs/util.ts");
var Tensor = /** @class */ (function () {
    function Tensor(
    /**
     * get the dimensions of the tensor
     */
    dims, 
    /**
     * get the type of the tensor
     */
    type, dataProvider, asyncDataProvider, cache, 
    /**
     * get the data ID that used to map to a tensor data
     */
    dataId) {
        if (dataId === void 0) { dataId = guid_typescript_1.Guid.create(); }
        this.dims = dims;
        this.type = type;
        this.dataProvider = dataProvider;
        this.asyncDataProvider = asyncDataProvider;
        this.cache = cache;
        this.dataId = dataId;
        this.size = util_1.ShapeUtil.validateDimsAndCalcSize(dims);
        var size = this.size;
        var empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);
        if (cache !== undefined) {
            if (cache.length !== size) {
                throw new RangeError('Input dims doesn\'t match data length.');
            }
        }
        if (type === 'string') {
            if (cache !== undefined && (!Array.isArray(cache) || !cache.every(function (i) { return typeof i === 'string'; }))) {
                throw new TypeError('cache should be a string array');
            }
            if (empty) {
                this.cache = new Array(size);
            }
        }
        else {
            if (cache !== undefined) {
                var constructor = dataviewConstructor(type);
                if (!(cache instanceof constructor)) {
                    throw new TypeError("cache should be type " + constructor.name);
                }
            }
            if (empty) {
                var buf = new ArrayBuffer(size * sizeof(type));
                this.cache = createView(buf, type);
            }
        }
    }
    Object.defineProperty(Tensor.prototype, "data", {
        /**
         * get the underlying tensor data
         */
        get: function () {
            if (this.cache === undefined) {
                var data = this.dataProvider(this.dataId);
                if (data.length !== this.size) {
                    throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');
                }
                this.cache = data;
            }
            return this.cache;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tensor.prototype, "stringData", {
        /**
         * get the underlying string tensor data. Should only use when type is STRING
         */
        get: function () {
            if (this.type !== 'string') {
                throw new TypeError('data type is not string');
            }
            return this.data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tensor.prototype, "integerData", {
        /**
         * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,
         * INT16, INT32, UINT32, BOOL)
         */
        get: function () {
            switch (this.type) {
                case 'uint8':
                case 'int8':
                case 'uint16':
                case 'int16':
                case 'int32':
                case 'uint32':
                case 'bool':
                    return this.data;
                default:
                    throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tensor.prototype, "floatData", {
        /**
         * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)
         */
        get: function () {
            switch (this.type) {
                case 'float32':
                case 'float64':
                    return this.data;
                default:
                    throw new TypeError('data type is not float (float32, float64)');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Tensor.prototype, "numberData", {
        /**
         * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,
         * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)
         */
        get: function () {
            if (this.type !== 'string') {
                return this.data;
            }
            throw new TypeError('type cannot be non-number (string)');
        },
        enumerable: false,
        configurable: true
    });
    /**
     * get value of an element at the given indices
     */
    Tensor.prototype.get = function (indices) {
        return this.data[util_1.ShapeUtil.indicesToOffset(indices, this.strides)];
    };
    /**
     * set value of an element at the given indices
     */
    Tensor.prototype.set = function (indices, value) {
        this.data[util_1.ShapeUtil.indicesToOffset(indices, this.strides)] = value;
    };
    /**
     * get the underlying tensor data asynchronously
     */
    Tensor.prototype.getData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.cache === undefined)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.asyncDataProvider(this.dataId)];
                    case 1:
                        _a.cache = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, this.cache];
                }
            });
        });
    };
    Object.defineProperty(Tensor.prototype, "strides", {
        /**
         * get the strides for each dimension
         */
        get: function () {
            if (!this._strides) {
                this._strides = util_1.ShapeUtil.computeStrides(this.dims);
            }
            return this._strides;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Construct new Tensor from a ONNX Tensor object
     * @param tensorProto the ONNX Tensor
     */
    Tensor.fromProto = function (tensorProto) {
        if (!tensorProto) {
            throw new Error('cannot construct Value from an empty tensor');
        }
        var type = util_1.ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType);
        var dims = util_1.ProtoUtil.tensorDimsFromProto(tensorProto.dims);
        var value = new Tensor(dims, type);
        if (type === 'string') {
            // When it's STRING type, the value should always be stored in field
            // 'stringData'
            tensorProto.stringData.forEach(function (str, i) {
                var buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);
                value.data[i] = buf.toString();
            });
        }
        else if (tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&
            tensorProto.rawData.byteLength > 0) {
            // NOT considering segment for now (IMPORTANT)
            // populate value from rawData
            var dataDest = value.data;
            var dataSource = new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);
            var elementSize = sizeofProto(tensorProto.dataType);
            var length_1 = tensorProto.rawData.byteLength / elementSize;
            if (tensorProto.rawData.byteLength % elementSize !== 0) {
                throw new Error('invalid buffer length');
            }
            if (dataDest.length !== length_1) {
                throw new Error('buffer length mismatch');
            }
            for (var i = 0; i < length_1; i++) {
                var n = readProto(dataSource, tensorProto.dataType, i * elementSize);
                dataDest[i] = n;
            }
        }
        else {
            // populate value from array
            var array = void 0;
            switch (tensorProto.dataType) {
                case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
                    array = tensorProto.floatData;
                    break;
                case onnx_proto_1.onnx.TensorProto.DataType.INT32:
                case onnx_proto_1.onnx.TensorProto.DataType.INT16:
                case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
                case onnx_proto_1.onnx.TensorProto.DataType.INT8:
                case onnx_proto_1.onnx.TensorProto.DataType.UINT8:
                case onnx_proto_1.onnx.TensorProto.DataType.BOOL:
                    array = tensorProto.int32Data;
                    break;
                case onnx_proto_1.onnx.TensorProto.DataType.INT64:
                    array = tensorProto.int64Data;
                    break;
                case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
                    array = tensorProto.doubleData;
                    break;
                case onnx_proto_1.onnx.TensorProto.DataType.UINT32:
                case onnx_proto_1.onnx.TensorProto.DataType.UINT64:
                    array = tensorProto.uint64Data;
                    break;
                default:
                    // should never run here
                    throw new Error('unspecific error');
            }
            if (array === null || array === undefined) {
                throw new Error('failed to populate data from a tensorproto value');
            }
            var data = value.data;
            if (data.length !== array.length) {
                throw new Error('array length mismatch');
            }
            for (var i = 0; i < array.length; i++) {
                var element = array[i];
                if (long_1.default.isLong(element)) {
                    data[i] = longToNumber(element, tensorProto.dataType);
                }
                else {
                    data[i] = element;
                }
            }
        }
        return value;
    };
    /**
     * Construct new Tensor from raw data
     * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array
     * for other types of tensor.
     * @param dims the dimensions of the tensor
     * @param type the type of the tensor
     */
    Tensor.fromData = function (data, dims, type) {
        return new Tensor(dims, type, undefined, undefined, data);
    };
    Tensor.fromOrtTensor = function (ortTensor) {
        if (!ortTensor) {
            throw new Error('cannot construct Value from an empty tensor');
        }
        var dims = util_1.ProtoUtil.tensorDimsFromORTFormat(ortTensor);
        var type = util_1.ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());
        var value = new Tensor(dims, type);
        if (type === 'string') {
            // When it's STRING type, the value should always be stored in field
            // 'stringData'
            for (var i = 0; i < ortTensor.stringDataLength(); i++) {
                value.data[i] = ortTensor.stringData(i);
            }
        }
        else if (ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {
            // NOT considering segment for now (IMPORTANT)
            // populate value from rawData
            var dataDest = value.data;
            var dataSource = new DataView(ortTensor.rawDataArray().buffer, ortTensor.rawDataArray().byteOffset, ortTensor.rawDataLength());
            var elementSize = sizeofProto(ortTensor.dataType());
            var length_2 = ortTensor.rawDataLength() / elementSize;
            if (ortTensor.rawDataLength() % elementSize !== 0) {
                throw new Error('invalid buffer length');
            }
            if (dataDest.length !== length_2) {
                throw new Error('buffer length mismatch');
            }
            for (var i = 0; i < length_2; i++) {
                var n = readProto(dataSource, ortTensor.dataType(), i * elementSize);
                dataDest[i] = n;
            }
        }
        return value;
    };
    return Tensor;
}());
exports.Tensor = Tensor;
function sizeof(type) {
    switch (type) {
        case 'bool':
        case 'int8':
        case 'uint8':
            return 1;
        case 'int16':
        case 'uint16':
            return 2;
        case 'int32':
        case 'uint32':
        case 'float32':
            return 4;
        case 'float64':
            return 8;
        default:
            throw new Error("cannot calculate sizeof() on type " + type);
    }
}
function sizeofProto(type) {
    switch (type) {
        case onnx_proto_1.onnx.TensorProto.DataType.UINT8:
        case onnx_proto_1.onnx.TensorProto.DataType.INT8:
        case onnx_proto_1.onnx.TensorProto.DataType.BOOL:
            return 1;
        case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
        case onnx_proto_1.onnx.TensorProto.DataType.INT16:
            return 2;
        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
        case onnx_proto_1.onnx.TensorProto.DataType.INT32:
        case onnx_proto_1.onnx.TensorProto.DataType.UINT32:
            return 4;
        case onnx_proto_1.onnx.TensorProto.DataType.INT64:
        case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
        case onnx_proto_1.onnx.TensorProto.DataType.UINT64:
            return 8;
        default:
            throw new Error("cannot calculate sizeof() on type " + onnx_proto_1.onnx.TensorProto.DataType[type]);
    }
}
function createView(dataBuffer, type) {
    return new (dataviewConstructor(type))(dataBuffer);
}
function dataviewConstructor(type) {
    switch (type) {
        case 'bool':
        case 'uint8':
            return Uint8Array;
        case 'int8':
            return Int8Array;
        case 'int16':
            return Int16Array;
        case 'uint16':
            return Uint16Array;
        case 'int32':
            return Int32Array;
        case 'uint32':
            return Uint32Array;
        case 'float32':
            return Float32Array;
        case 'float64':
            return Float64Array;
        default:
            // should never run to here
            throw new Error('unspecified error');
    }
}
// convert a long number to a 32-bit integer (cast-down)
function longToNumber(i, type) {
    // INT64, UINT32, UINT64
    if (type === onnx_proto_1.onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {
        if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {
            throw new TypeError('int64 is not supported');
        }
    }
    else if (type === onnx_proto_1.onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||
        type === onnx_proto_1.onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {
        if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {
            throw new TypeError('uint64 is not supported');
        }
    }
    else {
        throw new TypeError("not a LONG type: " + onnx_proto_1.onnx.TensorProto.DataType[type]);
    }
    return i.toNumber();
}
// read one value from TensorProto
function readProto(view, type, byteOffset) {
    switch (type) {
        case onnx_proto_1.onnx.TensorProto.DataType.BOOL:
        case onnx_proto_1.onnx.TensorProto.DataType.UINT8:
            return view.getUint8(byteOffset);
        case onnx_proto_1.onnx.TensorProto.DataType.INT8:
            return view.getInt8(byteOffset);
        case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
            return view.getUint16(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.INT16:
            return view.getInt16(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
            return view.getFloat32(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.INT32:
            return view.getInt32(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.UINT32:
            return view.getUint32(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.INT64:
            return longToNumber(long_1.default.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);
        case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
            return view.getFloat64(byteOffset, true);
        case onnx_proto_1.onnx.TensorProto.DataType.UINT64:
            return longToNumber(long_1.default.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);
        default:
            throw new Error("cannot read from DataView for type " + onnx_proto_1.onnx.TensorProto.DataType[type]);
    }
}


/***/ }),

/***/ "./lib/onnxjs/util.ts":
/*!****************************!*\
  !*** ./lib/onnxjs/util.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PoolConvUtil = exports.ReduceUtil = exports.SplitUtil = exports.MathUtil = exports.ShapeUtil = exports.LongUtil = exports.ProtoUtil = exports.GemmUtil = exports.arrayCopyHelper = exports.BroadcastUtil = exports.MatMulUtil = exports.ArrayUtil = exports.assert = exports.checkInputsShape = void 0;
var flatbuffers_1 = __webpack_require__(/*! flatbuffers */ "./node_modules/flatbuffers/js/flatbuffers.mjs");
var long_1 = __importDefault(__webpack_require__(/*! long */ "./node_modules/long/src/long.js"));
var onnx_proto_1 = __webpack_require__(/*! onnx-proto */ "./node_modules/onnx-proto/dist/onnx.js");
var tensor_1 = __webpack_require__(/*! ./tensor */ "./lib/onnxjs/tensor.ts");
// check the inputs shape before running an OP.
// return true when the inputs pass the check
// return false when the inputs do not fit the requirement
// throw exception when fatal error or not implemented
function checkInputsShape(inputs) {
    var expectedDimensions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        expectedDimensions[_i - 1] = arguments[_i];
    }
    if (!inputs || inputs.length !== expectedDimensions.length) {
        return false;
    }
    for (var i = 0; i < inputs.length; i++) {
        if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {
            return false;
        }
    }
    return true;
}
exports.checkInputsShape = checkInputsShape;
// Evaluates the given expression and asserts error message if condition is unmet.
function assert(expr, msg) {
    if (!expr) {
        throw new Error(typeof msg === 'string' ? msg : msg());
    }
}
exports.assert = assert;
var ArrayUtil = /** @class */ (function () {
    function ArrayUtil() {
    }
    /**
     * Verifies if 2 input arrays contain the same elements.
     * @param n1 Array 1
     * @param n2 Array 2
     * @returns Whether these 2 are equal
     */
    ArrayUtil.arraysEqual = function (n1, n2) {
        if (n1.length !== n2.length) {
            return false;
        }
        for (var i = 0; i < n1.length; i++) {
            if (n1[i] !== n2[i]) {
                return false;
            }
        }
        return true;
    };
    return ArrayUtil;
}());
exports.ArrayUtil = ArrayUtil;
var MatMulUtil = /** @class */ (function () {
    function MatMulUtil() {
    }
    /**
     * Fix the input shapes for MatMul operation if they need fixing
     * @param dimsA The shape of tensor A. Should be an array of positive integers
     * @param dimsB The shape of tensor B. Should be an array of positive integers
     * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications
     */
    MatMulUtil.preprocessInputShapes = function (dimsA, dimsB) {
        // If the first argument is 1-D, it is promoted to a matrix by prepending
        // a 1 to its dimensions. After matrix multiplication the prepended 1 is
        // removed.
        var a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;
        // If the second argument is 1-D, it is promoted to a matrix by appending
        // a 1 to its dimensions. After matrix multiplication the appended 1 is
        // removed.
        var b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;
        return [a, b];
    };
    /**
     * Fix the output shape computed for MatMul operation if it needs fixing
     * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.
     * This will be mutated.
     * @param aRank The rank of tensor A.
     * @param bRank The rank of tensor B.
     */
    MatMulUtil.postprocessOutputShape = function (outputShape, aRank, bRank) {
        // Remove prepended dimension if first input is 1d
        if (aRank === 1) {
            // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));
            outputShape.splice(outputShape.length - 2, 1);
        }
        // Remove appended dimension if second input is 1d
        if (bRank === 1) {
            outputShape.pop();
        }
    };
    /**
     * Calculate the expected shape when matrix multiplication
     * @param a The shape of tensor A. Should be a tuple of 2 positive integers
     * @param b The shape of tensor B. Should be a tuple of 2 positive integers
     * @returns The expected shape of the result, or undefined if N/A
     */
    MatMulUtil.calcMatMulShape = function (a, b) {
        return (a[1] !== b[0]) ? undefined : [a[0], b[1]];
    };
    return MatMulUtil;
}());
exports.MatMulUtil = MatMulUtil;
var BroadcastUtil = /** @class */ (function () {
    function BroadcastUtil() {
    }
    /**
     * Calculate the expected shape when broadcasting 2 tensors
     * @param a The shape of tensor A. Should be an array of positive integers
     * @param b The shape of tensor B. Should be an array of positive integers
     * @param isMatMul Whether the operation is MatMul
     * @returns The expected shape of the result, or undefined if N/A
     */
    BroadcastUtil.calcShape = function (adims, bdims, isMatMul) {
        var _a;
        if (isMatMul === void 0) { isMatMul = false; }
        var arank = adims.length;
        var brank = bdims.length;
        if (arank === 0) {
            return bdims;
        }
        if (brank === 0) {
            return adims;
        }
        var crank = Math.max(adims.length, bdims.length);
        var cdims = new Array(crank);
        // calculate the last 2 dimension if it is MatMul
        if (isMatMul) {
            if (arank < 2 || brank < 2) {
                return undefined;
            }
            var cShapeMatMul = MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);
            if (cShapeMatMul === undefined) {
                return undefined;
            }
            _a = __read(cShapeMatMul, 2), cdims[crank - 2] = _a[0], cdims[crank - 1] = _a[1];
        }
        for (var i = isMatMul ? 3 : 1; i <= crank; i++) {
            var aLen = arank - i < 0 ? 1 : adims[arank - i];
            var bLen = brank - i < 0 ? 1 : bdims[brank - i];
            if (aLen !== bLen && aLen > 1 && bLen > 1) {
                return undefined;
            }
            cdims[crank - i] = Math.max(aLen, bLen);
        }
        return cdims;
    };
    /**
     * Given the indices of a broadcasted tensor, calculate the original indices
     * @param broadcastedIndices The given indices of the broadcasted tensor.
     * @param originalShape The original shape of the tensor before broadcas
     * @returns The calculated indices that maps to the original tensor.
     */
    BroadcastUtil.index = function (broadcastedIndices, originalShape) {
        // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same
        // length as the broadcasted shape, and for each dimension the index should
        // not be out of range.
        var originalIndices = new Array(originalShape.length);
        BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);
        return originalIndices;
    };
    /**
     * Given the indices of a broadcasted tensor, calculate the original indices
     * @param broadcastedIndices The given indices of the broadcasted tensor.
     * @param originalShape The original shape of the tensor before broadcast
     * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be
     *     mutated).
     */
    BroadcastUtil.fillIndex = function (broadcastedIndices, originalShape, originalIndices) {
        // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the
        // broadcasted shape, and for each dimension the index should not be out of range.
        // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape
        var dimOffset = broadcastedIndices.length - originalShape.length;
        for (var i = 0; i < originalShape.length; i++) {
            originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];
        }
    };
    /**
     * Perform the broadcasting operation on the specific operator
     * @param a The input tensor A
     * @param b The input tensor B
     * @param op The operator lambda function
     * @param inplace Whether to write the result back to A.
     * @returns The result tensor, or undefined if input not broadcastable.
     */
    BroadcastUtil.calc = function (a, b, op, inplace, resultType) {
        var outputShape = BroadcastUtil.calcShape(a.dims, b.dims);
        if (outputShape) {
            if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {
                // B is not broadcastable to A, failed to calculate inplace.
                return undefined;
            }
            var size = ShapeUtil.size(outputShape);
            var c = inplace ? a : new tensor_1.Tensor(outputShape, resultType || a.type);
            // both inputs are scalars
            if (outputShape.length === 0) {
                c.set([], op(a.get([]), b.get([])));
            }
            // atleast one input is a non-scalar
            else {
                var outputIndices = new Array(outputShape.length);
                var originalIndicesA = new Array(a.dims.length);
                var originalIndicesB = new Array(b.dims.length);
                var valA = 0;
                var valB = 0;
                var isAScalar = false;
                var isBScalar = false;
                if (a.dims.length === 0) {
                    valA = a.get([]);
                    isAScalar = true;
                }
                if (b.dims.length === 0) {
                    valB = b.get([]);
                    isBScalar = true;
                }
                var rest = void 0;
                for (var i = 0; i < size; i++) {
                    // traversal indices
                    rest = i;
                    for (var j = outputShape.length - 1; j >= 0; j--) {
                        outputIndices[j] = rest % outputShape[j];
                        rest = Math.floor(rest / outputShape[j]);
                    }
                    if (!isAScalar) {
                        // map outputIndices (which is actually broadcasted) to the originalIndices
                        BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);
                        valA = a.get(originalIndicesA);
                    }
                    if (!isBScalar) {
                        BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);
                        valB = b.get(originalIndicesB);
                    }
                    c.set(outputIndices, op(valA, valB));
                }
            }
            return c;
        }
        return undefined;
    };
    /**
     * Determine if a shape is unidirectional broadcastable to another shape
     * @param shape The input shape
     * @param finalShape The desired shape after broadcasting
     */
    BroadcastUtil.isValidBroadcast = function (shape, finalShape) {
        // align shape to the right
        var inputRank = shape.length;
        var finalRank = finalShape.length;
        if (inputRank > finalRank) {
            return false;
        }
        for (var i = 1; i <= inputRank; i++) {
            if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {
                return false;
            }
        }
        return true;
    };
    /**
     * Determine the broadcasted dims in input shape based on the given output shape.
     * Note that this function only returns the broadcasted dims.
     * @param inputShape The input shape
     * @param outputShape The output shape
     * @returns The broadcasted dims in input shape.
     */
    BroadcastUtil.getBroadcastDims = function (inputShape, outputShape) {
        var inRank = inputShape.length;
        var dims = [];
        for (var i = 0; i < inRank; i++) {
            var dim = inRank - 1 - i;
            var a = inputShape[dim] || 1;
            var b = outputShape[outputShape.length - 1 - i] || 1;
            if (b > 1 && a === 1) {
                dims.unshift(dim);
            }
        }
        return dims;
    };
    return BroadcastUtil;
}());
exports.BroadcastUtil = BroadcastUtil;
// copy array helper
// mimics memcpy as much as possible
function arrayCopyHelper(target, source, targetIndex, sourceIndex, blockSize) {
    if (sourceIndex < 0 || sourceIndex >= source.length) {
        throw new Error('sourceIndex out of bounds');
    }
    if (targetIndex < 0 || targetIndex >= target.length) {
        throw new Error('targetIndex out of bounds');
    }
    if (sourceIndex + blockSize > source.length) {
        throw new Error('source indices to be copied are outside bounds');
    }
    if (targetIndex + blockSize > target.length) {
        throw new Error('target array is too small to hold result');
    }
    for (var offset = 0; offset < blockSize; offset++) {
        target[targetIndex + offset] = source[sourceIndex + offset];
    }
}
exports.arrayCopyHelper = arrayCopyHelper;
var GemmUtil = /** @class */ (function () {
    function GemmUtil() {
    }
    // will make sure input shapes are compatible for this op
    // and return back the shape of the output in the form of a tuple
    // will throw exception if the input shapes are not compatible
    GemmUtil.getShapeOfGemmResult = function (leftShape, transLeft, rightShape, transRight, biasShape) {
        if (leftShape.length !== 2 || rightShape.length !== 2) {
            throw new Error('shape need to be of size 2');
        }
        var M;
        var K;
        var N;
        if (transLeft) {
            M = leftShape[1];
            K = leftShape[0];
        }
        else {
            M = leftShape[0];
            K = leftShape[1];
        }
        var kDim = -1;
        if (transRight) {
            N = rightShape[0];
            kDim = 1;
        }
        else {
            N = rightShape[1];
            kDim = 0;
        }
        if (rightShape[kDim] !== K) {
            throw new Error('dimension mismatch');
        }
        if (M <= 0 || N <= 0 || K <= 0) {
            throw new Error('invalid shape specified');
        }
        if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {
            throw new Error('gemm: invalid bias shape for broadcast');
        }
        return [M, N, K];
    };
    return GemmUtil;
}());
exports.GemmUtil = GemmUtil;
var ProtoUtil = /** @class */ (function () {
    function ProtoUtil() {
    }
    ProtoUtil.tensorDataTypeFromProto = function (typeProto) {
        switch (typeProto) {
            case onnx_proto_1.onnx.TensorProto.DataType.INT8:
                return 'int8';
            case onnx_proto_1.onnx.TensorProto.DataType.UINT8:
                return 'uint8';
            case onnx_proto_1.onnx.TensorProto.DataType.BOOL:
                return 'bool';
            case onnx_proto_1.onnx.TensorProto.DataType.INT16:
                return 'int16';
            case onnx_proto_1.onnx.TensorProto.DataType.UINT16:
                return 'uint16';
            case onnx_proto_1.onnx.TensorProto.DataType.INT32:
                return 'int32';
            case onnx_proto_1.onnx.TensorProto.DataType.UINT32:
                return 'uint32';
            case onnx_proto_1.onnx.TensorProto.DataType.FLOAT:
                return 'float32';
            case onnx_proto_1.onnx.TensorProto.DataType.DOUBLE:
                return 'float64';
            case onnx_proto_1.onnx.TensorProto.DataType.STRING:
                return 'string';
            // For INT64/UINT64, reduce their value to 32-bits.
            // Should throw exception when overflow
            case onnx_proto_1.onnx.TensorProto.DataType.INT64:
                return 'int32';
            case onnx_proto_1.onnx.TensorProto.DataType.UINT64:
                return 'uint32';
            default:
                throw new Error("unsupported data type: " + onnx_proto_1.onnx.TensorProto.DataType[typeProto]);
        }
    };
    ProtoUtil.tensorDataTypeStringToEnum = function (type) {
        switch (type) {
            case 'int8':
                return onnx_proto_1.onnx.TensorProto.DataType.INT8;
            case 'uint8':
                return onnx_proto_1.onnx.TensorProto.DataType.UINT8;
            case 'bool':
                return onnx_proto_1.onnx.TensorProto.DataType.BOOL;
            case 'int16':
                return onnx_proto_1.onnx.TensorProto.DataType.INT16;
            case 'uint16':
                return onnx_proto_1.onnx.TensorProto.DataType.UINT16;
            case 'int32':
                return onnx_proto_1.onnx.TensorProto.DataType.INT32;
            case 'uint32':
                return onnx_proto_1.onnx.TensorProto.DataType.UINT32;
            case 'float32':
                return onnx_proto_1.onnx.TensorProto.DataType.FLOAT;
            case 'float64':
                return onnx_proto_1.onnx.TensorProto.DataType.DOUBLE;
            case 'string':
                return onnx_proto_1.onnx.TensorProto.DataType.STRING;
            case 'int64':
                return onnx_proto_1.onnx.TensorProto.DataType.INT64;
            case 'uint64':
                return onnx_proto_1.onnx.TensorProto.DataType.UINT64;
            default:
                throw new Error("unsupported data type: " + type);
        }
    };
    ProtoUtil.tensorDimsFromProto = function (dims) {
        // get rid of Long type for dims
        return dims.map(function (d) { return long_1.default.isLong(d) ? d.toNumber() : d; });
    };
    ProtoUtil.tensorValueTypeFromProto = function (valueType) {
        return {
            tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType),
            shape: { dims: ProtoUtil.tensorDimsFromProto(valueType.shape.dim.map(function (d) { return d.dimValue; })) }
        };
    };
    ProtoUtil.tensorDimsFromORTFormat = function (tensor) {
        var dims = [];
        for (var i = 0; i < tensor.dimsLength(); i++) {
            dims.push(LongUtil.longToNumber(tensor.dims(i)));
        }
        return dims;
    };
    ProtoUtil.tensorAttributesFromORTFormat = function (node) {
        var attributes = [];
        for (var i = 0; i < node.attributesLength(); i++) {
            attributes.push(node.attributes(i));
        }
        return attributes;
    };
    return ProtoUtil;
}());
exports.ProtoUtil = ProtoUtil;
var LongUtil = /** @class */ (function () {
    function LongUtil() {
    }
    LongUtil.longToNumber = function (n) {
        if (long_1.default.isLong(n)) {
            return n.toNumber();
        }
        else if (n instanceof flatbuffers_1.flatbuffers.Long) {
            return long_1.default.fromValue({ low: n.low, high: n.high, unsigned: true }).toNumber();
        }
        return n;
    };
    LongUtil.isLong = function (n) {
        return long_1.default.isLong(n) || n instanceof flatbuffers_1.flatbuffers.Long;
    };
    return LongUtil;
}());
exports.LongUtil = LongUtil;
var ShapeUtil = /** @class */ (function () {
    function ShapeUtil() {
    }
    ShapeUtil.size = function (dims) {
        return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);
    };
    // `axis` inclusive
    ShapeUtil.sizeFromDimension = function (dims, axis) {
        if (axis < 0 || axis > dims.length) {
            throw new Error("invalid dimension of " + axis + " for sizeFromDimension as Tensor has " + dims.length + " dimensions.");
        }
        return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);
    };
    // `axis` exclusive
    ShapeUtil.sizeToDimension = function (dims, axis) {
        if (axis < 0 || axis > dims.length) {
            throw new Error("invalid dimension of " + axis + " for sizeToDimension as Tensor has " + dims.length + " dimensions.");
        }
        return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);
    };
    ShapeUtil.getSizeFromDimensionRange = function (dims, start, end) {
        var size = 1;
        for (var i = start; i < end; i++) {
            // safety check as this method is called by multiple other methods requiring size.
            // size cannot be 0 or negative.
            if (dims[i] <= 0) {
                throw new Error(
                // eslint-disable-next-line max-len
                'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');
            }
            size *= dims[i];
        }
        return size;
    };
    ShapeUtil.computeStrides = function (dims) {
        var rank = dims.length;
        if (rank === 0) {
            return [];
        }
        else if (rank === 1) {
            return [1];
        }
        var strides = new Array(rank);
        strides[rank - 1] = 1;
        strides[rank - 2] = dims[rank - 1];
        for (var i = rank - 3; i >= 0; --i) {
            strides[i] = strides[i + 1] * dims[i + 1];
        }
        return strides;
    };
    ShapeUtil.transpose = function (dims) {
        var copy = dims.slice();
        return copy.reverse();
    };
    ShapeUtil.indicesToOffset = function (indices, strides, axis) {
        if (axis === undefined) {
            axis = indices.length;
        }
        var offset = 0;
        for (var i = 0; i < axis; ++i) {
            offset += strides[i] * indices[i];
        }
        return offset;
    };
    ShapeUtil.offsetToIndices = function (offset, strides) {
        var rank = strides.length;
        if (rank === 0) {
            return [];
        }
        else if (rank === 1) {
            return [offset * strides[0]];
        }
        var indices = new Array(strides.length);
        for (var i = 0; i < indices.length - 1; ++i) {
            indices[i] = Math.floor(offset / strides[i]);
            offset -= indices[i] * strides[i];
        }
        indices[indices.length - 1] = offset;
        return indices;
    };
    /**
     * normailze axis of range [-r, r) into [0, r).
     */
    ShapeUtil.normalizeAxis = function (axis, tensorRank) {
        if (axis < -tensorRank && axis >= tensorRank) {
            throw new Error('unsupported axis for this operation.');
        }
        return axis < 0 ? axis + tensorRank : axis;
    };
    ShapeUtil.normalizeAxes = function (axes, tensorRank) {
        var _this = this;
        return axes.map(function (x) { return _this.normalizeAxis(x, tensorRank); });
    };
    // Increment an index into a tensor (in lexicographic
    // ordering), wrapping around the specified upper_bound.
    /**
     * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.
     * @param index Given index to increment (Will be mutated)
     * @param dims The dimensions of the tensor for which the given index corresponds to
     * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank
     */
    ShapeUtil.incrementIndex = function (index, dims, axisToIncrementOn) {
        if (dims.length === 0 || index.length === 0) {
            throw new Error('Index incrementing unsupported for scalar Tensor');
        }
        if (axisToIncrementOn === undefined) {
            axisToIncrementOn = dims.length;
        }
        else {
            if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {
                throw new Error('Incorrect axis to increment on');
            }
        }
        for (var k = axisToIncrementOn - 1; k >= 0; --k) {
            index[k]++;
            if (index[k] < dims[k]) {
                break;
            }
            index[k] = 0;
        }
    };
    /**
     * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array
     * Used in Reshape
     * @param originalDims Original Shape array
     * @param shapeHints array containing values to compute the new dimensions
     * For example:
     * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]
     * originalDims = [2,2] and shapeHints = [4] will return [4]
     * originalDims = [2,2] and shapeHints = [5] will throw an exception
     * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape
     */
    ShapeUtil.calculateReshapedDims = function (originalDims, shapeHints) {
        // reshape to a Scalar Tensor
        if (shapeHints.length === 0) {
            if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {
                return [];
            }
            else {
                throw new Error('cannot reshape to a scalar Tensor');
            }
        }
        var nDims = shapeHints.length;
        var reshapedDims = new Array(nDims);
        var unknownDimension = -1;
        var newTensorSize = 1;
        for (var i = 0; i < nDims; i++) {
            if (shapeHints[i] < -1) {
                throw new Error('a dimension in shape hints cannot be less than -1');
            }
            if (shapeHints[i] === -1) {
                if (unknownDimension !== -1) {
                    throw new Error('at most one dimension in shape hints can be -1');
                }
                unknownDimension = i;
            }
            else {
                if (shapeHints[i] === 0) {
                    if (i >= originalDims.length) {
                        throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');
                    }
                    reshapedDims[i] = originalDims[i];
                }
                else {
                    reshapedDims[i] = shapeHints[i];
                }
                newTensorSize *= reshapedDims[i];
            }
        }
        var oldTensorSize = ShapeUtil.size(originalDims);
        if (unknownDimension !== -1) {
            if (oldTensorSize % newTensorSize !== 0) {
                throw new Error("the input tensor cannot be reshaped to the requested shape. Input shape: [" + originalDims + "] Output shape: [" + shapeHints + "]");
            }
            reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;
        }
        // validate sizes from originalDims and reshapedDims match
        else {
            if (newTensorSize !== oldTensorSize) {
                throw new Error('reshapedDims and originalDims don\'t have matching sizes');
            }
        }
        return reshapedDims;
    };
    /**
     * Sorts a given array based on the indices in the Perm array
     * Used in Transpose
     * @param a Array to be sorted such as dims or strides
     * @param perm Perm given; if null a will be reversed
     */
    ShapeUtil.sortBasedOnPerm = function (a, perm) {
        if (perm) {
            return perm.map(function (v) { return a[v]; });
        }
        else {
            return a.slice().reverse();
        }
    };
    /**
     * Pads a given shape according to the padding values
     * @param dims shape of the Tensor to be padded
     * @param pad pad values
     */
    ShapeUtil.padShape = function (dims, pad) {
        var rank = dims.length;
        return dims.map(function (v, i) { return v + pad[i] + pad[i + rank]; });
    };
    /**
     * Determines if the two shapes are identical
     * @param shape1
     * @param shape2
     */
    ShapeUtil.areEqual = function (shape1, shape2) {
        if (shape1.length !== shape2.length) {
            return false;
        }
        return shape1.every(function (v, i) { return v === shape2[i]; });
    };
    /**
     * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size
     * @param dims - input `dims` that needs to be checked
     */
    ShapeUtil.validateDimsAndCalcSize = function (dims) {
        var e_1, _a;
        if (dims.length > 6) {
            throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');
        }
        var size = 1;
        try {
            for (var dims_1 = __values(dims), dims_1_1 = dims_1.next(); !dims_1_1.done; dims_1_1 = dims_1.next()) {
                var n = dims_1_1.value;
                if (!Number.isInteger(n)) {
                    throw new TypeError("Invalid shape: " + n + " is not an integer");
                }
                if (n < 0 || n > 2147483647) {
                    throw new TypeError("Invalid shape: length " + n + " is not allowed");
                }
                size *= n;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (dims_1_1 && !dims_1_1.done && (_a = dims_1.return)) _a.call(dims_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return size;
    };
    /**
     * Determines the shape of output tensor y = flatten(x, axis)
     * @param dims - shape of input tensor
     * @param axis - flatten axis, in the range [-r, r]
     */
    ShapeUtil.flattenShape = function (dims, axis) {
        if (axis < 0) {
            axis += dims.length;
        }
        var total = dims.reduce(function (x, y) { return x * y; }, 1);
        var right = dims.slice(axis).reduce(function (x, y) { return x * y; }, 1);
        var outputDims = [total / right, right];
        return outputDims;
    };
    /**
     * Determines the shape of output tensor y = squeeze(x, axes)
     * @param dims - shape of input tensor
     * @param axes - squeeze axes
     */
    ShapeUtil.squeezeShape = function (dims, axes) {
        var outputDims = new Array();
        // sanity check
        axes = ShapeUtil.normalizeAxes(axes, dims.length);
        for (var i = 0; i < dims.length; i++) {
            var inSqueezeList = axes.indexOf(i) >= 0;
            if (inSqueezeList && dims[i] !== 1) {
                throw new Error('squeeze an axis of size different than 1');
            }
            if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {
                outputDims.push(dims[i]);
            }
        }
        return outputDims;
    };
    /**
     * Determines the shape of output tensor y = unsqueeze(x, axes)
     * @param dims - shape of input tensor
     * @param axes - unsqueeze axes
     */
    ShapeUtil.unsqueezeShape = function (dims, axes) {
        var outputDims = new Array(dims.length + axes.length);
        // initialize the array elements to 0
        outputDims.fill(0);
        // set all axes indices to 1 in outputDims and check for duplicates
        for (var i = 0; i < axes.length; i++) {
            var axis = ShapeUtil.normalizeAxis(axes[i], dims.length);
            if (axis >= outputDims.length) {
                throw new Error('\'axes\' has an out of range axis');
            }
            if (outputDims[axis] !== 0) {
                throw new Error('\'axes\' has a duplicate axis');
            }
            outputDims[axis] = 1;
        }
        // fill in the zero entries of outputDims with the input tensor's shape
        var inputDimsIterator = 0;
        for (var i = 0; i < outputDims.length; i++) {
            if (outputDims[i] === 0) {
                outputDims[i] = dims[inputDimsIterator++];
            }
        }
        // sanity check assertion. 'inputDimsIterator'
        // should be equal to the length of 'dims'
        if (inputDimsIterator !== dims.length) {
            throw new Error('the unsqueezed dimension could not be established');
        }
        return outputDims;
    };
    return ShapeUtil;
}());
exports.ShapeUtil = ShapeUtil;
// bunch of helper methods that do a variety of math operations
var MathUtil = /** @class */ (function () {
    function MathUtil() {
    }
    // y = (x*x) + y
    MathUtil.sqr = function (target, source, targetIndex, sourceIndex, blockSize) {
        if (sourceIndex < 0 || sourceIndex >= source.length) {
            throw new Error('sourceIndex out of bounds');
        }
        if (targetIndex < 0 || targetIndex >= target.length) {
            throw new Error('targetIndex out of bounds');
        }
        if (sourceIndex + blockSize > source.length) {
            throw new Error('source indices to be copied are outside bounds');
        }
        if (targetIndex + blockSize > target.length) {
            throw new Error('target array is too small to hold result');
        }
        for (var offset = 0; offset < blockSize; offset++) {
            target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);
        }
    };
    // y = ax + y
    MathUtil.axpy = function (target, source, targetIndex, sourceIndex, blockSize, alpha) {
        if (sourceIndex < 0 || sourceIndex >= source.length) {
            throw new Error('sourceIndex out of bounds');
        }
        if (targetIndex < 0 || targetIndex >= target.length) {
            throw new Error('targetIndex out of bounds');
        }
        if (sourceIndex + blockSize > source.length) {
            throw new Error('source indices to be copied are outside bounds');
        }
        if (targetIndex + blockSize > target.length) {
            throw new Error('target array is too small to hold result');
        }
        for (var offset = 0; offset < blockSize; offset++) {
            target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);
        }
    };
    // y = pow(x, b)
    MathUtil.powx = function (target, source, targetIndex, sourceIndex, blockSize, b) {
        if (sourceIndex < 0 || sourceIndex >= source.length) {
            throw new Error('sourceIndex out of bounds');
        }
        if (targetIndex < 0 || targetIndex >= target.length) {
            throw new Error('targetIndex out of bounds');
        }
        if (sourceIndex + blockSize > source.length) {
            throw new Error('source indices to be copied are outside bounds');
        }
        if (targetIndex + blockSize > target.length) {
            throw new Error('target array is too small to hold result');
        }
        for (var offset = 0; offset < blockSize; offset++) {
            target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);
        }
    };
    // y = x * y
    MathUtil.mul = function (target, source, targetIndex, sourceIndex, blockSize) {
        if (sourceIndex < 0 || sourceIndex >= source.length) {
            throw new Error('sourceIndex out of bounds');
        }
        if (targetIndex < 0 || targetIndex >= target.length) {
            throw new Error('targetIndex out of bounds');
        }
        if (sourceIndex + blockSize > source.length) {
            throw new Error('source indices to be copied are outside bounds');
        }
        if (targetIndex + blockSize > target.length) {
            throw new Error('target array is too small to hold result');
        }
        for (var offset = 0; offset < blockSize; offset++) {
            target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);
        }
    };
    return MathUtil;
}());
exports.MathUtil = MathUtil;
var SplitUtil = /** @class */ (function () {
    function SplitUtil() {
    }
    /**
     * Calculates new Shapes from existing one and the splits given along the axis provides
     * @param dims Shape of the Tensor to be splitted into two or more Shapes
     * @param axis The dimension along which the Tensor will be split
     * @param splits Offsets for the start of each split
     */
    SplitUtil.splitShape = function (dims, axis, split, numOutputs) {
        if (split.length === 0) {
            if (!numOutputs) {
                throw new Error('need to know number of outputs when the \'split\' attribute is not specified');
            }
            SplitUtil.determineSplit(dims[axis], numOutputs, split);
        }
        var shapes = [];
        var offsets = [0];
        for (var i = 0; i < split.length; ++i) {
            if (i !== 0) {
                offsets.push(offsets[i - 1] + split[i - 1]);
            }
            var shape = dims.slice();
            shape[axis] = split[i];
            shapes.push(shape);
        }
        return [shapes, offsets];
    };
    SplitUtil.determineSplit = function (numElementsAlongAxis, numOutputs, split) {
        // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs
        if (numElementsAlongAxis % numOutputs !== 0) {
            throw new Error('cannot split tensor to equal sized parts');
        }
        for (var i = 0; i < numOutputs; ++i) {
            split.push(numElementsAlongAxis / numOutputs);
        }
    };
    return SplitUtil;
}());
exports.SplitUtil = SplitUtil;
var ReduceUtil = /** @class */ (function () {
    function ReduceUtil() {
    }
    /**
     * Perform reduce operations on the specific operator
     * @param a Input tensor data
     * @param axes The dimensions along which the Tensor will be reduced
     * @param keepdims If set to true, the axes which are reduced are left in the
     *    result as dimensions with size one.
     * @param op1 The operation to be performed on each element in the tensor
     * @param op2 The operation to be performed between elements in the tensor
     */
    ReduceUtil.calcReduce = function (a, axes, keepdims, op1, op2) {
        var dims = a.dims.slice(0);
        // if axes is not set, perform reduce on all axes
        if (axes.length === 0) {
            dims.forEach(function (d, ind) { return axes.push(ind); });
        }
        // get a temporary broadcastable output shape
        var outputDims = ReduceUtil.calcReduceShape(dims, axes, true);
        // loop through the output and calculate result one by one
        var size = ShapeUtil.size(outputDims);
        var y = new tensor_1.Tensor(outputDims, a.type);
        var strides = ShapeUtil.computeStrides(outputDims);
        var inputStrides = ShapeUtil.computeStrides(dims);
        var indicesY = new Array(dims.length);
        for (var i = 0; i < size; i++) {
            var indices = ShapeUtil.offsetToIndices(i, strides);
            // map index
            BroadcastUtil.fillIndex(indices, dims, indicesY);
            y.set(indices, ReduceUtil.calcReduceByAxis(a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));
        }
        if (keepdims) {
            return y;
        }
        else {
            // keepdims == 0, calculate the expected shape
            return new tensor_1.Tensor(ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);
        }
    };
    /**
     * Perform reduce operations on the specific operator on specific axes
     * @param a Input tensor data
     * @param axes The dimensions along which the Tensor will be reduced
     * @param dims The input dimension.
     * @param curAxisInd Index in axes specifying the current dimension along
     *      which the tensor will be reduced
     * @param pos The current index of element to perform operation
     * @param op1 The operation to be performed on each element in the tensor
     * @param op2 The operation to be performed between elements in the tensor
     */
    ReduceUtil.calcReduceByAxis = function (input, axes, dims, curAxisInd, pos, op1, op2) {
        var res = 0;
        if (curAxisInd >= axes.length) {
            return op1(input[pos]);
        }
        var axis = axes[curAxisInd];
        var step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));
        for (var i = 0; i < dims[axis]; i++) {
            res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :
                op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));
            pos += step;
        }
        return res;
    };
    /**
     * Calculate the expected shape of a reduce operation
     * @param dims The input tensor dimension
     * @param axes The dimensions along which the Tensor will be reduced
     * @param keepdims If set to true, the axes which are reduced are left in the
     *    result as dimensions with size one.
     */
    ReduceUtil.calcReduceShape = function (dims, axes, keepDims) {
        var outputDims = dims.slice();
        for (var i = 0; i < axes.length; i++) {
            if (keepDims) {
                outputDims[axes[i]] = 1;
            }
            else {
                outputDims[axes[i]] = 0;
            }
        }
        return outputDims.filter(function (dim) { return dim !== 0; });
    };
    return ReduceUtil;
}());
exports.ReduceUtil = ReduceUtil;
var PoolConvUtil = /** @class */ (function () {
    function PoolConvUtil() {
    }
    /**
     * Adjust the kernel, strides, pads to correct rank. Set to default value if not present
     * @param isGlobalOperator If true, perform global pooling.
     * @param inputDims The input tensor dimension.
     * @param kernelShape The size of the kernel along each axis.
     * @param strides Stride along each axis.
     * @param pads Padding for the beginning and ending along each axis.
     */
    PoolConvUtil.adjustPoolAttributes = function (isGlobalOperator, inputDims, kernelShape, strides, pads) {
        if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {
            throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');
        }
        if (isGlobalOperator) {
            // adjust kernel shape to cover the input dims
            for (var dim = 0; dim < inputDims.length - 2; dim++) {
                if (dim >= kernelShape.length) {
                    kernelShape.push(inputDims[dim + 2]);
                }
                else {
                    kernelShape[dim] = inputDims[dim + 2];
                }
            }
        }
        // adjust strides length to match kernel shape length
        for (var dim = 0; dim < kernelShape.length; dim++) {
            if (dim < strides.length) {
                if (strides[dim] < 0) {
                    throw new Error('strides should be greater than or equal to 1');
                }
            }
            else {
                strides.push(1);
            }
        }
        // adjust pads length to match 2 * kernel shape length
        for (var dim = 0; dim < kernelShape.length * 2; dim++) {
            if (dim < pads.length) {
                if (pads[dim] < 0) {
                    throw new Error('pad should be greater than or equal to 1');
                }
            }
            else {
                pads.push(0);
            }
        }
        // sanity checks for values in kernel shapes and pads
        for (var dim = 0; dim < kernelShape.length; dim++) {
            if (kernelShape[dim] <= 0) {
                throw new Error('kernel shapes need to be greater than 0');
            }
            if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {
                throw new Error('pads should be smaller than kernel');
            }
        }
    };
    // adjust pad values based on 'autoPad' attribute
    PoolConvUtil.adjustPadsBasedOnAutoPad = function (inputDims, strides, dilations, kernelShape, pads, autoPad) {
        if (!autoPad) {
            return;
        }
        if (pads.length !== 2 * (inputDims.length - 2)) {
            throw new Error('length of pads should be twice the length of data dimensions');
        }
        if (strides.length !== (inputDims.length - 2)) {
            throw new Error('length of strides should be the length of data dimensions');
        }
        if (kernelShape.length !== (inputDims.length - 2)) {
            throw new Error('length of kernel shapes should be the length of data dimensions');
        }
        for (var dim = 0; dim < inputDims.length - 2; dim++) {
            PoolConvUtil.adjustPadAndReturnShape(inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2, autoPad);
        }
    };
    /**
     * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)
     * @param isGlobalOperator If true, perform global pooling.
     * @param inputDims The input tensor dimension. (inputs[0].dims)
     * @param strides Stride along each axis.
     * @param kernelShape The size of the kernel along each axis.
     * @param pads Padding for the beginning and ending along each axis.
     * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each
     *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.
     */
    PoolConvUtil.computePoolOutputShape = function (isGlobalOperator, inputDims, strides, kernelShape, pads, autoPad) {
        if (inputDims.length <= 0) {
            throw new Error('input shape must be of size greater than 0');
        }
        // Add batch size and number of channels of output
        var outputDims = [inputDims[0], inputDims[1]];
        // TODO: support dilations for pool operators
        var dilations = new Array(kernelShape.length).fill(1);
        PoolConvUtil.computeShapeHelper(isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);
        return outputDims;
    };
    /**
     * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)
     * @param inputDims The input tensor dimension. (inputs[0].dims)
     * @param filterDims The filter tensor dimension. (inputs[1].dims)
     * @param strides Stride along each axis.
     * @param kernelShape The size of the kernel along each axis.
     * @param pads Padding for the beginning and ending along each axis.
     * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each
     *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.
     */
    PoolConvUtil.computeConvOutputShape = function (inputDims, filterDims, strides, dilations, kernelShape, pads, autoPad) {
        if (inputDims.length <= 0 || filterDims.length <= 0) {
            throw new Error('invalid input tensor dims or invalid filter tensor dims');
        }
        // Add batch size and number of channels of output
        var outputDims = [inputDims[0], filterDims[0]];
        PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);
        return outputDims;
    };
    // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels
    // called by computePoolOutputShape() and computeConvOutputShape()
    // adjust pads based on 'autoPad' attribute prior to shape computation
    PoolConvUtil.computeShapeHelper = function (isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad) {
        if (isGlobalOperator) {
            for (var dim = 0; dim < inputDims.length - 2; dim++) {
                outputDims.push(1);
            }
        }
        else {
            for (var dim = 0; dim < inputDims.length - 2; dim++) {
                outputDims.push(PoolConvUtil.adjustPadAndReturnShape(inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2, autoPad));
            }
        }
    };
    // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()
    // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension
    PoolConvUtil.adjustPadAndReturnShape = function (inSize, stride, dilation, kernel, pads, padHeadIndex, padTailIndex, autoPad) {
        var dkernel = dilation * (kernel - 1) + 1;
        if (autoPad && autoPad !== 'NOTSET') {
            switch (autoPad) {
                case 'VALID':
                    pads[padHeadIndex] = 0;
                    pads[padTailIndex] = 0;
                    return Math.floor(((inSize - dkernel) / stride) + 1);
                case 'SAME_LOWER':
                case 'SAME_UPPER':
                    if (dilation !== 1) {
                        throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');
                    }
                    else {
                        var legacyTargetSize = (inSize + stride - 1) / stride;
                        var padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;
                        pads[padHeadIndex] =
                            (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);
                        pads[padTailIndex] = padNeeded - pads[padHeadIndex];
                        return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);
                    }
                default:
                    throw new Error('Unsupported AutoPad type');
            }
        }
        else {
            return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);
        }
    };
    return PoolConvUtil;
}());
exports.PoolConvUtil = PoolConvUtil;


/***/ }),

/***/ "./lib/wasm/options-utils.ts":
/*!***********************************!*\
  !*** ./lib/wasm/options-utils.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.iterateExtraOptions = void 0;
var iterateExtraOptions = function (options, prefix, seen, handler) {
    if (typeof options == 'object' && options !== null) {
        if (seen.has(options)) {
            throw new Error('Circular reference in options');
        }
        else {
            seen.add(options);
        }
    }
    Object.entries(options).forEach(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        var name = (prefix) ? prefix + key : key;
        if (typeof value === 'object') {
            exports.iterateExtraOptions(value, name + '.', seen, handler);
        }
        else if (typeof value === 'string' || typeof value === 'number') {
            handler(name, value.toString());
        }
        else if (typeof value === 'boolean') {
            handler(name, (value) ? '1' : '0');
        }
        else {
            throw new Error("Can't handle extra config type: " + typeof value);
        }
    });
};
exports.iterateExtraOptions = iterateExtraOptions;


/***/ }),

/***/ "./lib/wasm/proxy-wrapper.ts":
/*!***********************************!*\
  !*** ./lib/wasm/proxy-wrapper.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.endProfiling = exports.run = exports.releaseSession = exports.createSession = exports.initOrt = exports.initWasm = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var core = __importStar(__webpack_require__(/*! ./wasm-core-impl */ "./lib/wasm/wasm-core-impl.ts"));
var wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ "./lib/wasm/wasm-factory.ts");
var isProxy = function () { return !!onnxruntime_common_1.env.wasm.proxy && typeof document !== 'undefined'; };
var proxyWorker;
var initializing = false;
var initialized = false;
var aborted = false;
var initWasmCallbacks;
var initOrtCallbacks;
var createSessionCallbacks = [];
var releaseSessionCallbacks = [];
var runCallbacks = [];
var endProfilingCallbacks = [];
var ensureWorker = function () {
    if (initializing || !initialized || aborted || !proxyWorker) {
        throw new Error('worker not ready');
    }
};
var onProxyWorkerMessage = function (ev) {
    switch (ev.data.type) {
        case 'init-wasm':
            initializing = false;
            if (ev.data.err) {
                aborted = true;
                initWasmCallbacks[1](ev.data.err);
            }
            else {
                initialized = true;
                initWasmCallbacks[0]();
            }
            break;
        case 'init-ort':
            if (ev.data.err) {
                initOrtCallbacks[1](ev.data.err);
            }
            else {
                initOrtCallbacks[0]();
            }
            break;
        case 'create':
            if (ev.data.err) {
                createSessionCallbacks.shift()[1](ev.data.err);
            }
            else {
                createSessionCallbacks.shift()[0](ev.data.out);
            }
            break;
        case 'release':
            if (ev.data.err) {
                releaseSessionCallbacks.shift()[1](ev.data.err);
            }
            else {
                releaseSessionCallbacks.shift()[0]();
            }
            break;
        case 'run':
            if (ev.data.err) {
                runCallbacks.shift()[1](ev.data.err);
            }
            else {
                runCallbacks.shift()[0](ev.data.out);
            }
            break;
        case 'end-profiling':
            if (ev.data.err) {
                endProfilingCallbacks.shift()[1](ev.data.err);
            }
            else {
                endProfilingCallbacks.shift()[0]();
            }
            break;
        default:
    }
};
var scriptSrc = typeof document !== 'undefined' ? (_a = document === null || document === void 0 ? void 0 : document.currentScript) === null || _a === void 0 ? void 0 : _a.src : undefined;
var initWasm = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            if (initialized) {
                return [2 /*return*/];
            }
            if (initializing) {
                throw new Error('multiple calls to \'initWasm()\' detected.');
            }
            if (aborted) {
                throw new Error('previous call to \'initWasm()\' failed.');
            }
            initializing = true;
            // overwrite wasm filepaths
            if (onnxruntime_common_1.env.wasm.wasmPaths === undefined) {
                if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {
                    onnxruntime_common_1.env.wasm.wasmPaths = scriptSrc.substr(0, scriptSrc.lastIndexOf('/') + 1);
                }
            }
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    proxyWorker === null || proxyWorker === void 0 ? void 0 : proxyWorker.terminate();
                    // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports
                    proxyWorker = __webpack_require__(/*! worker-loader?inline=no-fallback!./proxy-worker/main */ "./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./lib/wasm/proxy-worker/main.ts").default();
                    proxyWorker.onmessage = onProxyWorkerMessage;
                    initWasmCallbacks = [resolve, reject];
                    var message = { type: 'init-wasm', in: onnxruntime_common_1.env.wasm };
                    proxyWorker.postMessage(message);
                })];
        }
        else {
            return [2 /*return*/, wasm_factory_1.initializeWebAssembly(onnxruntime_common_1.env.wasm)];
        }
        return [2 /*return*/];
    });
}); };
exports.initWasm = initWasm;
var initOrt = function (numThreads, loggingLevel) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            ensureWorker();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    initOrtCallbacks = [resolve, reject];
                    var message = { type: 'init-ort', in: { numThreads: numThreads, loggingLevel: loggingLevel } };
                    proxyWorker.postMessage(message);
                })];
        }
        else {
            core.initOrt(numThreads, loggingLevel);
        }
        return [2 /*return*/];
    });
}); };
exports.initOrt = initOrt;
var createSession = function (model, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            ensureWorker();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    createSessionCallbacks.push([resolve, reject]);
                    var message = { type: 'create', in: { model: model, options: options } };
                    proxyWorker.postMessage(message, [model.buffer]);
                })];
        }
        else {
            return [2 /*return*/, core.createSession(model, options)];
        }
        return [2 /*return*/];
    });
}); };
exports.createSession = createSession;
var releaseSession = function (sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            ensureWorker();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    releaseSessionCallbacks.push([resolve, reject]);
                    var message = { type: 'release', in: sessionId };
                    proxyWorker.postMessage(message);
                })];
        }
        else {
            core.releaseSession(sessionId);
        }
        return [2 /*return*/];
    });
}); };
exports.releaseSession = releaseSession;
var run = function (sessionId, inputIndices, inputs, outputIndices, options) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            ensureWorker();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    runCallbacks.push([resolve, reject]);
                    var message = { type: 'run', in: { sessionId: sessionId, inputIndices: inputIndices, inputs: inputs, outputIndices: outputIndices, options: options } };
                    proxyWorker.postMessage(message, core.extractTransferableBuffers(inputs));
                })];
        }
        else {
            return [2 /*return*/, core.run(sessionId, inputIndices, inputs, outputIndices, options)];
        }
        return [2 /*return*/];
    });
}); };
exports.run = run;
var endProfiling = function (sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (isProxy()) {
            ensureWorker();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    endProfilingCallbacks.push([resolve, reject]);
                    var message = { type: 'end-profiling', in: sessionId };
                    proxyWorker.postMessage(message);
                })];
        }
        else {
            core.endProfiling(sessionId);
        }
        return [2 /*return*/];
    });
}); };
exports.endProfiling = endProfiling;


/***/ }),

/***/ "./lib/wasm/run-options.ts":
/*!*********************************!*\
  !*** ./lib/wasm/run-options.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setRunOptions = void 0;
var options_utils_1 = __webpack_require__(/*! ./options-utils */ "./lib/wasm/options-utils.ts");
var string_utils_1 = __webpack_require__(/*! ./string-utils */ "./lib/wasm/string-utils.ts");
var wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ "./lib/wasm/wasm-factory.ts");
var setRunOptions = function (options) {
    var wasm = wasm_factory_1.getInstance();
    var runOptionsHandle = 0;
    var allocs = [];
    var runOptions = options || {};
    try {
        if ((options === null || options === void 0 ? void 0 : options.logSeverityLevel) === undefined) {
            runOptions.logSeverityLevel = 2; // Default to warning
        }
        else if (typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||
            options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error("log serverity level is not valid: " + options.logSeverityLevel);
        }
        if ((options === null || options === void 0 ? void 0 : options.logVerbosityLevel) === undefined) {
            runOptions.logVerbosityLevel = 0; // Default to 0
        }
        else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error("log verbosity level is not valid: " + options.logVerbosityLevel);
        }
        if ((options === null || options === void 0 ? void 0 : options.terminate) === undefined) {
            runOptions.terminate = false;
        }
        var tagDataOffset = 0;
        if ((options === null || options === void 0 ? void 0 : options.tag) !== undefined) {
            tagDataOffset = string_utils_1.allocWasmString(options.tag, allocs);
        }
        runOptionsHandle = wasm._OrtCreateRunOptions(runOptions.logSeverityLevel, runOptions.logVerbosityLevel, !!runOptions.terminate, tagDataOffset);
        if (runOptionsHandle === 0) {
            throw new Error('Can\'t create run options');
        }
        if ((options === null || options === void 0 ? void 0 : options.extra) !== undefined) {
            options_utils_1.iterateExtraOptions(options.extra, '', new WeakSet(), function (key, value) {
                var keyDataOffset = string_utils_1.allocWasmString(key, allocs);
                var valueDataOffset = string_utils_1.allocWasmString(value, allocs);
                if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    throw new Error("Can't set a run config entry: " + key + " - " + value);
                }
            });
        }
        return [runOptionsHandle, allocs];
    }
    catch (e) {
        if (runOptionsHandle !== 0) {
            wasm._OrtReleaseRunOptions(runOptionsHandle);
        }
        allocs.forEach(wasm._free);
        throw e;
    }
};
exports.setRunOptions = setRunOptions;


/***/ }),

/***/ "./lib/wasm/session-handler.ts":
/*!*************************************!*\
  !*** ./lib/wasm/session-handler.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OnnxruntimeWebAssemblySessionHandler = void 0;
var onnxruntime_common_1 = __webpack_require__(/*! onnxruntime-common */ "../common/dist/lib/index.js");
var proxy_wrapper_1 = __webpack_require__(/*! ./proxy-wrapper */ "./lib/wasm/proxy-wrapper.ts");
var ortInit;
var getLogLevel = function (logLevel) {
    switch (logLevel) {
        case 'verbose':
            return 0;
        case 'info':
            return 1;
        case 'warning':
            return 2;
        case 'error':
            return 3;
        case 'fatal':
            return 4;
        default:
            throw new Error("unsupported logging level: " + logLevel);
    }
};
var OnnxruntimeWebAssemblySessionHandler = /** @class */ (function () {
    function OnnxruntimeWebAssemblySessionHandler() {
    }
    OnnxruntimeWebAssemblySessionHandler.prototype.loadModel = function (model, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!ortInit) return [3 /*break*/, 2];
                        return [4 /*yield*/, proxy_wrapper_1.initOrt(onnxruntime_common_1.env.wasm.numThreads, getLogLevel(onnxruntime_common_1.env.logLevel))];
                    case 1:
                        _b.sent();
                        ortInit = true;
                        _b.label = 2;
                    case 2: return [4 /*yield*/, proxy_wrapper_1.createSession(model, options)];
                    case 3:
                        _a = __read.apply(void 0, [_b.sent(), 3]), this.sessionId = _a[0], this.inputNames = _a[1], this.outputNames = _a[2];
                        return [2 /*return*/];
                }
            });
        });
    };
    OnnxruntimeWebAssemblySessionHandler.prototype.dispose = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, proxy_wrapper_1.releaseSession(this.sessionId)];
            });
        });
    };
    OnnxruntimeWebAssemblySessionHandler.prototype.run = function (feeds, fetches, options) {
        return __awaiter(this, void 0, void 0, function () {
            var inputArray, inputIndices, outputIndices, outputs, result, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputArray = [];
                        inputIndices = [];
                        Object.entries(feeds).forEach(function (kvp) {
                            var name = kvp[0];
                            var tensor = kvp[1];
                            var index = _this.inputNames.indexOf(name);
                            if (index === -1) {
                                throw new Error("invalid input '" + name + "'");
                            }
                            inputArray.push(tensor);
                            inputIndices.push(index);
                        });
                        outputIndices = [];
                        Object.entries(fetches).forEach(function (kvp) {
                            var name = kvp[0];
                            // TODO: support pre-allocated output
                            var index = _this.outputNames.indexOf(name);
                            if (index === -1) {
                                throw new Error("invalid output '" + name + "'");
                            }
                            outputIndices.push(index);
                        });
                        return [4 /*yield*/, proxy_wrapper_1.run(this.sessionId, inputIndices, inputArray.map(function (t) { return [t.type, t.dims, t.data]; }), outputIndices, options)];
                    case 1:
                        outputs = _a.sent();
                        result = {};
                        for (i = 0; i < outputs.length; i++) {
                            result[this.outputNames[outputIndices[i]]] = new onnxruntime_common_1.Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    OnnxruntimeWebAssemblySessionHandler.prototype.startProfiling = function () {
        // TODO: implement profiling
    };
    OnnxruntimeWebAssemblySessionHandler.prototype.endProfiling = function () {
        void proxy_wrapper_1.endProfiling(this.sessionId);
    };
    return OnnxruntimeWebAssemblySessionHandler;
}());
exports.OnnxruntimeWebAssemblySessionHandler = OnnxruntimeWebAssemblySessionHandler;


/***/ }),

/***/ "./lib/wasm/session-options.ts":
/*!*************************************!*\
  !*** ./lib/wasm/session-options.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.setSessionOptions = void 0;
var options_utils_1 = __webpack_require__(/*! ./options-utils */ "./lib/wasm/options-utils.ts");
var string_utils_1 = __webpack_require__(/*! ./string-utils */ "./lib/wasm/string-utils.ts");
var wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ "./lib/wasm/wasm-factory.ts");
var getGraphOptimzationLevel = function (graphOptimizationLevel) {
    switch (graphOptimizationLevel) {
        case 'disabled':
            return 0;
        case 'basic':
            return 1;
        case 'extended':
            return 2;
        case 'all':
            return 99;
        default:
            throw new Error("unsupported graph optimization level: " + graphOptimizationLevel);
    }
};
var getExecutionMode = function (executionMode) {
    switch (executionMode) {
        case 'sequential':
            return 0;
        case 'parallel':
            return 1;
        default:
            throw new Error("unsupported execution mode: " + executionMode);
    }
};
var appendDefaultOptions = function (options) {
    if (!options.extra) {
        options.extra = {};
    }
    if (!options.extra.session) {
        options.extra.session = {};
    }
    var session = options.extra.session;
    if (!session.use_ort_model_bytes_directly) {
        // eslint-disable-next-line camelcase
        session.use_ort_model_bytes_directly = '1';
    }
};
var setSessionOptions = function (options) {
    var wasm = wasm_factory_1.getInstance();
    var sessionOptionsHandle = 0;
    var allocs = [];
    var sessionOptions = options || {};
    appendDefaultOptions(sessionOptions);
    try {
        if ((options === null || options === void 0 ? void 0 : options.graphOptimizationLevel) === undefined) {
            sessionOptions.graphOptimizationLevel = 'all';
        }
        var graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel);
        if ((options === null || options === void 0 ? void 0 : options.enableCpuMemArena) === undefined) {
            sessionOptions.enableCpuMemArena = true;
        }
        if ((options === null || options === void 0 ? void 0 : options.enableMemPattern) === undefined) {
            sessionOptions.enableMemPattern = true;
        }
        if ((options === null || options === void 0 ? void 0 : options.executionMode) === undefined) {
            sessionOptions.executionMode = 'sequential';
        }
        var executionMode = getExecutionMode(sessionOptions.executionMode);
        var logIdDataOffset = 0;
        if ((options === null || options === void 0 ? void 0 : options.logId) !== undefined) {
            logIdDataOffset = string_utils_1.allocWasmString(options.logId, allocs);
        }
        if ((options === null || options === void 0 ? void 0 : options.logSeverityLevel) === undefined) {
            sessionOptions.logSeverityLevel = 2; // Default to warning
        }
        else if (typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||
            options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error("log serverity level is not valid: " + options.logSeverityLevel);
        }
        if ((options === null || options === void 0 ? void 0 : options.logVerbosityLevel) === undefined) {
            sessionOptions.logVerbosityLevel = 0; // Default to 0
        }
        else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error("log verbosity level is not valid: " + options.logVerbosityLevel);
        }
        if ((options === null || options === void 0 ? void 0 : options.enableProfiling) === undefined) {
            sessionOptions.enableProfiling = false;
        }
        sessionOptionsHandle = wasm._OrtCreateSessionOptions(graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode, !!sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel, sessionOptions.logVerbosityLevel);
        if (sessionOptionsHandle === 0) {
            throw new Error('Can\'t create session options');
        }
        if ((options === null || options === void 0 ? void 0 : options.extra) !== undefined) {
            options_utils_1.iterateExtraOptions(options.extra, '', new WeakSet(), function (key, value) {
                var keyDataOffset = string_utils_1.allocWasmString(key, allocs);
                var valueDataOffset = string_utils_1.allocWasmString(value, allocs);
                if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    throw new Error("Can't set a session config entry: " + key + " - " + value);
                }
            });
        }
        return [sessionOptionsHandle, allocs];
    }
    catch (e) {
        if (sessionOptionsHandle !== 0) {
            wasm._OrtReleaseSessionOptions(sessionOptionsHandle);
        }
        allocs.forEach(wasm._free);
        throw e;
    }
};
exports.setSessionOptions = setSessionOptions;


/***/ }),

/***/ "./lib/wasm/string-utils.ts":
/*!**********************************!*\
  !*** ./lib/wasm/string-utils.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.allocWasmString = void 0;
var wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ "./lib/wasm/wasm-factory.ts");
var allocWasmString = function (data, allocs) {
    var wasm = wasm_factory_1.getInstance();
    var dataLength = wasm.lengthBytesUTF8(data) + 1;
    var dataOffset = wasm._malloc(dataLength);
    wasm.stringToUTF8(data, dataOffset, dataLength);
    allocs.push(dataOffset);
    return dataOffset;
};
exports.allocWasmString = allocWasmString;


/***/ }),

/***/ "./lib/wasm/wasm-core-impl.ts":
/*!************************************!*\
  !*** ./lib/wasm/wasm-core-impl.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.extractTransferableBuffers = exports.endProfiling = exports.run = exports.releaseSession = exports.createSession = exports.initOrt = void 0;
var run_options_1 = __webpack_require__(/*! ./run-options */ "./lib/wasm/run-options.ts");
var session_options_1 = __webpack_require__(/*! ./session-options */ "./lib/wasm/session-options.ts");
var string_utils_1 = __webpack_require__(/*! ./string-utils */ "./lib/wasm/string-utils.ts");
var wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ "./lib/wasm/wasm-factory.ts");
/**
 * initialize ORT environment.
 * @param numThreads SetGlobalIntraOpNumThreads(numThreads)
 * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))
 */
var initOrt = function (numThreads, loggingLevel) {
    var errorCode = wasm_factory_1.getInstance()._OrtInit(numThreads, loggingLevel);
    if (errorCode !== 0) {
        throw new Error("Can't initialize onnxruntime. error code = " + errorCode);
    }
};
exports.initOrt = initOrt;
var activeSessions = [];
/**
 * create an instance of InferenceSession.
 * @returns the metadata of InferenceSession. 0-value handle for failure.
 */
var createSession = function (model, options) {
    var _a;
    var wasm = wasm_factory_1.getInstance();
    var modelDataOffset = wasm._malloc(model.byteLength);
    var sessionHandle = 0;
    var sessionOptionsHandle = 0;
    var allocs = [];
    try {
        _a = __read(session_options_1.setSessionOptions(options), 2), sessionOptionsHandle = _a[0], allocs = _a[1];
        wasm.HEAPU8.set(model, modelDataOffset);
        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);
        if (sessionHandle === 0) {
            throw new Error('Can\'t create a session');
        }
    }
    finally {
        wasm._free(modelDataOffset);
        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);
        allocs.forEach(wasm._free);
    }
    var inputCount = wasm._OrtGetInputCount(sessionHandle);
    var outputCount = wasm._OrtGetOutputCount(sessionHandle);
    var inputNames = [];
    var inputNamesUTF8Encoded = [];
    var outputNames = [];
    var outputNamesUTF8Encoded = [];
    for (var i = 0; i < inputCount; i++) {
        var name_1 = wasm._OrtGetInputName(sessionHandle, i);
        if (name_1 === 0) {
            throw new Error('Can\'t get an input name');
        }
        inputNamesUTF8Encoded.push(name_1);
        inputNames.push(wasm.UTF8ToString(name_1));
    }
    for (var i = 0; i < outputCount; i++) {
        var name_2 = wasm._OrtGetOutputName(sessionHandle, i);
        if (name_2 === 0) {
            throw new Error('Can\'t get an output name');
        }
        outputNamesUTF8Encoded.push(name_2);
        outputNames.push(wasm.UTF8ToString(name_2));
    }
    activeSessions.push([sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);
    return [activeSessions.length - 1, inputNames, outputNames];
};
exports.createSession = createSession;
var releaseSession = function (sessionId) {
    var wasm = wasm_factory_1.getInstance();
    var session = activeSessions[sessionId];
    if (!session) {
        throw new Error('invalid session id');
    }
    var sessionHandle = session[0];
    var inputNamesUTF8Encoded = session[1];
    var outputNamesUTF8Encoded = session[2];
    inputNamesUTF8Encoded.forEach(wasm._OrtFree);
    outputNamesUTF8Encoded.forEach(wasm._OrtFree);
    wasm._OrtReleaseSession(sessionHandle);
    activeSessions[sessionId] = undefined;
};
exports.releaseSession = releaseSession;
var tensorDataTypeStringToEnum = function (type) {
    switch (type) {
        case 'int8':
            return 3 /* int8 */;
        case 'uint8':
            return 2 /* uint8 */;
        case 'bool':
            return 9 /* bool */;
        case 'int16':
            return 5 /* int16 */;
        case 'uint16':
            return 4 /* uint16 */;
        case 'int32':
            return 6 /* int32 */;
        case 'uint32':
            return 12 /* uint32 */;
        case 'float32':
            return 1 /* float */;
        case 'float64':
            return 11 /* double */;
        case 'string':
            return 8 /* string */;
        case 'int64':
            return 7 /* int64 */;
        case 'uint64':
            return 13 /* uint64 */;
        default:
            throw new Error("unsupported data type: " + type);
    }
};
var tensorDataTypeEnumToString = function (typeProto) {
    switch (typeProto) {
        case 3 /* int8 */:
            return 'int8';
        case 2 /* uint8 */:
            return 'uint8';
        case 9 /* bool */:
            return 'bool';
        case 5 /* int16 */:
            return 'int16';
        case 4 /* uint16 */:
            return 'uint16';
        case 6 /* int32 */:
            return 'int32';
        case 12 /* uint32 */:
            return 'uint32';
        case 1 /* float */:
            return 'float32';
        case 11 /* double */:
            return 'float64';
        case 8 /* string */:
            return 'string';
        case 7 /* int64 */:
            return 'int32';
        case 13 /* uint64 */:
            return 'uint32';
        default:
            throw new Error("unsupported data type: " + typeProto);
    }
};
var numericTensorTypeToTypedArray = function (type) {
    switch (type) {
        case 'float32':
            return Float32Array;
        case 'uint8':
            return Uint8Array;
        case 'int8':
            return Int8Array;
        case 'uint16':
            return Uint16Array;
        case 'int16':
            return Int16Array;
        case 'int32':
            return Int32Array;
        case 'bool':
            return Uint8Array;
        case 'float64':
            return Float64Array;
        case 'uint32':
            return Uint32Array;
        case 'int64':
            return BigInt64Array;
        case 'uint64':
            return BigUint64Array;
        default:
            throw new Error("unsupported type: " + type);
    }
};
/**
 * perform inference run
 */
var run = function (sessionId, inputIndices, inputs, outputIndices, options) {
    var _a;
    var wasm = wasm_factory_1.getInstance();
    var session = activeSessions[sessionId];
    if (!session) {
        throw new Error('invalid session id');
    }
    var sessionHandle = session[0];
    var inputNamesUTF8Encoded = session[1];
    var outputNamesUTF8Encoded = session[2];
    var inputCount = inputIndices.length;
    var outputCount = outputIndices.length;
    var runOptionsHandle = 0;
    var runOptionsAllocs = [];
    var inputValues = [];
    var inputAllocs = [];
    try {
        _a = __read(run_options_1.setRunOptions(options), 2), runOptionsHandle = _a[0], runOptionsAllocs = _a[1];
        var _loop_1 = function (i) {
            var dataType = inputs[i][0];
            var dims = inputs[i][1];
            var data = inputs[i][2];
            var dataOffset = void 0;
            var dataByteLength = void 0;
            if (Array.isArray(data)) {
                // string tensor
                dataByteLength = 4 * data.length;
                dataOffset = wasm._malloc(dataByteLength);
                inputAllocs.push(dataOffset);
                var dataIndex = dataOffset / 4;
                for (var i_1 = 0; i_1 < data.length; i_1++) {
                    if (typeof data[i_1] !== 'string') {
                        throw new TypeError("tensor data at index " + i_1 + " is not a string");
                    }
                    wasm.HEAPU32[dataIndex++] = string_utils_1.allocWasmString(data[i_1], inputAllocs);
                }
            }
            else {
                dataByteLength = data.byteLength;
                dataOffset = wasm._malloc(dataByteLength);
                inputAllocs.push(dataOffset);
                wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);
            }
            var stack = wasm.stackSave();
            var dimsOffset = wasm.stackAlloc(4 * dims.length);
            try {
                var dimIndex_1 = dimsOffset / 4;
                dims.forEach(function (d) { return wasm.HEAP32[dimIndex_1++] = d; });
                var tensor = wasm._OrtCreateTensor(tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);
                if (tensor === 0) {
                    throw new Error('Can\'t create a tensor');
                }
                inputValues.push(tensor);
            }
            finally {
                wasm.stackRestore(stack);
            }
        };
        // create input tensors
        for (var i = 0; i < inputCount; i++) {
            _loop_1(i);
        }
        var beforeRunStack = wasm.stackSave();
        var inputValuesOffset = wasm.stackAlloc(inputCount * 4);
        var inputNamesOffset = wasm.stackAlloc(inputCount * 4);
        var outputValuesOffset = wasm.stackAlloc(outputCount * 4);
        var outputNamesOffset = wasm.stackAlloc(outputCount * 4);
        try {
            var inputValuesIndex = inputValuesOffset / 4;
            var inputNamesIndex = inputNamesOffset / 4;
            var outputValuesIndex = outputValuesOffset / 4;
            var outputNamesIndex = outputNamesOffset / 4;
            for (var i = 0; i < inputCount; i++) {
                wasm.HEAPU32[inputValuesIndex++] = inputValues[i];
                wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
            }
            for (var i = 0; i < outputCount; i++) {
                wasm.HEAPU32[outputValuesIndex++] = 0;
                wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
            }
            // support RunOptions
            var errorCode = wasm._OrtRun(sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount, outputValuesOffset, runOptionsHandle);
            var output = [];
            if (errorCode === 0) {
                for (var i = 0; i < outputCount; i++) {
                    var tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];
                    var beforeGetTensorDataStack = wasm.stackSave();
                    // stack allocate 4 pointer value
                    var tensorDataOffset = wasm.stackAlloc(4 * 4);
                    var type = void 0, dataOffset = 0;
                    try {
                        errorCode = wasm._OrtGetTensorData(tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);
                        if (errorCode !== 0) {
                            throw new Error("Can't get a tensor data. error code = " + errorCode);
                        }
                        var tensorDataIndex = tensorDataOffset / 4;
                        var dataType = wasm.HEAPU32[tensorDataIndex++];
                        dataOffset = wasm.HEAPU32[tensorDataIndex++];
                        var dimsOffset = wasm.HEAPU32[tensorDataIndex++];
                        var dimsLength = wasm.HEAPU32[tensorDataIndex++];
                        var dims = [];
                        for (var i_2 = 0; i_2 < dimsLength; i_2++) {
                            dims.push(wasm.HEAPU32[dimsOffset / 4 + i_2]);
                        }
                        wasm._OrtFree(dimsOffset);
                        var size = dims.length === 0 ? 1 : dims.reduce(function (a, b) { return a * b; });
                        type = tensorDataTypeEnumToString(dataType);
                        if (type === 'string') {
                            var stringData = [];
                            var dataIndex = dataOffset / 4;
                            for (var i_3 = 0; i_3 < size; i_3++) {
                                var offset = wasm.HEAPU32[dataIndex++];
                                var maxBytesToRead = i_3 === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;
                                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));
                            }
                            output.push([type, dims, stringData]);
                        }
                        else {
                            var typedArrayConstructor = numericTensorTypeToTypedArray(type);
                            var data = new typedArrayConstructor(size);
                            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)
                                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                            output.push([type, dims, data]);
                        }
                    }
                    finally {
                        wasm.stackRestore(beforeGetTensorDataStack);
                        if (type === 'string' && dataOffset) {
                            wasm._free(dataOffset);
                        }
                        wasm._OrtReleaseTensor(tensor);
                    }
                }
            }
            if (errorCode === 0) {
                return output;
            }
            else {
                throw new Error("failed to call OrtRun(). error code = " + errorCode + ".");
            }
        }
        finally {
            wasm.stackRestore(beforeRunStack);
        }
    }
    finally {
        inputValues.forEach(wasm._OrtReleaseTensor);
        inputAllocs.forEach(wasm._free);
        wasm._OrtReleaseRunOptions(runOptionsHandle);
        runOptionsAllocs.forEach(wasm._free);
    }
};
exports.run = run;
/**
 * end profiling
 */
var endProfiling = function (sessionId) {
    var wasm = wasm_factory_1.getInstance();
    var session = activeSessions[sessionId];
    if (!session) {
        throw new Error('invalid session id');
    }
    var sessionHandle = session[0];
    // profile file name is not used yet, but it must be freed.
    var profileFileName = wasm._OrtEndProfiling(sessionHandle);
    if (profileFileName === 0) {
        throw new Error('Can\'t get an profile file name');
    }
    wasm._OrtFree(profileFileName);
};
exports.endProfiling = endProfiling;
var extractTransferableBuffers = function (tensors) {
    var e_1, _a;
    var buffers = [];
    try {
        for (var tensors_1 = __values(tensors), tensors_1_1 = tensors_1.next(); !tensors_1_1.done; tensors_1_1 = tensors_1.next()) {
            var tensor = tensors_1_1.value;
            var data = tensor[2];
            if (!Array.isArray(data) && data.buffer) {
                buffers.push(data.buffer);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (tensors_1_1 && !tensors_1_1.done && (_a = tensors_1.return)) _a.call(tensors_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return buffers;
};
exports.extractTransferableBuffers = extractTransferableBuffers;


/***/ }),

/***/ "./lib/wasm/wasm-factory.ts":
/*!**********************************!*\
  !*** ./lib/wasm/wasm-factory.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
var __dirname = "/";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dispose = exports.getInstance = exports.initializeWebAssembly = void 0;
var path = __importStar(__webpack_require__(/*! path */ "?7aa5"));
var ort_wasm_threaded_js_1 = __importDefault(__webpack_require__(/*! ./binding/ort-wasm-threaded.js */ "./lib/wasm/binding/ort-wasm-threaded.js"));
var ort_wasm_js_1 = __importDefault(__webpack_require__(/*! ./binding/ort-wasm.js */ "./lib/wasm/binding/ort-wasm.js"));
var wasm;
var initialized = false;
var initializing = false;
var aborted = false;
var isMultiThreadSupported = function () {
    try {
        // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.
        if (typeof SharedArrayBuffer === 'undefined') {
            return false;
        }
        // Test for transferability of SABs (for browsers. needed for Firefox)
        // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ
        if (typeof MessageChannel !== 'undefined') {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
        }
        // Test for WebAssembly threads capability (for both browsers and Node.js)
        // This typed array is a WebAssembly program containing threaded instructions.
        return WebAssembly.validate(new Uint8Array([
            0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5,
            4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11
        ]));
    }
    catch (e) {
        return false;
    }
};
var isSimdSupported = function () {
    try {
        // Test for WebAssembly SIMD capability (for both browsers and Node.js)
        // This typed array is a WebAssembly program containing SIMD instructions.
        return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));
    }
    catch (e) {
        return false;
    }
};
var getWasmFileName = function (useSimd, useThreads) {
    if (useThreads) {
        return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';
    }
    else {
        return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';
    }
};
var initializeWebAssembly = function (flags) { return __awaiter(void 0, void 0, void 0, function () {
    var timeout, numThreads, simd, useThreads, useSimd, wasmPrefixOverride, wasmFileName, wasmOverrideFileName, wasmPathOverride, isTimeout, tasks;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (initialized) {
                    return [2 /*return*/, Promise.resolve()];
                }
                if (initializing) {
                    throw new Error('multiple calls to \'initializeWebAssembly()\' detected.');
                }
                if (aborted) {
                    throw new Error('previous call to \'initializeWebAssembly()\' failed.');
                }
                initializing = true;
                timeout = flags.initTimeout;
                numThreads = flags.numThreads;
                simd = flags.simd;
                useThreads = numThreads > 1 && isMultiThreadSupported();
                useSimd = simd && isSimdSupported();
                wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;
                wasmFileName = getWasmFileName(false, useThreads);
                wasmOverrideFileName = getWasmFileName(useSimd, useThreads);
                wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;
                isTimeout = false;
                tasks = [];
                // promise for timeout
                if (timeout > 0) {
                    tasks.push(new Promise(function (resolve) {
                        setTimeout(function () {
                            isTimeout = true;
                            resolve();
                        }, timeout);
                    }));
                }
                // promise for module initialization
                tasks.push(new Promise(function (resolve, reject) {
                    var factory = useThreads ? ort_wasm_threaded_js_1.default : ort_wasm_js_1.default;
                    var config = {
                        locateFile: function (fileName, scriptDirectory) {
                            if (fileName.endsWith('.worker.js') && typeof Blob !== 'undefined') {
                                return URL.createObjectURL(new Blob([
                                    // This require() function is handled by webpack to load file content of the corresponding .worker.js
                                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                                    __webpack_require__(/*! ./binding/ort-wasm-threaded.worker.js */ "./lib/wasm/binding/ort-wasm-threaded.worker.js")
                                ], { type: 'text/javascript' }));
                            }
                            if (fileName === wasmFileName) {
                                var prefix = wasmPrefixOverride !== null && wasmPrefixOverride !== void 0 ? wasmPrefixOverride : scriptDirectory;
                                return wasmPathOverride !== null && wasmPathOverride !== void 0 ? wasmPathOverride : prefix + wasmOverrideFileName;
                            }
                            return scriptDirectory + fileName;
                        }
                    };
                    if (useThreads) {
                        if (typeof Blob === 'undefined') {
                            config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');
                        }
                        else {
                            var scriptSourceCode = "var ortWasmThreaded=(function(){var _scriptDir;return " + ort_wasm_threaded_js_1.default.toString() + "})();";
                            config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: 'text/javascript' });
                        }
                    }
                    factory(config).then(
                    // wasm module initialized successfully
                    function (module) {
                        initializing = false;
                        initialized = true;
                        wasm = module;
                        resolve();
                    }, 
                    // wasm module failed to initialize
                    function (what) {
                        initializing = false;
                        aborted = true;
                        reject(what);
                    });
                }));
                return [4 /*yield*/, Promise.race(tasks)];
            case 1:
                _a.sent();
                if (isTimeout) {
                    throw new Error("WebAssembly backend initializing failed due to timeout: " + timeout + "ms");
                }
                return [2 /*return*/];
        }
    });
}); };
exports.initializeWebAssembly = initializeWebAssembly;
var getInstance = function () {
    if (initialized && wasm) {
        return wasm;
    }
    throw new Error('WebAssembly is not initialized yet.');
};
exports.getInstance = getInstance;
var dispose = function () {
    var _a;
    if (initialized && !initializing && !aborted) {
        initializing = true;
        (_a = wasm.PThread) === null || _a === void 0 ? void 0 : _a.terminateAllThreads();
        wasm = undefined;
        initializing = false;
        initialized = false;
        aborted = true;
    }
};
exports.dispose = dispose;


/***/ }),

/***/ "./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./lib/wasm/proxy-worker/main.ts":
/*!***************************************************************************************************!*\
  !*** ./node_modules/worker-loader/dist/cjs.js?inline=no-fallback!./lib/wasm/proxy-worker/main.ts ***!
  \***************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Worker_fn; }
/* harmony export */ });
/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !!../../../node_modules/worker-loader/dist/runtime/inline.js */ "./node_modules/worker-loader/dist/runtime/inline.js");
/* harmony import */ var _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0__);



function Worker_fn() {
  return _node_modules_worker_loader_dist_runtime_inline_js__WEBPACK_IMPORTED_MODULE_0___default()("/*!\n* ONNX Runtime Web v1.9.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n/******/ (function() { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./lib/wasm/binding/ort-wasm-threaded.js\":\n/*!***********************************************!*\\\n  !*** ./lib/wasm/binding/ort-wasm-threaded.js ***!\n  \\***********************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\nvar __filename = \"/index.js\";\nvar __dirname = \"/\";\n\r\nvar ortWasmThreaded = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (true) _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasmThreaded) {\r\n  ortWasmThreaded = ortWasmThreaded || {};\r\n\r\n\r\nfunction d(){f.buffer!=l&&n(f.buffer);return aa}function q(){f.buffer!=l&&n(f.buffer);return ba}function t(){f.buffer!=l&&n(f.buffer);return ca}function u(){f.buffer!=l&&n(f.buffer);return da}function ea(){f.buffer!=l&&n(f.buffer);return fa}var v;v||(v=typeof ortWasmThreaded !== 'undefined' ? ortWasmThreaded : {});var ha,ia;v.ready=new Promise(function(a,b){ha=a;ia=b});var y={},z;for(z in v)v.hasOwnProperty(z)&&(y[z]=v[z]);var ja=\"./this.program\";function ka(a,b){throw b;}\r\nvar la=\"object\"===typeof window,A=\"function\"===typeof importScripts,B=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,C=v.ENVIRONMENT_IS_PTHREAD||!1,D=\"\";function ma(a){return v.locateFile?v.locateFile(a,D):D+a}var F,H,I,J,K;\r\nif(B){D=A?__webpack_require__(/*! path */ \"?75c6\").dirname(D)+\"/\":__dirname+\"/\";F=function(a,b){J||(J=__webpack_require__(/*! fs */ \"?63c8\"));K||(K=__webpack_require__(/*! path */ \"?75c6\"));a=K.normalize(a);return J.readFileSync(a,b?null:\"utf8\")};I=function(a){a=F(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a};H=function(a,b,c){J||(J=__webpack_require__(/*! fs */ \"?63c8\"));K||(K=__webpack_require__(/*! path */ \"?75c6\"));a=K.normalize(a);J.readFile(a,function(e,h){e?c(e):b(h.buffer)})};1<process.argv.length&&(ja=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);process.on(\"uncaughtException\",function(a){if(!(a instanceof\r\nL))throw a;});process.on(\"unhandledRejection\",M);ka=function(a,b){if(na())throw process.exitCode=a,b;process.exit(a)};v.inspect=function(){return\"[Emscripten Module object]\"};var oa;try{oa=__webpack_require__(/*! worker_threads */ \"?c6f7\")}catch(a){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),a;}__webpack_require__.g.Worker=oa.Worker}else if(la||A)A?D=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(D=document.currentScript.src),\r\n_scriptDir&&(D=_scriptDir),0!==D.indexOf(\"blob:\")?D=D.substr(0,D.lastIndexOf(\"/\")+1):D=\"\",B?(F=function(a,b){J||(J=__webpack_require__(/*! fs */ \"?63c8\"));K||(K=__webpack_require__(/*! path */ \"?75c6\"));a=K.normalize(a);return J.readFileSync(a,b?null:\"utf8\")},I=function(a){a=F(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a},H=function(a,b,c){J||(J=__webpack_require__(/*! fs */ \"?63c8\"));K||(K=__webpack_require__(/*! path */ \"?75c6\"));a=K.normalize(a);J.readFile(a,function(e,h){e?c(e):b(h.buffer)})}):(F=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},\r\nA&&(I=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),H=function(a,b,c){var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\"arraybuffer\";e.onload=function(){200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)});B&&\"undefined\"===typeof performance&&(__webpack_require__.g.performance=__webpack_require__(/*! perf_hooks */ \"?674f\").performance);var pa=v.print||console.log.bind(console),N=v.printErr||console.warn.bind(console);\r\nfor(z in y)y.hasOwnProperty(z)&&(v[z]=y[z]);y=null;v.thisProgram&&(ja=v.thisProgram);v.quit&&(ka=v.quit);var qa,ra;v.wasmBinary&&(ra=v.wasmBinary);var noExitRuntime=v.noExitRuntime||!1;\"object\"!==typeof WebAssembly&&M(\"no native wasm support detected\");var f,sa,ta=!1,O;function assert(a,b){a||M(\"Assertion failed: \"+b)}function ua(a){var b=new TextDecoder(a);this.decode=function(c){c.buffer instanceof SharedArrayBuffer&&(c=new Uint8Array(c));return b.decode.call(b,c)}}\r\nvar va=\"undefined\"!==typeof TextDecoder?new ua(\"utf8\"):void 0;\r\nfunction wa(a,b,c){var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.subarray&&va)return va.decode(a.subarray(b,c));for(e=\"\";b<c;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))e+=String.fromCharCode((h&31)<<6|k);else{var m=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|m:(h&7)<<18|k<<12|m<<6|a[b++]&63;65536>h?e+=String.fromCharCode(h):(h-=65536,e+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else e+=String.fromCharCode(h)}return e}function P(a,b){return a?wa(q(),a,b):\"\"}\r\nfunction xa(a,b,c,e){if(!(0<e))return 0;var h=c;e=c+e-1;for(var k=0;k<a.length;++k){var m=a.charCodeAt(k);if(55296<=m&&57343>=m){var r=a.charCodeAt(++k);m=65536+((m&1023)<<10)|r&1023}if(127>=m){if(c>=e)break;b[c++]=m}else{if(2047>=m){if(c+1>=e)break;b[c++]=192|m>>6}else{if(65535>=m){if(c+2>=e)break;b[c++]=224|m>>12}else{if(c+3>=e)break;b[c++]=240|m>>18;b[c++]=128|m>>12&63}b[c++]=128|m>>6&63}b[c++]=128|m&63}}b[c]=0;return c-h}function ya(a,b,c){return xa(a,q(),b,c)}\r\nfunction za(a){for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);55296<=e&&57343>=e&&(e=65536+((e&1023)<<10)|a.charCodeAt(++c)&1023);127>=e?++b:b=2047>=e?b+2:65535>=e?b+3:b+4}return b}\"undefined\"!==typeof TextDecoder&&new ua(\"utf-16le\");function Aa(a){var b=za(a)+1,c=R(b);c&&xa(a,d(),c,b);return c}function Ba(a,b){d().set(a,b)}var l,aa,ba,ca,da,fa;C&&(l=v.buffer);\r\nfunction n(a){l=a;v.HEAP8=aa=new Int8Array(a);v.HEAP16=new Int16Array(a);v.HEAP32=ca=new Int32Array(a);v.HEAPU8=ba=new Uint8Array(a);v.HEAPU16=new Uint16Array(a);v.HEAPU32=da=new Uint32Array(a);v.HEAPF32=new Float32Array(a);v.HEAPF64=fa=new Float64Array(a)}var Ca=v.INITIAL_MEMORY||16777216;\r\nif(C)f=v.wasmMemory,l=v.buffer;else if(v.wasmMemory)f=v.wasmMemory;else if(f=new WebAssembly.Memory({initial:Ca/65536,maximum:32768,shared:!0}),!(f.buffer instanceof SharedArrayBuffer))throw N(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),B&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),\r\nError(\"bad memory\");f&&(l=f.buffer);Ca=l.byteLength;n(l);var S,Da=[],Ea=[],Fa=[],Ga=[],Ha=0;function na(){return noExitRuntime||0<Ha}function Ia(){var a=v.preRun.shift();Da.unshift(a)}var T=0,Ja=null,Ka=null;v.preloadedImages={};v.preloadedAudios={};function M(a){if(v.onAbort)v.onAbort(a);assert(!C);N(a);ta=!0;O=1;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");ia(a);throw a;}function La(){return U.startsWith(\"data:application/octet-stream;base64,\")}var U;\r\nU=\"ort-wasm-threaded.wasm\";La()||(U=ma(U));function Ma(){var a=U;try{if(a==U&&ra)return new Uint8Array(ra);if(I)return I(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){M(b)}}\r\nfunction Na(){if(!ra&&(la||A)){if(\"function\"===typeof fetch&&!U.startsWith(\"file://\"))return fetch(U,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+U+\"'\";return a.arrayBuffer()}).catch(function(){return Ma()});if(H)return new Promise(function(a,b){H(U,function(c){a(new Uint8Array(c))},b)})}return Promise.resolve().then(function(){return Ma()})}var Oa={973748:function(){throw\"Canceled!\";}};\r\nfunction Pa(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(v);else{var c=b.Nb;\"number\"===typeof c?void 0===b.ib?S.get(c)():S.get(c)(b.ib):c(void 0===b.ib?null:b.ib)}}}function Qa(a,b){if(0>=a||a>d().length||a&1||0>b)return-28;if(0==b)return 0;2147483647<=b&&(b=Infinity);var c=Atomics.load(t(),V>>2),e=0;if(c==a&&Atomics.compareExchange(t(),V>>2,c,0)==c&&(--b,e=1,0>=b))return 1;a=Atomics.notify(t(),a>>2,b);if(0<=a)return a+e;throw\"Atomics.notify returned an unexpected value \"+a;}\r\nv._emscripten_futex_wake=Qa;function Ra(a){if(C)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!a)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";var b=W.cb[a];b&&(t()[a+12>>2]=0,W.sb(b.worker))}\r\nvar W={gb:[],fb:[],zb:[],xc:function(){},Rb:function(){for(var a=R(228),b=0;57>b;++b)u()[a/4+b]=0;t()[a+12>>2]=a;b=a+152;t()[b>>2]=b;var c=R(512);for(b=0;128>b;++b)u()[c/4+b]=0;Atomics.store(u(),a+100>>2,c);Atomics.store(u(),a+40>>2,a);Sa(a,!A,1);Ta(a)},Sb:function(){W.receiveObjectTransfer=W.Xb;W.threadInit=W.hc;W.threadCancel=W.fc;W.threadExit=W.Hb;W.setExitStatus=W.Zb},cb:{},yb:[],Eb:function(){for(;0<W.yb.length;)W.yb.pop()();Ua()},Fb:function(a,b){Atomics.store(u(),a+56>>2,1);Atomics.store(u(),\r\na+60>>2,0);W.Eb();Atomics.store(u(),a+4>>2,b);Atomics.store(u(),a+0>>2,1);Qa(a+0,2147483647);Sa(0,0,0)},Zb:function(a){O=a},Hb:function(a){var b=X();b&&(W.Fb(b,a),C&&postMessage({cmd:\"exit\"}))},fc:function(){W.Fb(X(),-1);postMessage({cmd:\"cancelDone\"})},Gb:function(){for(var a in W.cb){var b=W.cb[a];b&&b.worker&&W.sb(b.worker)}W.cb={};for(a=0;a<W.gb.length;++a){var c=W.gb[a];c.terminate()}W.gb=[];for(a=0;a<W.fb.length;++a)c=W.fb[a],b=c.bb,W.xb(b),c.terminate();W.fb=[]},xb:function(a){if(a){if(a.eb){var b=\r\nt()[a.eb+100>>2];t()[a.eb+100>>2]=0;Va(b);Va(a.eb)}a.eb=0;a.wb&&a.hb&&Va(a.hb);a.hb=0;a.worker&&(a.worker.bb=null)}},sb:function(a){W.Yb(function(){delete W.cb[a.bb.eb];W.gb.push(a);W.fb.splice(W.fb.indexOf(a),1);W.xb(a.bb);a.bb=void 0})},Yb:function(a){t()[Wa>>2]=0;try{a()}finally{t()[Wa>>2]=1}},Xb:function(){},hc:function(){for(var a in W.zb)W.zb[a]()},Ub:function(a,b){a.onmessage=function(c){var e=c.data,h=e.cmd;a.bb&&(W.Lb=a.bb.eb);if(e.targetThread&&e.targetThread!=X()){var k=W.cb[e.Dc];k?k.worker.postMessage(c.data,\r\ne.transferList):N('Internal error! Worker sent a message \"'+h+'\" to target pthread '+e.targetThread+\", but that thread no longer exists!\")}else if(\"processQueuedMainThreadWork\"===h)Xa();else if(\"spawnThread\"===h)Ya(c.data);else if(\"cleanupThread\"===h)Ra(e.thread);else if(\"killThread\"===h){c=e.thread;if(C)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!c)throw\"Internal Error! Null pthread_ptr in killThread!\";t()[c+12>>2]=0;e=W.cb[c];delete W.cb[c];e.worker.terminate();\r\nW.xb(e);W.fb.splice(W.fb.indexOf(e.worker),1);e.worker.bb=void 0}else if(\"cancelThread\"===h){c=e.thread;if(C)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!c)throw\"Internal Error! Null pthread_ptr in cancelThread!\";W.cb[c].worker.postMessage({cmd:\"cancel\"})}else if(\"loaded\"===h)a.loaded=!0,b&&b(a),a.mb&&(a.mb(),delete a.mb);else if(\"print\"===h)pa(\"Thread \"+e.threadId+\": \"+e.text);else if(\"printErr\"===h)N(\"Thread \"+e.threadId+\": \"+e.text);else if(\"alert\"===\r\nh)alert(\"Thread \"+e.threadId+\": \"+e.text);else if(\"exit\"===h)a.bb&&Atomics.load(u(),a.bb.eb+64>>2)&&W.sb(a);else if(\"exitProcess\"===h)try{Za(e.returnCode)}catch(m){if(m instanceof L)return;throw m;}else\"cancelDone\"===h?W.sb(a):\"objectTransfer\"!==h&&(\"setimmediate\"===c.data.target?a.postMessage(c.data):N(\"worker sent an unknown command \"+h));W.Lb=void 0};a.onerror=function(c){N(\"pthread sent an error! \"+c.filename+\":\"+c.lineno+\": \"+c.message)};B&&(a.on(\"message\",function(c){a.onmessage({data:c})}),\r\na.on(\"error\",function(c){a.onerror(c)}),a.on(\"exit\",function(){}));a.postMessage({cmd:\"load\",urlOrBlob:v.mainScriptUrlOrBlob||_scriptDir,wasmMemory:f,wasmModule:sa})},Ib:function(){var a=ma(\"ort-wasm-threaded.worker.js\");W.gb.push(new Worker(a))},Ob:function(){0==W.gb.length&&(W.Ib(),W.Ub(W.gb[0]));return W.gb.pop()},nc:function(a){for(a=performance.now()+a;performance.now()<a;);}};v.establishStackSpace=function(a,b){$a(a,b);ab(a)};v.invokeEntryPoint=function(a,b){return S.get(a)(b)};var bb;\r\nbb=B?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:C?function(){return performance.now()-v.__performance_now_clock_drift}:function(){return performance.now()};function cb(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=bb();else return t()[db()>>2]=28,-1;t()[b>>2]=a/1E3|0;t()[b+4>>2]=a%1E3*1E6|0;return 0}function eb(a,b){if(C)return Y(1,1,a,b);Fa.unshift({Nb:a,ib:b})}\r\nfunction fb(a){this.lb=a-16;this.dc=function(b){t()[this.lb+4>>2]=b};this.ac=function(b){t()[this.lb+8>>2]=b};this.bc=function(){t()[this.lb>>2]=0};this.$b=function(){var b=0;d()[this.lb+12>>0]=b};this.cc=function(){var b=0;d()[this.lb+13>>0]=b};this.Pb=function(b,c){this.dc(b);this.ac(c);this.bc();this.$b();this.cc()}}var gb=0;\r\nfunction Ya(a){if(C)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var b=W.Ob();if(!b)return 6;if(void 0!==b.bb)throw\"Internal error!\";if(!a.rb)throw\"Internal error, no pthread ptr!\";W.fb.push(b);for(var c=R(512),e=0;128>e;++e)t()[c+4*e>>2]=0;var h=a.hb+a.jb;e=W.cb[a.rb]={worker:b,hb:a.hb,jb:a.jb,wb:a.wb,eb:a.rb};var k=e.eb>>2;Atomics.store(u(),k+16,a.detached);Atomics.store(u(),k+25,c);Atomics.store(u(),k+10,e.eb);Atomics.store(u(),k+20,a.jb);Atomics.store(u(),\r\nk+19,h);Atomics.store(u(),k+26,a.jb);Atomics.store(u(),k+28,h);Atomics.store(u(),k+29,a.detached);c=hb()+40;Atomics.store(u(),k+43,c);b.bb=e;var m={cmd:\"run\",start_routine:a.ec,arg:a.ib,threadInfoStruct:a.rb,stackBase:a.hb,stackSize:a.jb};b.mb=function(){m.time=performance.now();b.postMessage(m,a.mc)};b.loaded&&(b.mb(),delete b.mb);return 0}\r\nfunction ib(a,b,c){if(0>=a||a>d().length||a&1)return-28;if(la){if(Atomics.load(t(),a>>2)!=b)return-6;var e=performance.now();c=e+c;for(Atomics.exchange(t(),V>>2,a);;){e=performance.now();if(e>c)return Atomics.exchange(t(),V>>2,0),-73;e=Atomics.exchange(t(),V>>2,0);if(0==e)break;Xa();if(Atomics.load(t(),a>>2)!=b)return-6;Atomics.exchange(t(),V>>2,a)}return 0}a=Atomics.wait(t(),a>>2,b,c);if(\"timed-out\"===a)return-73;if(\"not-equal\"===a)return-6;if(\"ok\"===a)return 0;throw\"Atomics.wait returned an unexpected value \"+\r\na;}function jb(){B||A||(qa||(qa={}),qa[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]||(qa[\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\"]=1,N(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")))}\r\nfunction kb(a,b){if(!a)return N(\"pthread_join attempted on a null thread pointer!\"),71;if(C&&X()==a)return N(\"PThread \"+a+\" is attempting to join to itself!\"),16;if(!C&&lb()==a)return N(\"Main thread \"+a+\" is attempting to join to itself!\"),16;if(t()[a+12>>2]!==a)return N(\"pthread_join attempted on thread \"+a+\", which does not point to a valid thread, or does not exist anymore!\"),71;if(Atomics.load(u(),a+64>>2))return N(\"Attempted to join thread \"+a+\", which was already detached!\"),28;for(jb();;){var c=\r\nAtomics.load(u(),a+0>>2);if(1==c)return c=Atomics.load(u(),a+4>>2),b&&(t()[b>>2]=c),Atomics.store(u(),a+64>>2,1),C?postMessage({cmd:\"cleanupThread\",thread:a}):Ra(a),0;mb();C||Xa();ib(a+0,c,C?100:1)}}var nb={},ob=[null,[],[]];function pb(a,b){var c=ob[a];0===b||10===b?((1===a?pa:N)(wa(c,0)),c.length=0):c.push(b)}var qb={};function rb(a,b){if(C)return Y(2,1,a,b);a=P(a);return qb.rc(a,b)}function sb(a,b,c){return C?Y(3,1,a,b,c):0}function tb(a,b){if(C)return Y(4,1,a,b)}\r\nfunction ub(a,b,c){if(C)return Y(5,1,a,b,c)}function vb(a,b,c){return C?Y(6,1,a,b,c):0}function wb(a,b){if(C)return Y(7,1,a,b)}function xb(a,b){if(C)return Y(8,1,a,b);a=P(a);return qb.sc(a,b)}function yb(a,b,c,e,h,k){if(C)b=Y(9,1,a,b,c,e,h,k);else if(k<<=12,0!==(e&16)&&0!==a%65536)b=-28;else if(0!==(e&32)){var m=65536*Math.ceil(b/65536);(a=zb(65536,m))?q().fill(0,a,a+m):a=0;a?(nb[a]={Wb:a,Tb:b,Jb:!0,fd:h,Ac:c,flags:e,offset:k},b=a):b=-48}else b=-52;return b}\r\nfunction Ab(a,b){if(C)a=Y(10,1,a,b);else{var c=nb[a];0!==b&&c?(b===c.Tb&&(nb[a]=null,c.Jb&&Va(c.Wb)),a=0):a=-28}return a}function Bb(a,b,c){if(C)return Y(11,1,a,b,c)}function Cb(a,b,c){if(C)return Y(12,1,a,b,c);a=P(a);return qb.tc(a,b,c)}function Db(a){if(C)return Y(13,1,a)}function Eb(a,b){if(C)return Y(14,1,a,b)}function Fb(a){if(C)return Y(15,1,a)}function Gb(){if(C)return Y(16,1);M()}var Hb=[];\r\nfunction Y(a,b){for(var c=arguments.length-2,e=Ib(),h=Jb(8*c),k=h>>3,m=0;m<c;m++){var r=arguments[2+m];ea()[k+m]=r}c=Kb(a,c,h,b);ab(e);return c}var Lb=[],Mb=[0,\"undefined\"!==typeof document?document:0,\"undefined\"!==typeof window?window:0];function Nb(a){a=2<a?P(a):a;return Mb[a]||(\"undefined\"!==typeof document?document.querySelector(a):void 0)}\r\nfunction Ob(a,b,c){var e=Nb(a);if(!e)return-4;e.qb&&(t()[e.qb>>2]=b,t()[e.qb+4>>2]=c);if(e.Db||!e.pc)e.Db&&(e=e.Db),a=!1,e.pb&&e.pb.ob&&(a=e.pb.ob.getParameter(2978),a=0===a[0]&&0===a[1]&&a[2]===e.width&&a[3]===e.height),e.width=b,e.height=c,a&&e.pb.ob.viewport(0,0,b,c);else{if(e.qb){e=t()[e.qb+8>>2];a=a?P(a):\"\";var h=Ib(),k=Jb(12),m=0;if(a){m=za(a)+1;var r=R(m);ya(a,r,m);m=r}t()[k>>2]=m;t()[k+4>>2]=b;t()[k+8>>2]=c;Pb(0,e,657457152,0,m,k);ab(h);return 1}return-4}return 0}\r\nfunction Qb(a,b,c){return C?Y(17,1,a,b,c):Ob(a,b,c)}function Rb(a){if(!ta){try{a()}catch(b){if(b instanceof L)return;if(\"unwind\"!==b)throw b&&\"object\"===typeof b&&b.stack&&N(\"exception thrown: \"+[b,b.stack]),b;}if(!na())try{C?Sb(O):Za(O)}catch(b){if(!(b instanceof L))throw b;}}}\r\nfunction Tb(a){var b=a.getExtension(\"ANGLE_instanced_arrays\");b&&(a.vertexAttribDivisor=function(c,e){b.vertexAttribDivisorANGLE(c,e)},a.drawArraysInstanced=function(c,e,h,k){b.drawArraysInstancedANGLE(c,e,h,k)},a.drawElementsInstanced=function(c,e,h,k,m){b.drawElementsInstancedANGLE(c,e,h,k,m)})}\r\nfunction Ub(a){var b=a.getExtension(\"OES_vertex_array_object\");b&&(a.createVertexArray=function(){return b.createVertexArrayOES()},a.deleteVertexArray=function(c){b.deleteVertexArrayOES(c)},a.bindVertexArray=function(c){b.bindVertexArrayOES(c)},a.isVertexArray=function(c){return b.isVertexArrayOES(c)})}function Vb(a){var b=a.getExtension(\"WEBGL_draw_buffers\");b&&(a.drawBuffers=function(c,e){b.drawBuffersWEBGL(c,e)})}\r\nfunction Wb(a,b){a.Cb||(a.Cb=a.getContext,a.getContext=function(e,h){h=a.Cb(e,h);return\"webgl\"==e==h instanceof WebGLRenderingContext?h:null});var c=a.getContext(\"webgl\",b);return c?Xb(c,b):0}function Xb(a,b){var c=R(8);t()[c+4>>2]=X();var e={wc:c,attributes:b,version:b.Vb,ob:a};a.canvas&&(a.canvas.pb=e);(\"undefined\"===typeof b.Bb||b.Bb)&&Yb(e);return c}\r\nfunction Yb(a){a||(a=Zb);if(!a.Qb){a.Qb=!0;var b=a.ob;Tb(b);Ub(b);Vb(b);b.qc=b.getExtension(\"EXT_disjoint_timer_query\");b.zc=b.getExtension(\"WEBGL_multi_draw\");(b.getSupportedExtensions()||[]).forEach(function(c){c.includes(\"lose_context\")||c.includes(\"debug\")||b.getExtension(c)})}}var Zb,$b=[\"default\",\"low-power\",\"high-performance\"],ac={};\r\nfunction bc(){if(!cc){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ja||\"./this.program\"},b;for(b in ac)void 0===ac[b]?delete a[b]:a[b]=ac[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);cc=c}return cc}var cc;\r\nfunction dc(a,b){if(C)return Y(18,1,a,b);var c=0;bc().forEach(function(e,h){var k=b+c;h=t()[a+4*h>>2]=k;for(k=0;k<e.length;++k)d()[h++>>0]=e.charCodeAt(k);d()[h>>0]=0;c+=e.length+1});return 0}function ec(a,b){if(C)return Y(19,1,a,b);var c=bc();t()[a>>2]=c.length;var e=0;c.forEach(function(h){e+=h.length+1});t()[b>>2]=e;return 0}function fc(a){return C?Y(20,1,a):0}function jc(a,b){if(C)return Y(21,1,a,b);a=1==a||2==a?2:M();d()[b>>0]=a;return 0}\r\nfunction kc(a,b,c,e){if(C)return Y(22,1,a,b,c,e);a=qb.vc(a);b=qb.uc(a,b,c);t()[e>>2]=b;return 0}function lc(a,b,c,e,h){if(C)return Y(23,1,a,b,c,e,h)}function mc(a,b,c,e){if(C)return Y(24,1,a,b,c,e);for(var h=0,k=0;k<c;k++){for(var m=t()[b+8*k>>2],r=t()[b+(8*k+4)>>2],x=0;x<r;x++)pb(a,q()[m+x]);h+=r}t()[e>>2]=h;return 0}\r\nfunction nc(a,b){a=new Date(1E3*t()[a>>2]);t()[b>>2]=a.getUTCSeconds();t()[b+4>>2]=a.getUTCMinutes();t()[b+8>>2]=a.getUTCHours();t()[b+12>>2]=a.getUTCDate();t()[b+16>>2]=a.getUTCMonth();t()[b+20>>2]=a.getUTCFullYear()-1900;t()[b+24>>2]=a.getUTCDay();t()[b+36>>2]=0;t()[b+32>>2]=0;a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;t()[b+28>>2]=a;nc.Ab||(nc.Ab=Aa(\"GMT\"));t()[b+40>>2]=nc.Ab;return b}\r\nfunction oc(){function a(m){return(m=m.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?m[1]:\"GMT\"}if(C)return Y(25,1);if(!oc.Kb){oc.Kb=!0;var b=(new Date).getFullYear(),c=new Date(b,0,1),e=new Date(b,6,1);b=c.getTimezoneOffset();var h=e.getTimezoneOffset(),k=Math.max(b,h);t()[pc()>>2]=60*k;t()[qc()>>2]=Number(b!=h);c=a(c);e=a(e);c=Aa(c);e=Aa(e);h<b?(t()[Z()>>2]=c,t()[Z()+4>>2]=e):(t()[Z()>>2]=e,t()[Z()+4>>2]=c)}}function rc(a){return 0===a%4&&(0!==a%100||0===a%400)}\r\nfunction sc(a,b){for(var c=0,e=0;e<=b;c+=a[e++]);return c}var tc=[31,29,31,30,31,30,31,31,30,31,30,31],uc=[31,28,31,30,31,30,31,31,30,31,30,31];function vc(a,b){for(a=new Date(a.getTime());0<b;){var c=a.getMonth(),e=(rc(a.getFullYear())?tc:uc)[c];if(b>e-a.getDate())b-=e-a.getDate()+1,a.setDate(1),11>c?a.setMonth(c+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction wc(a,b,c,e){function h(g,p,w){for(g=\"number\"===typeof g?g.toString():g||\"\";g.length<p;)g=w[0]+g;return g}function k(g,p){return h(g,p,\"0\")}function m(g,p){function w(gc){return 0>gc?-1:0<gc?1:0}var Q;0===(Q=w(g.getFullYear()-p.getFullYear()))&&0===(Q=w(g.getMonth()-p.getMonth()))&&(Q=w(g.getDate()-p.getDate()));return Q}function r(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),\r\n0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function x(g){g=vc(new Date(g.ab+1900,0,1),g.vb);var p=new Date(g.getFullYear()+1,0,4),w=r(new Date(g.getFullYear(),0,4));p=r(p);return 0>=m(w,g)?0>=m(p,g)?g.getFullYear()+1:g.getFullYear():g.getFullYear()-1}var E=t()[e+40>>2];e={kc:t()[e>>2],jc:t()[e+4>>2],tb:t()[e+8>>2],nb:t()[e+12>>2],kb:t()[e+16>>2],ab:t()[e+20>>2],ub:t()[e+24>>2],vb:t()[e+28>>2],Ec:t()[e+\r\n32>>2],ic:t()[e+36>>2],lc:E?P(E):\"\"};c=P(c);E={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var G in E)c=c.replace(new RegExp(G,\"g\"),E[G]);var hc=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nic=\"January February March April May June July August September October November December\".split(\" \");E={\"%a\":function(g){return hc[g.ub].substring(0,3)},\"%A\":function(g){return hc[g.ub]},\"%b\":function(g){return ic[g.kb].substring(0,3)},\"%B\":function(g){return ic[g.kb]},\"%C\":function(g){return k((g.ab+1900)/100|0,2)},\"%d\":function(g){return k(g.nb,2)},\"%e\":function(g){return h(g.nb,2,\" \")},\"%g\":function(g){return x(g).toString().substring(2)},\"%G\":function(g){return x(g)},\"%H\":function(g){return k(g.tb,\r\n2)},\"%I\":function(g){g=g.tb;0==g?g=12:12<g&&(g-=12);return k(g,2)},\"%j\":function(g){return k(g.nb+sc(rc(g.ab+1900)?tc:uc,g.kb-1),3)},\"%m\":function(g){return k(g.kb+1,2)},\"%M\":function(g){return k(g.jc,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(g){return 0<=g.tb&&12>g.tb?\"AM\":\"PM\"},\"%S\":function(g){return k(g.kc,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(g){return g.ub||7},\"%U\":function(g){var p=new Date(g.ab+1900,0,1),w=0===p.getDay()?p:vc(p,7-p.getDay());g=new Date(g.ab+1900,g.kb,g.nb);return 0>\r\nm(w,g)?k(Math.ceil((31-w.getDate()+(sc(rc(g.getFullYear())?tc:uc,g.getMonth()-1)-31)+g.getDate())/7),2):0===m(w,p)?\"01\":\"00\"},\"%V\":function(g){var p=new Date(g.ab+1901,0,4),w=r(new Date(g.ab+1900,0,4));p=r(p);var Q=vc(new Date(g.ab+1900,0,1),g.vb);return 0>m(Q,w)?\"53\":0>=m(p,Q)?\"01\":k(Math.ceil((w.getFullYear()<g.ab+1900?g.vb+32-w.getDate():g.vb+1-w.getDate())/7),2)},\"%w\":function(g){return g.ub},\"%W\":function(g){var p=new Date(g.ab,0,1),w=1===p.getDay()?p:vc(p,0===p.getDay()?1:7-p.getDay()+1);g=\r\nnew Date(g.ab+1900,g.kb,g.nb);return 0>m(w,g)?k(Math.ceil((31-w.getDate()+(sc(rc(g.getFullYear())?tc:uc,g.getMonth()-1)-31)+g.getDate())/7),2):0===m(w,p)?\"01\":\"00\"},\"%y\":function(g){return(g.ab+1900).toString().substring(2)},\"%Y\":function(g){return g.ab+1900},\"%z\":function(g){g=g.ic;var p=0<=g;g=Math.abs(g)/60;return(p?\"+\":\"-\")+String(\"0000\"+(g/60*100+g%60)).slice(-4)},\"%Z\":function(g){return g.lc},\"%%\":function(){return\"%\"}};for(G in E)c.includes(G)&&(c=c.replace(new RegExp(G,\"g\"),E[G](e)));G=xc(c);\r\nif(G.length>b)return 0;Ba(G,a);return G.length-1}var yc=[null,eb,rb,sb,tb,ub,vb,wb,xb,yb,Ab,Bb,Cb,Db,Eb,Fb,Gb,Qb,dc,ec,fc,jc,kc,lc,mc,oc];function xc(a){var b=Array(za(a)+1);xa(a,b,0,b.length);return b}\r\nvar Ac={h:function(a,b,c,e){M(\"Assertion failed: \"+P(a)+\", at: \"+[b?P(b):\"unknown filename\",c,e?P(e):\"unknown function\"])},M:function(a,b){return cb(a,b)},b:function(a){return R(a+16)+16},d:function(a,b){return eb(a,b)},e:function(a,b){W.yb.push(function(){S.get(a)(b)})},c:function(a,b,c){(new fb(a)).Pb(b,c);gb++;throw a;},Z:function(a,b,c,e){if(\"undefined\"===typeof SharedArrayBuffer)return N(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!a)return N(\"pthread_create called with a null thread pointer!\"),\r\n28;var h=[];if(C&&0===h.length)return zc(687865856,a,b,c,e);var k=0,m=0;if(b&&-1!=b){var r=t()[b>>2];r+=81920;k=t()[b+8>>2];m=0!==t()[b+12>>2]}else r=2097152;(b=0==k)?k=zb(16,r):(k-=r,assert(0<k));for(var x=R(228),E=0;57>E;++E)u()[(x>>2)+E]=0;t()[a>>2]=x;t()[x+12>>2]=x;a=x+152;t()[a>>2]=a;c={hb:k,jb:r,wb:b,detached:m,ec:c,rb:x,ib:e,mc:h};return C?(c.oc=\"spawnThread\",postMessage(c,h),0):Ya(c)},X:function(a){C?W.Hb(a):(W.Eb(),Za(a));throw\"unwind\";},Y:function(a,b){return kb(a,b)},L:rb,s:sb,S:tb,V:ub,\r\nu:function(){return 42},F:vb,Q:wb,P:xb,U:yb,T:Ab,q:Bb,K:Cb,N:Db,v:Eb,O:Fb,da:function(a,b){if(a==b)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(C)postMessage({targetThread:a,cmd:\"processThreadQueue\"});else{a=(a=W.cb[a])&&a.worker;if(!a)return;a.postMessage({cmd:\"processThreadQueue\"})}return 1},f:Gb,w:cb,ga:function(a,b){return a-b},A:function(){M(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},l:function(){M(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nC:function(){M(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},z:function(){M(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},ea:function(a,b,c){Hb.length=0;var e;for(c>>=2;e=q()[b++];)(e=105>e)&&c&1&&c++,Hb.push(e?ea()[c++>>1]:t()[c]),++c;return Oa[a].apply(null,Hb)},G:jb,n:function(){},k:ib,j:Qa,W:function(){return 2147483648},i:bb,D:function(a,\r\nb,c){q().copyWithin(a,b,b+c)},o:function(){return B?__webpack_require__(/*! os */ \"?aedb\").cpus().length:navigator.hardwareConcurrency},aa:function(a,b,c){Lb.length=b;c>>=3;for(var e=0;e<b;e++)Lb[e]=ea()[c+e];return(0>a?Oa[-a-1]:yc[a]).apply(null,Lb)},E:function(a){var b=q().length;a>>>=0;if(a<=b||2147483648<a)return!1;for(var c=1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);e=Math.max(a,e);0<e%65536&&(e+=65536-e%65536);a:{try{f.grow(Math.min(2147483648,e)-l.byteLength+65535>>>16);n(f.buffer);var h=1;break a}catch(k){}h=\r\nvoid 0}if(h)return!0}return!1},ba:function(a,b,c){return Nb(a)?Ob(a,b,c):Qb(a,b,c)},x:function(){},$:function(a,b,c){Ha+=1;return setTimeout(function(){--Ha;Rb(function(){S.get(a)(c)})},b)},ca:function(a,b){b>>=2;var c=t()[b+6];b={alpha:!!t()[b],depth:!!t()[b+1],stencil:!!t()[b+2],antialias:!!t()[b+3],premultipliedAlpha:!!t()[b+4],preserveDrawingBuffer:!!t()[b+5],powerPreference:$b[c],failIfMajorPerformanceCaveat:!!t()[b+7],Vb:t()[b+8],yc:t()[b+9],Bb:t()[b+10],Mb:t()[b+11],Bc:t()[b+12],Cc:t()[b+13]};\r\na=Nb(a);return!a||b.Mb?0:Wb(a,b)},I:dc,J:ec,m:fc,H:jc,t:kc,B:lc,p:mc,R:function(a){var b=Date.now();t()[a>>2]=b/1E3|0;t()[a+4>>2]=b%1E3*1E3|0;return 0},ha:nc,_:function(){W.Rb()},r:function(a,b){oc();a=new Date(1E3*t()[a>>2]);t()[b>>2]=a.getSeconds();t()[b+4>>2]=a.getMinutes();t()[b+8>>2]=a.getHours();t()[b+12>>2]=a.getDate();t()[b+16>>2]=a.getMonth();t()[b+20>>2]=a.getFullYear()-1900;t()[b+24>>2]=a.getDay();var c=new Date(a.getFullYear(),0,1),e=(a.getTime()-c.getTime())/864E5|0;t()[b+28>>2]=e;t()[b+\r\n36>>2]=-(60*a.getTimezoneOffset());e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();c=c.getTimezoneOffset();a=(e!=c&&a.getTimezoneOffset()==Math.min(c,e))|0;t()[b+32>>2]=a;a=t()[Z()+(a?4:0)>>2];t()[b+40>>2]=a;return b},a:f||v.wasmMemory,y:function(a){oc();var b=new Date(t()[a+20>>2]+1900,t()[a+16>>2],t()[a+12>>2],t()[a+8>>2],t()[a+4>>2],t()[a>>2],0),c=t()[a+32>>2],e=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),m=h.getTimezoneOffset(),\r\nr=Math.min(m,k);0>c?t()[a+32>>2]=Number(k!=m&&r==e):0<c!=(r==e)&&(k=Math.max(m,k),b.setTime(b.getTime()+6E4*((0<c?r:k)-e)));t()[a+24>>2]=b.getDay();c=(b.getTime()-h.getTime())/864E5|0;t()[a+28>>2]=c;t()[a>>2]=b.getSeconds();t()[a+4>>2]=b.getMinutes();t()[a+8>>2]=b.getHours();t()[a+12>>2]=b.getDate();t()[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},fa:wc,g:function(a,b,c,e){return wc(a,b,c,e)}};\r\n(function(){function a(h,k){v.asm=h.exports;S=v.asm.Ca;Ea.unshift(v.asm.ia);W.zb.push(v.asm.Ha);sa=k;C||(T--,v.monitorRunDependencies&&v.monitorRunDependencies(T),0==T&&(null!==Ja&&(clearInterval(Ja),Ja=null),Ka&&(h=Ka,Ka=null,h())))}function b(h){a(h.instance,h.module)}function c(h){return Na().then(function(k){return WebAssembly.instantiate(k,e)}).then(h,function(k){N(\"failed to asynchronously prepare wasm: \"+k);M(k)})}var e={a:Ac};C||(T++,v.monitorRunDependencies&&v.monitorRunDependencies(T));\r\nif(v.instantiateWasm)try{return v.instantiateWasm(e,a)}catch(h){return N(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return ra||\"function\"!==typeof WebAssembly.instantiateStreaming||La()||U.startsWith(\"file://\")||\"function\"!==typeof fetch?c(b):fetch(U,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,e).then(b,function(k){N(\"wasm streaming compile failed: \"+k);N(\"falling back to ArrayBuffer instantiation\");return c(b)})})})().catch(ia);\r\nreturn{}})();v.___wasm_call_ctors=function(){return(v.___wasm_call_ctors=v.asm.ia).apply(null,arguments)};v._OrtInit=function(){return(v._OrtInit=v.asm.ja).apply(null,arguments)};v._OrtCreateSessionOptions=function(){return(v._OrtCreateSessionOptions=v.asm.ka).apply(null,arguments)};v._OrtAddSessionConfigEntry=function(){return(v._OrtAddSessionConfigEntry=v.asm.la).apply(null,arguments)};v._OrtReleaseSessionOptions=function(){return(v._OrtReleaseSessionOptions=v.asm.ma).apply(null,arguments)};\r\nv._OrtCreateSession=function(){return(v._OrtCreateSession=v.asm.na).apply(null,arguments)};v._OrtReleaseSession=function(){return(v._OrtReleaseSession=v.asm.oa).apply(null,arguments)};v._OrtGetInputCount=function(){return(v._OrtGetInputCount=v.asm.pa).apply(null,arguments)};v._OrtGetOutputCount=function(){return(v._OrtGetOutputCount=v.asm.qa).apply(null,arguments)};v._OrtGetInputName=function(){return(v._OrtGetInputName=v.asm.ra).apply(null,arguments)};\r\nv._OrtGetOutputName=function(){return(v._OrtGetOutputName=v.asm.sa).apply(null,arguments)};v._OrtFree=function(){return(v._OrtFree=v.asm.ta).apply(null,arguments)};v._OrtCreateTensor=function(){return(v._OrtCreateTensor=v.asm.ua).apply(null,arguments)};v._OrtGetTensorData=function(){return(v._OrtGetTensorData=v.asm.va).apply(null,arguments)};v._OrtReleaseTensor=function(){return(v._OrtReleaseTensor=v.asm.wa).apply(null,arguments)};\r\nv._OrtCreateRunOptions=function(){return(v._OrtCreateRunOptions=v.asm.xa).apply(null,arguments)};v._OrtAddRunConfigEntry=function(){return(v._OrtAddRunConfigEntry=v.asm.ya).apply(null,arguments)};v._OrtReleaseRunOptions=function(){return(v._OrtReleaseRunOptions=v.asm.za).apply(null,arguments)};v._OrtRun=function(){return(v._OrtRun=v.asm.Aa).apply(null,arguments)};v._OrtEndProfiling=function(){return(v._OrtEndProfiling=v.asm.Ba).apply(null,arguments)};\r\nvar R=v._malloc=function(){return(R=v._malloc=v.asm.Da).apply(null,arguments)},db=v.___errno_location=function(){return(db=v.___errno_location=v.asm.Ea).apply(null,arguments)},Va=v._free=function(){return(Va=v._free=v.asm.Fa).apply(null,arguments)},X=v._pthread_self=function(){return(X=v._pthread_self=v.asm.Ga).apply(null,arguments)};v._emscripten_tls_init=function(){return(v._emscripten_tls_init=v.asm.Ha).apply(null,arguments)};\r\nv._emscripten_current_thread_process_queued_calls=function(){return(v._emscripten_current_thread_process_queued_calls=v.asm.Ia).apply(null,arguments)};\r\nvar Ta=v._emscripten_register_main_browser_thread_id=function(){return(Ta=v._emscripten_register_main_browser_thread_id=v.asm.Ja).apply(null,arguments)},lb=v._emscripten_main_browser_thread_id=function(){return(lb=v._emscripten_main_browser_thread_id=v.asm.Ka).apply(null,arguments)},zc=v._emscripten_sync_run_in_main_thread_4=function(){return(zc=v._emscripten_sync_run_in_main_thread_4=v.asm.La).apply(null,arguments)},Xa=v._emscripten_main_thread_process_queued_calls=function(){return(Xa=v._emscripten_main_thread_process_queued_calls=\r\nv.asm.Ma).apply(null,arguments)},Kb=v._emscripten_run_in_main_runtime_thread_js=function(){return(Kb=v._emscripten_run_in_main_runtime_thread_js=v.asm.Na).apply(null,arguments)},Pb=v.__emscripten_call_on_thread=function(){return(Pb=v.__emscripten_call_on_thread=v.asm.Oa).apply(null,arguments)},mb=v._pthread_testcancel=function(){return(mb=v._pthread_testcancel=v.asm.Pa).apply(null,arguments)},Sb=v._pthread_exit=function(){return(Sb=v._pthread_exit=v.asm.Qa).apply(null,arguments)},Sa=v.__emscripten_thread_init=\r\nfunction(){return(Sa=v.__emscripten_thread_init=v.asm.Ra).apply(null,arguments)},hb=v._emscripten_get_global_libc=function(){return(hb=v._emscripten_get_global_libc=v.asm.Sa).apply(null,arguments)},Ua=v.___pthread_tsd_run_dtors=function(){return(Ua=v.___pthread_tsd_run_dtors=v.asm.Ta).apply(null,arguments)},Z=v.__get_tzname=function(){return(Z=v.__get_tzname=v.asm.Ua).apply(null,arguments)},qc=v.__get_daylight=function(){return(qc=v.__get_daylight=v.asm.Va).apply(null,arguments)},pc=v.__get_timezone=\r\nfunction(){return(pc=v.__get_timezone=v.asm.Wa).apply(null,arguments)},Ib=v.stackSave=function(){return(Ib=v.stackSave=v.asm.Xa).apply(null,arguments)},ab=v.stackRestore=function(){return(ab=v.stackRestore=v.asm.Ya).apply(null,arguments)},Jb=v.stackAlloc=function(){return(Jb=v.stackAlloc=v.asm.Za).apply(null,arguments)},$a=v._emscripten_stack_set_limits=function(){return($a=v._emscripten_stack_set_limits=v.asm._a).apply(null,arguments)},zb=v._memalign=function(){return(zb=v._memalign=v.asm.$a).apply(null,\r\narguments)},Wa=v.__emscripten_allow_main_runtime_queued_calls=973296,V=v.__emscripten_main_thread_futex=977204;v.UTF8ToString=P;v.stringToUTF8=ya;v.lengthBytesUTF8=za;v.keepRuntimeAlive=na;v.PThread=W;v.stackSave=Ib;v.stackRestore=ab;v.stackAlloc=Jb;v.PThread=W;v.wasmMemory=f;v.ExitStatus=L;var Bc;function L(a){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+a+\")\";this.status=a}Ka=function Cc(){Bc||Dc();Bc||(Ka=Cc)};\r\nfunction Dc(){function a(){if(!Bc&&(Bc=!0,v.calledRun=!0,!ta)){C||Pa(Ea);ha(v);if(v.onRuntimeInitialized)v.onRuntimeInitialized();if(!C){if(v.postRun)for(\"function\"==typeof v.postRun&&(v.postRun=[v.postRun]);v.postRun.length;){var b=v.postRun.shift();Ga.unshift(b)}Pa(Ga)}}}if(!(0<T))if(C)ha(v),C||Pa(Ea),postMessage({cmd:\"loaded\"});else{if(!C){if(v.preRun)for(\"function\"==typeof v.preRun&&(v.preRun=[v.preRun]);v.preRun.length;)Ia();Pa(Da)}0<T||(v.setStatus?(v.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){v.setStatus(\"\")},\r\n1);a()},1)):a())}}v.run=Dc;function Za(a){O=a;if(C)throw postMessage({cmd:\"exitProcess\",returnCode:a}),new L(a);na()||(W.Gb(),C||(Pa(Fa),\"undefined\"!==typeof _fflush&&_fflush(0),ob[1].length&&pb(1,10),ob[2].length&&pb(2,10)));O=a;if(!na()){W.Gb();if(v.onExit)v.onExit(a);ta=!0}ka(a,new L(a))}if(v.preInit)for(\"function\"==typeof v.preInit&&(v.preInit=[v.preInit]);0<v.preInit.length;)v.preInit.pop()();C&&(noExitRuntime=!1,W.Sb());Dc();\r\n\r\n\r\n  return ortWasmThreaded.ready\r\n}\r\n);\r\n})();\r\nif (true)\r\n  module.exports = ortWasmThreaded;\r\nelse {}\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/binding/ort-wasm-threaded.worker.js\":\n/*!******************************************************!*\\\n  !*** ./lib/wasm/binding/ort-wasm-threaded.worker.js ***!\n  \\******************************************************/\n/***/ (function(module) {\n\n\"use strict\";\nmodule.exports = \"\\\"use strict\\\";var Module={};if(typeof process===\\\"object\\\"&&typeof process.versions===\\\"object\\\"&&typeof process.versions.node===\\\"string\\\"){var nodeWorkerThreads=require(\\\"worker_threads\\\");var parentPort=nodeWorkerThreads.parentPort;parentPort.on(\\\"message\\\",function(data){onmessage({data:data})});var nodeFS=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(nodeFS.readFileSync(f,\\\"utf8\\\"))},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(\\\" \\\");console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:text,threadId:Module[\\\"_pthread_self\\\"]()})}var err=threadPrintErr;self.alert=threadAlert;Module[\\\"instantiateWasm\\\"]=function(info,receiveInstance){var instance=new WebAssembly.Instance(Module[\\\"wasmModule\\\"],info);receiveInstance(instance);Module[\\\"wasmModule\\\"]=null;return instance.exports};function moduleLoaded(){}self.onmessage=function(e){try{if(e.data.cmd===\\\"load\\\"){Module[\\\"wasmModule\\\"]=e.data.wasmModule;Module[\\\"wasmMemory\\\"]=e.data.wasmMemory;Module[\\\"buffer\\\"]=Module[\\\"wasmMemory\\\"].buffer;Module[\\\"ENVIRONMENT_IS_PTHREAD\\\"]=true;if(typeof e.data.urlOrBlob===\\\"string\\\"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module).then(function(instance){Module=instance;moduleLoaded()})}else if(e.data.cmd===\\\"objectTransfer\\\"){Module[\\\"PThread\\\"].receiveObjectTransfer(e.data)}else if(e.data.cmd===\\\"run\\\"){Module[\\\"__performance_now_clock_drift\\\"]=performance.now()-e.data.time;Module[\\\"__emscripten_thread_init\\\"](e.data.threadInfoStruct,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0);var max=e.data.stackBase;var top=e.data.stackBase+e.data.stackSize;Module[\\\"establishStackSpace\\\"](top,max);Module[\\\"PThread\\\"].receiveObjectTransfer(e.data);Module[\\\"PThread\\\"].threadInit();try{var result=Module[\\\"invokeEntryPoint\\\"](e.data.start_routine,e.data.arg);if(Module[\\\"keepRuntimeAlive\\\"]()){Module[\\\"PThread\\\"].setExitStatus(result)}else{Module[\\\"PThread\\\"].threadExit(result)}}catch(ex){if(ex===\\\"Canceled!\\\"){Module[\\\"PThread\\\"].threadCancel()}else if(ex!=\\\"unwind\\\"){if(ex instanceof Module[\\\"ExitStatus\\\"]){if(Module[\\\"keepRuntimeAlive\\\"]()){}else{Module[\\\"PThread\\\"].threadExit(ex.status)}}else{Module[\\\"PThread\\\"].threadExit(-2);throw ex}}}}else if(e.data.cmd===\\\"cancel\\\"){if(Module[\\\"_pthread_self\\\"]()){Module[\\\"PThread\\\"].threadCancel()}}else if(e.data.target===\\\"setimmediate\\\"){}else if(e.data.cmd===\\\"processThreadQueue\\\"){if(Module[\\\"_pthread_self\\\"]()){Module[\\\"_emscripten_current_thread_process_queued_calls\\\"]()}}else{err(\\\"worker.js received unknown command \\\"+e.data.cmd);err(e.data)}}catch(ex){err(\\\"worker.js onmessage() captured an uncaught exception: \\\"+ex);if(ex&&ex.stack)err(ex.stack);throw ex}};\\r\\n\";\n\n/***/ }),\n\n/***/ \"./lib/wasm/binding/ort-wasm.js\":\n/*!**************************************!*\\\n  !*** ./lib/wasm/binding/ort-wasm.js ***!\n  \\**************************************/\n/***/ (function(module, __unused_webpack_exports, __webpack_require__) {\n\nvar __filename = \"/index.js\";\nvar __dirname = \"/\";\n\r\nvar ortWasm = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (true) _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\n\r\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,g;c.ready=new Promise(function(a,b){aa=a;g=b});var r={},t;for(t in c)c.hasOwnProperty(t)&&(r[t]=c[t]);var v=\"./this.program\",ba=\"object\"===typeof window,w=\"function\"===typeof importScripts,ca=\"object\"===typeof process&&\"object\"===typeof process.versions&&\"string\"===typeof process.versions.node,x=\"\",y,z,B,C,D;\r\nif(ca)x=w?__webpack_require__(/*! path */ \"?75c6\").dirname(x)+\"/\":__dirname+\"/\",y=function(a,b){C||(C=__webpack_require__(/*! fs */ \"?63c8\"));D||(D=__webpack_require__(/*! path */ \"?75c6\"));a=D.normalize(a);return C.readFileSync(a,b?null:\"utf8\")},B=function(a){a=y(a,!0);a.buffer||(a=new Uint8Array(a));a.buffer||E(\"Assertion failed: undefined\");return a},z=function(a,b,e){C||(C=__webpack_require__(/*! fs */ \"?63c8\"));D||(D=__webpack_require__(/*! path */ \"?75c6\"));a=D.normalize(a);C.readFile(a,function(f,h){f?e(f):b(h.buffer)})},1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",\r\nfunction(a){throw a;}),process.on(\"unhandledRejection\",E),c.inspect=function(){return\"[Emscripten Module object]\"};else if(ba||w)w?x=self.location.href:\"undefined\"!==typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.lastIndexOf(\"/\")+1):x=\"\",y=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},w&&(B=function(a){var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";\r\nb.send(null);return new Uint8Array(b.response)}),z=function(a,b,e){var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\"arraybuffer\";f.onload=function(){200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var da=c.print||console.log.bind(console),F=c.printErr||console.warn.bind(console);for(t in r)r.hasOwnProperty(t)&&(c[t]=r[t]);r=null;c.thisProgram&&(v=c.thisProgram);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!1;\r\n\"object\"!==typeof WebAssembly&&E(\"no native wasm support detected\");var I,ea=!1,fa=\"undefined\"!==typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\r\nfunction ha(a,b,e){var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.subarray&&fa)return fa.decode(a.subarray(b,e));for(f=\"\";b<e;){var h=a[b++];if(h&128){var k=a[b++]&63;if(192==(h&224))f+=String.fromCharCode((h&31)<<6|k);else{var l=a[b++]&63;h=224==(h&240)?(h&15)<<12|k<<6|l:(h&7)<<18|k<<12|l<<6|a[b++]&63;65536>h?f+=String.fromCharCode(h):(h-=65536,f+=String.fromCharCode(55296|h>>10,56320|h&1023))}}else f+=String.fromCharCode(h)}return f}function J(a,b){return a?ha(K,a,b):\"\"}\r\nfunction L(a,b,e,f){if(!(0<f))return 0;var h=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++]=l}else{if(2047>=l){if(e+1>=f)break;b[e++]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++]=224|l>>12}else{if(e+3>=f)break;b[e++]=240|l>>18;b[e++]=128|l>>12&63}b[e++]=128|l>>6&63}b[e++]=128|l&63}}b[e]=0;return e-h}\r\nfunction ia(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);55296<=f&&57343>=f&&(f=65536+((f&1023)<<10)|a.charCodeAt(++e)&1023);127>=f?++b:b=2047>=f?b+2:65535>=f?b+3:b+4}return b}function ja(a){var b=ia(a)+1,e=ka(b);e&&L(a,M,e,b);return e}var la,M,K,N;\r\nfunction ma(){var a=I.buffer;la=a;c.HEAP8=M=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=K=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var na,oa=[],pa=[],qa=[],ra=[];function sa(){var a=c.preRun.shift();oa.unshift(a)}var O=0,ta=null,P=null;c.preloadedImages={};c.preloadedAudios={};\r\nfunction E(a){if(c.onAbort)c.onAbort(a);F(a);ea=!0;a=new WebAssembly.RuntimeError(\"abort(\"+a+\"). Build with -s ASSERTIONS=1 for more info.\");g(a);throw a;}function ua(){return Q.startsWith(\"data:application/octet-stream;base64,\")}var Q;Q=\"ort-wasm.wasm\";if(!ua()){var va=Q;Q=c.locateFile?c.locateFile(va,x):x+va}function wa(){var a=Q;try{if(a==Q&&H)return new Uint8Array(H);if(B)return B(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){E(b)}}\r\nfunction xa(){if(!H&&(ba||w)){if(\"function\"===typeof fetch&&!Q.startsWith(\"file://\"))return fetch(Q,{credentials:\"same-origin\"}).then(function(a){if(!a.ok)throw\"failed to load wasm binary file at '\"+Q+\"'\";return a.arrayBuffer()}).catch(function(){return wa()});if(z)return new Promise(function(a,b){z(Q,function(e){a(new Uint8Array(e))},b)})}return Promise.resolve().then(function(){return wa()})}\r\nfunction ya(a){for(;0<a.length;){var b=a.shift();if(\"function\"==typeof b)b(c);else{var e=b.Ea;\"number\"===typeof e?void 0===b.xa?na.get(e)():na.get(e)(b.xa):e(void 0===b.xa?null:b.xa)}}}function za(a){this.ya=a-16;this.Na=function(b){N[this.ya+4>>2]=b};this.Ka=function(b){N[this.ya+8>>2]=b};this.La=function(){N[this.ya>>2]=0};this.Ja=function(){M[this.ya+12>>0]=0};this.Ma=function(){M[this.ya+13>>0]=0};this.Ga=function(b,e){this.Na(b);this.Ka(e);this.La();this.Ja();this.Ma()}}\r\nvar Aa=0,Ba={},Ca=[null,[],[]],R={},S;S=ca?function(){var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:function(){return performance.now()};var Da={};function Ea(){if(!Fa){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"===typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:v||\"./this.program\"},b;for(b in Da)void 0===Da[b]?delete a[b]:a[b]=Da[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Fa=e}return Fa}var Fa;\r\nfunction T(a,b){a=new Date(1E3*N[a>>2]);N[b>>2]=a.getUTCSeconds();N[b+4>>2]=a.getUTCMinutes();N[b+8>>2]=a.getUTCHours();N[b+12>>2]=a.getUTCDate();N[b+16>>2]=a.getUTCMonth();N[b+20>>2]=a.getUTCFullYear()-1900;N[b+24>>2]=a.getUTCDay();N[b+36>>2]=0;N[b+32>>2]=0;N[b+28>>2]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;T.Da||(T.Da=ja(\"GMT\"));N[b+40>>2]=T.Da;return b}\r\nfunction Ga(){function a(l){return(l=l.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?l[1]:\"GMT\"}if(!Ka){Ka=!0;var b=(new Date).getFullYear(),e=new Date(b,0,1),f=new Date(b,6,1);b=e.getTimezoneOffset();var h=f.getTimezoneOffset(),k=Math.max(b,h);N[La()>>2]=60*k;N[Ma()>>2]=Number(b!=h);e=a(e);f=a(f);e=ja(e);f=ja(f);h<b?(N[U()>>2]=e,N[U()+4>>2]=f):(N[U()>>2]=f,N[U()+4>>2]=e)}}var Ka;function V(a){return 0===a%4&&(0!==a%100||0===a%400)}function Na(a,b){for(var e=0,f=0;f<=b;e+=a[f++]);return e}\r\nvar W=[31,29,31,30,31,30,31,31,30,31,30,31],X=[31,28,31,30,31,30,31,31,30,31,30,31];function Y(a,b){for(a=new Date(a.getTime());0<b;){var e=a.getMonth(),f=(V(a.getFullYear())?W:X)[e];if(b>f-a.getDate())b-=f-a.getDate()+1,a.setDate(1),11>e?a.setMonth(e+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else{a.setDate(a.getDate()+b);break}}return a}\r\nfunction Oa(a,b,e,f){function h(d,m,n){for(d=\"number\"===typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return h(d,m,\"0\")}function l(d,m){function n(Ha){return 0>Ha?-1:0<Ha?1:0}var A;0===(A=n(d.getFullYear()-m.getFullYear()))&&0===(A=n(d.getMonth()-m.getMonth()))&&(A=n(d.getDate()-m.getDate()));return A}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\r\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function G(d){d=Y(new Date(d.va+1900,0,1),d.Ca);var m=new Date(d.getFullYear()+1,0,4),n=q(new Date(d.getFullYear(),0,4));m=q(m);return 0>=l(n,d)?0>=l(m,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2];f={Qa:N[f>>2],Pa:N[f+4>>2],Aa:N[f+8>>2],za:N[f+12>>2],wa:N[f+16>>2],va:N[f+20>>2],Ba:N[f+24>>2],Ca:N[f+28>>2],Ya:N[f+32>>2],Oa:N[f+\r\n36>>2],Ra:u?J(u):\"\"};e=J(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var p in u)e=e.replace(new RegExp(p,\"g\"),u[p]);var Ia=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),\r\nJa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return Ia[d.Ba].substring(0,3)},\"%A\":function(d){return Ia[d.Ba]},\"%b\":function(d){return Ja[d.wa].substring(0,3)},\"%B\":function(d){return Ja[d.wa]},\"%C\":function(d){return k((d.va+1900)/100|0,2)},\"%d\":function(d){return k(d.za,2)},\"%e\":function(d){return h(d.za,2,\" \")},\"%g\":function(d){return G(d).toString().substring(2)},\"%G\":function(d){return G(d)},\"%H\":function(d){return k(d.Aa,\r\n2)},\"%I\":function(d){d=d.Aa;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){return k(d.za+Na(V(d.va+1900)?W:X,d.wa-1),3)},\"%m\":function(d){return k(d.wa+1,2)},\"%M\":function(d){return k(d.Pa,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.Aa&&12>d.Aa?\"AM\":\"PM\"},\"%S\":function(d){return k(d.Qa,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.Ba||7},\"%U\":function(d){var m=new Date(d.va+1900,0,1),n=0===m.getDay()?m:Y(m,7-m.getDay());d=new Date(d.va+1900,d.wa,d.za);return 0>\r\nl(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%V\":function(d){var m=new Date(d.va+1901,0,4),n=q(new Date(d.va+1900,0,4));m=q(m);var A=Y(new Date(d.va+1900,0,1),d.Ca);return 0>l(A,n)?\"53\":0>=l(m,A)?\"01\":k(Math.ceil((n.getFullYear()<d.va+1900?d.Ca+32-n.getDate():d.Ca+1-n.getDate())/7),2)},\"%w\":function(d){return d.Ba},\"%W\":function(d){var m=new Date(d.va,0,1),n=1===m.getDay()?m:Y(m,0===m.getDay()?1:7-m.getDay()+1);d=new Date(d.va+\r\n1900,d.wa,d.za);return 0>l(n,d)?k(Math.ceil((31-n.getDate()+(Na(V(d.getFullYear())?W:X,d.getMonth()-1)-31)+d.getDate())/7),2):0===l(n,m)?\"01\":\"00\"},\"%y\":function(d){return(d.va+1900).toString().substring(2)},\"%Y\":function(d){return d.va+1900},\"%z\":function(d){d=d.Oa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.Ra},\"%%\":function(){return\"%\"}};for(p in u)e.includes(p)&&(e=e.replace(new RegExp(p,\"g\"),u[p](f)));p=Pa(e);if(p.length>b)return 0;\r\nM.set(p,a);return p.length-1}function Pa(a){var b=Array(ia(a)+1);L(a,b,0,b.length);return b}\r\nvar Ta={a:function(a){return ka(a+16)+16},c:function(a,b){qa.unshift({Ea:a,xa:b})},d:function(a,b){qa.unshift({Ea:a,xa:b})},b:function(a,b,e){(new za(a)).Ga(b,e);Aa++;throw a;},D:function(a,b){a=J(a);return R.Sa(a,b)},m:function(){return 0},I:function(){},L:function(){},o:function(){return 42},x:function(){return 0},H:function(){},G:function(a,b){a=J(a);return R.Ta(a,b)},K:function(a,b,e,f,h,k){k<<=12;if(0!==(f&16)&&0!==a%65536)b=-28;else if(0!==(f&32)){a=65536*Math.ceil(b/65536);var l=Qa(65536,a);\r\nl?(K.fill(0,l,l+a),a=l):a=0;a?(Ba[a]={Ia:a,Ha:b,Fa:!0,fd:h,Xa:e,flags:f,offset:k},b=a):b=-48}else b=-52;return b},J:function(a,b){var e=Ba[a];0!==b&&e?(b===e.Ha&&(Ba[a]=null,e.Fa&&Ra(e.Ia)),a=0):a=-28;return a},j:function(){},C:function(a,b,e){a=J(a);return R.Ua(a,b,e)},E:function(){},r:function(){},F:function(){},h:function(){E()},p:function(a,b){if(0===a)a=Date.now();else if(1===a||4===a)a=S();else return N[Sa()>>2]=28,-1;N[b>>2]=a/1E3|0;N[b+4>>2]=a%1E3*1E6|0;return 0},s:function(a,b){return a-\r\nb},P:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},g:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},Q:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},O:function(){E(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},\r\nM:function(){return 2147483648},v:function(a,b,e){K.copyWithin(a,b,b+e)},i:function(a){var b=K.length;a>>>=0;if(2147483648<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);f=Math.max(a,f);0<f%65536&&(f+=65536-f%65536);a:{try{I.grow(Math.min(2147483648,f)-la.byteLength+65535>>>16);ma();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},B:function(a){for(var b=S();S()-b<a;);},z:function(a,b){var e=0;Ea().forEach(function(f,h){var k=b+e;h=N[a+4*h>>2]=k;for(k=0;k<f.length;++k)M[h++>>\r\n0]=f.charCodeAt(k);M[h>>0]=0;e+=f.length+1});return 0},A:function(a,b){var e=Ea();N[a>>2]=e.length;var f=0;e.forEach(function(h){f+=h.length+1});N[b>>2]=f;return 0},f:function(){return 0},y:function(a,b){a=1==a||2==a?2:E();M[b>>0]=a;return 0},n:function(a,b,e,f){a=R.Wa(a);b=R.Va(a,b,e);N[f>>2]=b;return 0},u:function(){},q:function(a,b,e,f){for(var h=0,k=0;k<e;k++){for(var l=N[b+8*k>>2],q=N[b+(8*k+4)>>2],G=0;G<q;G++){var u=K[l+G],p=Ca[a];0===u||10===u?((1===a?da:F)(ha(p,0)),p.length=0):p.push(u)}h+=\r\nq}N[f>>2]=h;return 0},w:function(a){var b=Date.now();N[a>>2]=b/1E3|0;N[a+4>>2]=b%1E3*1E3|0;return 0},t:T,l:function(a,b){Ga();a=new Date(1E3*N[a>>2]);N[b>>2]=a.getSeconds();N[b+4>>2]=a.getMinutes();N[b+8>>2]=a.getHours();N[b+12>>2]=a.getDate();N[b+16>>2]=a.getMonth();N[b+20>>2]=a.getFullYear()-1900;N[b+24>>2]=a.getDay();var e=new Date(a.getFullYear(),0,1);N[b+28>>2]=(a.getTime()-e.getTime())/864E5|0;N[b+36>>2]=-(60*a.getTimezoneOffset());var f=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();e=\r\ne.getTimezoneOffset();a=(f!=e&&a.getTimezoneOffset()==Math.min(e,f))|0;N[b+32>>2]=a;a=N[U()+(a?4:0)>>2];N[b+40>>2]=a;return b},k:function(a){Ga();var b=new Date(N[a+20>>2]+1900,N[a+16>>2],N[a+12>>2],N[a+8>>2],N[a+4>>2],N[a>>2],0),e=N[a+32>>2],f=b.getTimezoneOffset(),h=new Date(b.getFullYear(),0,1),k=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),l=h.getTimezoneOffset(),q=Math.min(l,k);0>e?N[a+32>>2]=Number(k!=l&&q==f):0<e!=(q==f)&&(k=Math.max(l,k),b.setTime(b.getTime()+6E4*((0<e?q:k)-f)));N[a+\r\n24>>2]=b.getDay();N[a+28>>2]=(b.getTime()-h.getTime())/864E5|0;N[a>>2]=b.getSeconds();N[a+4>>2]=b.getMinutes();N[a+8>>2]=b.getHours();N[a+12>>2]=b.getDate();N[a+16>>2]=b.getMonth();return b.getTime()/1E3|0},N:Oa,e:function(a,b,e,f){return Oa(a,b,e,f)}};\r\n(function(){function a(h){c.asm=h.exports;I=c.asm.R;ma();na=c.asm.ua;pa.unshift(c.asm.S);O--;c.monitorRunDependencies&&c.monitorRunDependencies(O);0==O&&(null!==ta&&(clearInterval(ta),ta=null),P&&(h=P,P=null,h()))}function b(h){a(h.instance)}function e(h){return xa().then(function(k){return WebAssembly.instantiate(k,f)}).then(h,function(k){F(\"failed to asynchronously prepare wasm: \"+k);E(k)})}var f={a:Ta};O++;c.monitorRunDependencies&&c.monitorRunDependencies(O);if(c.instantiateWasm)try{return c.instantiateWasm(f,\r\na)}catch(h){return F(\"Module.instantiateWasm callback failed with error: \"+h),!1}(function(){return H||\"function\"!==typeof WebAssembly.instantiateStreaming||ua()||Q.startsWith(\"file://\")||\"function\"!==typeof fetch?e(b):fetch(Q,{credentials:\"same-origin\"}).then(function(h){return WebAssembly.instantiateStreaming(h,f).then(b,function(k){F(\"wasm streaming compile failed: \"+k);F(\"falling back to ArrayBuffer instantiation\");return e(b)})})})().catch(g);return{}})();\r\nc.___wasm_call_ctors=function(){return(c.___wasm_call_ctors=c.asm.S).apply(null,arguments)};c._OrtInit=function(){return(c._OrtInit=c.asm.T).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.U).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.V).apply(null,arguments)};c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.W).apply(null,arguments)};\r\nc._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.X).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Y).apply(null,arguments)};c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Z).apply(null,arguments)};c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm._).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.$).apply(null,arguments)};\r\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.aa).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.ba).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.ca).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.da).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.ea).apply(null,arguments)};\r\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.fa).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.ga).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ha).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ia).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.ja).apply(null,arguments)};\r\nvar ka=c._malloc=function(){return(ka=c._malloc=c.asm.ka).apply(null,arguments)},Sa=c.___errno_location=function(){return(Sa=c.___errno_location=c.asm.la).apply(null,arguments)},Ra=c._free=function(){return(Ra=c._free=c.asm.ma).apply(null,arguments)},U=c.__get_tzname=function(){return(U=c.__get_tzname=c.asm.na).apply(null,arguments)},Ma=c.__get_daylight=function(){return(Ma=c.__get_daylight=c.asm.oa).apply(null,arguments)},La=c.__get_timezone=function(){return(La=c.__get_timezone=c.asm.pa).apply(null,\r\narguments)},Ua=c.stackSave=function(){return(Ua=c.stackSave=c.asm.qa).apply(null,arguments)},Va=c.stackRestore=function(){return(Va=c.stackRestore=c.asm.ra).apply(null,arguments)},Wa=c.stackAlloc=function(){return(Wa=c.stackAlloc=c.asm.sa).apply(null,arguments)},Qa=c._memalign=function(){return(Qa=c._memalign=c.asm.ta).apply(null,arguments)};c.UTF8ToString=J;c.stringToUTF8=function(a,b,e){return L(a,K,b,e)};c.lengthBytesUTF8=ia;c.stackSave=Ua;c.stackRestore=Va;c.stackAlloc=Wa;var Z;\r\nP=function Xa(){Z||Ya();Z||(P=Xa)};\r\nfunction Ya(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!ea)){ya(pa);aa(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ra.unshift(b)}ya(ra)}}if(!(0<O)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)sa();ya(oa);0<O||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}c.run=Ya;\r\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ya();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (true)\r\n  module.exports = ortWasm;\r\nelse {}\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/options-utils.ts\":\n/*!***********************************!*\\\n  !*** ./lib/wasm/options-utils.ts ***!\n  \\***********************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\"use strict\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.iterateExtraOptions = void 0;\r\nvar iterateExtraOptions = function (options, prefix, seen, handler) {\r\n    if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n            throw new Error('Circular reference in options');\r\n        }\r\n        else {\r\n            seen.add(options);\r\n        }\r\n    }\r\n    Object.entries(options).forEach(function (_a) {\r\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\r\n        var name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n            exports.iterateExtraOptions(value, name + '.', seen, handler);\r\n        }\r\n        else if (typeof value === 'string' || typeof value === 'number') {\r\n            handler(name, value.toString());\r\n        }\r\n        else if (typeof value === 'boolean') {\r\n            handler(name, (value) ? '1' : '0');\r\n        }\r\n        else {\r\n            throw new Error(\"Can't handle extra config type: \" + typeof value);\r\n        }\r\n    });\r\n};\r\nexports.iterateExtraOptions = iterateExtraOptions;\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/run-options.ts\":\n/*!*********************************!*\\\n  !*** ./lib/wasm/run-options.ts ***!\n  \\*********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setRunOptions = void 0;\r\nvar options_utils_1 = __webpack_require__(/*! ./options-utils */ \"./lib/wasm/options-utils.ts\");\r\nvar string_utils_1 = __webpack_require__(/*! ./string-utils */ \"./lib/wasm/string-utils.ts\");\r\nvar wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ \"./lib/wasm/wasm-factory.ts\");\r\nvar setRunOptions = function (options) {\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var runOptionsHandle = 0;\r\n    var allocs = [];\r\n    var runOptions = options || {};\r\n    try {\r\n        if ((options === null || options === void 0 ? void 0 : options.logSeverityLevel) === undefined) {\r\n            runOptions.logSeverityLevel = 2; // Default to warning\r\n        }\r\n        else if (typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n            options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n            throw new Error(\"log serverity level is not valid: \" + options.logSeverityLevel);\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.logVerbosityLevel) === undefined) {\r\n            runOptions.logVerbosityLevel = 0; // Default to 0\r\n        }\r\n        else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n            throw new Error(\"log verbosity level is not valid: \" + options.logVerbosityLevel);\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.terminate) === undefined) {\r\n            runOptions.terminate = false;\r\n        }\r\n        var tagDataOffset = 0;\r\n        if ((options === null || options === void 0 ? void 0 : options.tag) !== undefined) {\r\n            tagDataOffset = string_utils_1.allocWasmString(options.tag, allocs);\r\n        }\r\n        runOptionsHandle = wasm._OrtCreateRunOptions(runOptions.logSeverityLevel, runOptions.logVerbosityLevel, !!runOptions.terminate, tagDataOffset);\r\n        if (runOptionsHandle === 0) {\r\n            throw new Error('Can\\'t create run options');\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.extra) !== undefined) {\r\n            options_utils_1.iterateExtraOptions(options.extra, '', new WeakSet(), function (key, value) {\r\n                var keyDataOffset = string_utils_1.allocWasmString(key, allocs);\r\n                var valueDataOffset = string_utils_1.allocWasmString(value, allocs);\r\n                if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n                    throw new Error(\"Can't set a run config entry: \" + key + \" - \" + value);\r\n                }\r\n            });\r\n        }\r\n        return [runOptionsHandle, allocs];\r\n    }\r\n    catch (e) {\r\n        if (runOptionsHandle !== 0) {\r\n            wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n        }\r\n        allocs.forEach(wasm._free);\r\n        throw e;\r\n    }\r\n};\r\nexports.setRunOptions = setRunOptions;\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/session-options.ts\":\n/*!*************************************!*\\\n  !*** ./lib/wasm/session-options.ts ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setSessionOptions = void 0;\r\nvar options_utils_1 = __webpack_require__(/*! ./options-utils */ \"./lib/wasm/options-utils.ts\");\r\nvar string_utils_1 = __webpack_require__(/*! ./string-utils */ \"./lib/wasm/string-utils.ts\");\r\nvar wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ \"./lib/wasm/wasm-factory.ts\");\r\nvar getGraphOptimzationLevel = function (graphOptimizationLevel) {\r\n    switch (graphOptimizationLevel) {\r\n        case 'disabled':\r\n            return 0;\r\n        case 'basic':\r\n            return 1;\r\n        case 'extended':\r\n            return 2;\r\n        case 'all':\r\n            return 99;\r\n        default:\r\n            throw new Error(\"unsupported graph optimization level: \" + graphOptimizationLevel);\r\n    }\r\n};\r\nvar getExecutionMode = function (executionMode) {\r\n    switch (executionMode) {\r\n        case 'sequential':\r\n            return 0;\r\n        case 'parallel':\r\n            return 1;\r\n        default:\r\n            throw new Error(\"unsupported execution mode: \" + executionMode);\r\n    }\r\n};\r\nvar appendDefaultOptions = function (options) {\r\n    if (!options.extra) {\r\n        options.extra = {};\r\n    }\r\n    if (!options.extra.session) {\r\n        options.extra.session = {};\r\n    }\r\n    var session = options.extra.session;\r\n    if (!session.use_ort_model_bytes_directly) {\r\n        // eslint-disable-next-line camelcase\r\n        session.use_ort_model_bytes_directly = '1';\r\n    }\r\n};\r\nvar setSessionOptions = function (options) {\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var sessionOptionsHandle = 0;\r\n    var allocs = [];\r\n    var sessionOptions = options || {};\r\n    appendDefaultOptions(sessionOptions);\r\n    try {\r\n        if ((options === null || options === void 0 ? void 0 : options.graphOptimizationLevel) === undefined) {\r\n            sessionOptions.graphOptimizationLevel = 'all';\r\n        }\r\n        var graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel);\r\n        if ((options === null || options === void 0 ? void 0 : options.enableCpuMemArena) === undefined) {\r\n            sessionOptions.enableCpuMemArena = true;\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.enableMemPattern) === undefined) {\r\n            sessionOptions.enableMemPattern = true;\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.executionMode) === undefined) {\r\n            sessionOptions.executionMode = 'sequential';\r\n        }\r\n        var executionMode = getExecutionMode(sessionOptions.executionMode);\r\n        var logIdDataOffset = 0;\r\n        if ((options === null || options === void 0 ? void 0 : options.logId) !== undefined) {\r\n            logIdDataOffset = string_utils_1.allocWasmString(options.logId, allocs);\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.logSeverityLevel) === undefined) {\r\n            sessionOptions.logSeverityLevel = 2; // Default to warning\r\n        }\r\n        else if (typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n            options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n            throw new Error(\"log serverity level is not valid: \" + options.logSeverityLevel);\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.logVerbosityLevel) === undefined) {\r\n            sessionOptions.logVerbosityLevel = 0; // Default to 0\r\n        }\r\n        else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n            throw new Error(\"log verbosity level is not valid: \" + options.logVerbosityLevel);\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.enableProfiling) === undefined) {\r\n            sessionOptions.enableProfiling = false;\r\n        }\r\n        sessionOptionsHandle = wasm._OrtCreateSessionOptions(graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode, !!sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel, sessionOptions.logVerbosityLevel);\r\n        if (sessionOptionsHandle === 0) {\r\n            throw new Error('Can\\'t create session options');\r\n        }\r\n        if ((options === null || options === void 0 ? void 0 : options.extra) !== undefined) {\r\n            options_utils_1.iterateExtraOptions(options.extra, '', new WeakSet(), function (key, value) {\r\n                var keyDataOffset = string_utils_1.allocWasmString(key, allocs);\r\n                var valueDataOffset = string_utils_1.allocWasmString(value, allocs);\r\n                if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n                    throw new Error(\"Can't set a session config entry: \" + key + \" - \" + value);\r\n                }\r\n            });\r\n        }\r\n        return [sessionOptionsHandle, allocs];\r\n    }\r\n    catch (e) {\r\n        if (sessionOptionsHandle !== 0) {\r\n            wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        }\r\n        allocs.forEach(wasm._free);\r\n        throw e;\r\n    }\r\n};\r\nexports.setSessionOptions = setSessionOptions;\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/string-utils.ts\":\n/*!**********************************!*\\\n  !*** ./lib/wasm/string-utils.ts ***!\n  \\**********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.allocWasmString = void 0;\r\nvar wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ \"./lib/wasm/wasm-factory.ts\");\r\nvar allocWasmString = function (data, allocs) {\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n    var dataOffset = wasm._malloc(dataLength);\r\n    wasm.stringToUTF8(data, dataOffset, dataLength);\r\n    allocs.push(dataOffset);\r\n    return dataOffset;\r\n};\r\nexports.allocWasmString = allocWasmString;\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/wasm-core-impl.ts\":\n/*!************************************!*\\\n  !*** ./lib/wasm/wasm-core-impl.ts ***!\n  \\************************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.extractTransferableBuffers = exports.endProfiling = exports.run = exports.releaseSession = exports.createSession = exports.initOrt = void 0;\r\nvar run_options_1 = __webpack_require__(/*! ./run-options */ \"./lib/wasm/run-options.ts\");\r\nvar session_options_1 = __webpack_require__(/*! ./session-options */ \"./lib/wasm/session-options.ts\");\r\nvar string_utils_1 = __webpack_require__(/*! ./string-utils */ \"./lib/wasm/string-utils.ts\");\r\nvar wasm_factory_1 = __webpack_require__(/*! ./wasm-factory */ \"./lib/wasm/wasm-factory.ts\");\r\n/**\r\n * initialize ORT environment.\r\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\r\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\r\n */\r\nvar initOrt = function (numThreads, loggingLevel) {\r\n    var errorCode = wasm_factory_1.getInstance()._OrtInit(numThreads, loggingLevel);\r\n    if (errorCode !== 0) {\r\n        throw new Error(\"Can't initialize onnxruntime. error code = \" + errorCode);\r\n    }\r\n};\r\nexports.initOrt = initOrt;\r\nvar activeSessions = [];\r\n/**\r\n * create an instance of InferenceSession.\r\n * @returns the metadata of InferenceSession. 0-value handle for failure.\r\n */\r\nvar createSession = function (model, options) {\r\n    var _a;\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var modelDataOffset = wasm._malloc(model.byteLength);\r\n    var sessionHandle = 0;\r\n    var sessionOptionsHandle = 0;\r\n    var allocs = [];\r\n    try {\r\n        _a = __read(session_options_1.setSessionOptions(options), 2), sessionOptionsHandle = _a[0], allocs = _a[1];\r\n        wasm.HEAPU8.set(model, modelDataOffset);\r\n        sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\r\n        if (sessionHandle === 0) {\r\n            throw new Error('Can\\'t create a session');\r\n        }\r\n    }\r\n    finally {\r\n        wasm._free(modelDataOffset);\r\n        wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n        allocs.forEach(wasm._free);\r\n    }\r\n    var inputCount = wasm._OrtGetInputCount(sessionHandle);\r\n    var outputCount = wasm._OrtGetOutputCount(sessionHandle);\r\n    var inputNames = [];\r\n    var inputNamesUTF8Encoded = [];\r\n    var outputNames = [];\r\n    var outputNamesUTF8Encoded = [];\r\n    for (var i = 0; i < inputCount; i++) {\r\n        var name_1 = wasm._OrtGetInputName(sessionHandle, i);\r\n        if (name_1 === 0) {\r\n            throw new Error('Can\\'t get an input name');\r\n        }\r\n        inputNamesUTF8Encoded.push(name_1);\r\n        inputNames.push(wasm.UTF8ToString(name_1));\r\n    }\r\n    for (var i = 0; i < outputCount; i++) {\r\n        var name_2 = wasm._OrtGetOutputName(sessionHandle, i);\r\n        if (name_2 === 0) {\r\n            throw new Error('Can\\'t get an output name');\r\n        }\r\n        outputNamesUTF8Encoded.push(name_2);\r\n        outputNames.push(wasm.UTF8ToString(name_2));\r\n    }\r\n    activeSessions.push([sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\r\n    return [activeSessions.length - 1, inputNames, outputNames];\r\n};\r\nexports.createSession = createSession;\r\nvar releaseSession = function (sessionId) {\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var session = activeSessions[sessionId];\r\n    if (!session) {\r\n        throw new Error('invalid session id');\r\n    }\r\n    var sessionHandle = session[0];\r\n    var inputNamesUTF8Encoded = session[1];\r\n    var outputNamesUTF8Encoded = session[2];\r\n    inputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n    outputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n    wasm._OrtReleaseSession(sessionHandle);\r\n    activeSessions[sessionId] = undefined;\r\n};\r\nexports.releaseSession = releaseSession;\r\nvar tensorDataTypeStringToEnum = function (type) {\r\n    switch (type) {\r\n        case 'int8':\r\n            return 3 /* int8 */;\r\n        case 'uint8':\r\n            return 2 /* uint8 */;\r\n        case 'bool':\r\n            return 9 /* bool */;\r\n        case 'int16':\r\n            return 5 /* int16 */;\r\n        case 'uint16':\r\n            return 4 /* uint16 */;\r\n        case 'int32':\r\n            return 6 /* int32 */;\r\n        case 'uint32':\r\n            return 12 /* uint32 */;\r\n        case 'float32':\r\n            return 1 /* float */;\r\n        case 'float64':\r\n            return 11 /* double */;\r\n        case 'string':\r\n            return 8 /* string */;\r\n        case 'int64':\r\n            return 7 /* int64 */;\r\n        case 'uint64':\r\n            return 13 /* uint64 */;\r\n        default:\r\n            throw new Error(\"unsupported data type: \" + type);\r\n    }\r\n};\r\nvar tensorDataTypeEnumToString = function (typeProto) {\r\n    switch (typeProto) {\r\n        case 3 /* int8 */:\r\n            return 'int8';\r\n        case 2 /* uint8 */:\r\n            return 'uint8';\r\n        case 9 /* bool */:\r\n            return 'bool';\r\n        case 5 /* int16 */:\r\n            return 'int16';\r\n        case 4 /* uint16 */:\r\n            return 'uint16';\r\n        case 6 /* int32 */:\r\n            return 'int32';\r\n        case 12 /* uint32 */:\r\n            return 'uint32';\r\n        case 1 /* float */:\r\n            return 'float32';\r\n        case 11 /* double */:\r\n            return 'float64';\r\n        case 8 /* string */:\r\n            return 'string';\r\n        case 7 /* int64 */:\r\n            return 'int32';\r\n        case 13 /* uint64 */:\r\n            return 'uint32';\r\n        default:\r\n            throw new Error(\"unsupported data type: \" + typeProto);\r\n    }\r\n};\r\nvar numericTensorTypeToTypedArray = function (type) {\r\n    switch (type) {\r\n        case 'float32':\r\n            return Float32Array;\r\n        case 'uint8':\r\n            return Uint8Array;\r\n        case 'int8':\r\n            return Int8Array;\r\n        case 'uint16':\r\n            return Uint16Array;\r\n        case 'int16':\r\n            return Int16Array;\r\n        case 'int32':\r\n            return Int32Array;\r\n        case 'bool':\r\n            return Uint8Array;\r\n        case 'float64':\r\n            return Float64Array;\r\n        case 'uint32':\r\n            return Uint32Array;\r\n        case 'int64':\r\n            return BigInt64Array;\r\n        case 'uint64':\r\n            return BigUint64Array;\r\n        default:\r\n            throw new Error(\"unsupported type: \" + type);\r\n    }\r\n};\r\n/**\r\n * perform inference run\r\n */\r\nvar run = function (sessionId, inputIndices, inputs, outputIndices, options) {\r\n    var _a;\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var session = activeSessions[sessionId];\r\n    if (!session) {\r\n        throw new Error('invalid session id');\r\n    }\r\n    var sessionHandle = session[0];\r\n    var inputNamesUTF8Encoded = session[1];\r\n    var outputNamesUTF8Encoded = session[2];\r\n    var inputCount = inputIndices.length;\r\n    var outputCount = outputIndices.length;\r\n    var runOptionsHandle = 0;\r\n    var runOptionsAllocs = [];\r\n    var inputValues = [];\r\n    var inputAllocs = [];\r\n    try {\r\n        _a = __read(run_options_1.setRunOptions(options), 2), runOptionsHandle = _a[0], runOptionsAllocs = _a[1];\r\n        var _loop_1 = function (i) {\r\n            var dataType = inputs[i][0];\r\n            var dims = inputs[i][1];\r\n            var data = inputs[i][2];\r\n            var dataOffset = void 0;\r\n            var dataByteLength = void 0;\r\n            if (Array.isArray(data)) {\r\n                // string tensor\r\n                dataByteLength = 4 * data.length;\r\n                dataOffset = wasm._malloc(dataByteLength);\r\n                inputAllocs.push(dataOffset);\r\n                var dataIndex = dataOffset / 4;\r\n                for (var i_1 = 0; i_1 < data.length; i_1++) {\r\n                    if (typeof data[i_1] !== 'string') {\r\n                        throw new TypeError(\"tensor data at index \" + i_1 + \" is not a string\");\r\n                    }\r\n                    wasm.HEAPU32[dataIndex++] = string_utils_1.allocWasmString(data[i_1], inputAllocs);\r\n                }\r\n            }\r\n            else {\r\n                dataByteLength = data.byteLength;\r\n                dataOffset = wasm._malloc(dataByteLength);\r\n                inputAllocs.push(dataOffset);\r\n                wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\r\n            }\r\n            var stack = wasm.stackSave();\r\n            var dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n            try {\r\n                var dimIndex_1 = dimsOffset / 4;\r\n                dims.forEach(function (d) { return wasm.HEAP32[dimIndex_1++] = d; });\r\n                var tensor = wasm._OrtCreateTensor(tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\r\n                if (tensor === 0) {\r\n                    throw new Error('Can\\'t create a tensor');\r\n                }\r\n                inputValues.push(tensor);\r\n            }\r\n            finally {\r\n                wasm.stackRestore(stack);\r\n            }\r\n        };\r\n        // create input tensors\r\n        for (var i = 0; i < inputCount; i++) {\r\n            _loop_1(i);\r\n        }\r\n        var beforeRunStack = wasm.stackSave();\r\n        var inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n        var inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n        var outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n        var outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n        try {\r\n            var inputValuesIndex = inputValuesOffset / 4;\r\n            var inputNamesIndex = inputNamesOffset / 4;\r\n            var outputValuesIndex = outputValuesOffset / 4;\r\n            var outputNamesIndex = outputNamesOffset / 4;\r\n            for (var i = 0; i < inputCount; i++) {\r\n                wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n                wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\r\n            }\r\n            for (var i = 0; i < outputCount; i++) {\r\n                wasm.HEAPU32[outputValuesIndex++] = 0;\r\n                wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\r\n            }\r\n            // support RunOptions\r\n            var errorCode = wasm._OrtRun(sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount, outputValuesOffset, runOptionsHandle);\r\n            var output = [];\r\n            if (errorCode === 0) {\r\n                for (var i = 0; i < outputCount; i++) {\r\n                    var tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n                    var beforeGetTensorDataStack = wasm.stackSave();\r\n                    // stack allocate 4 pointer value\r\n                    var tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n                    var type = void 0, dataOffset = 0;\r\n                    try {\r\n                        errorCode = wasm._OrtGetTensorData(tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n                        if (errorCode !== 0) {\r\n                            throw new Error(\"Can't get a tensor data. error code = \" + errorCode);\r\n                        }\r\n                        var tensorDataIndex = tensorDataOffset / 4;\r\n                        var dataType = wasm.HEAPU32[tensorDataIndex++];\r\n                        dataOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                        var dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n                        var dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n                        var dims = [];\r\n                        for (var i_2 = 0; i_2 < dimsLength; i_2++) {\r\n                            dims.push(wasm.HEAPU32[dimsOffset / 4 + i_2]);\r\n                        }\r\n                        wasm._OrtFree(dimsOffset);\r\n                        var size = dims.length === 0 ? 1 : dims.reduce(function (a, b) { return a * b; });\r\n                        type = tensorDataTypeEnumToString(dataType);\r\n                        if (type === 'string') {\r\n                            var stringData = [];\r\n                            var dataIndex = dataOffset / 4;\r\n                            for (var i_3 = 0; i_3 < size; i_3++) {\r\n                                var offset = wasm.HEAPU32[dataIndex++];\r\n                                var maxBytesToRead = i_3 === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\r\n                                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\r\n                            }\r\n                            output.push([type, dims, stringData]);\r\n                        }\r\n                        else {\r\n                            var typedArrayConstructor = numericTensorTypeToTypedArray(type);\r\n                            var data = new typedArrayConstructor(size);\r\n                            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\r\n                                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\r\n                            output.push([type, dims, data]);\r\n                        }\r\n                    }\r\n                    finally {\r\n                        wasm.stackRestore(beforeGetTensorDataStack);\r\n                        if (type === 'string' && dataOffset) {\r\n                            wasm._free(dataOffset);\r\n                        }\r\n                        wasm._OrtReleaseTensor(tensor);\r\n                    }\r\n                }\r\n            }\r\n            if (errorCode === 0) {\r\n                return output;\r\n            }\r\n            else {\r\n                throw new Error(\"failed to call OrtRun(). error code = \" + errorCode + \".\");\r\n            }\r\n        }\r\n        finally {\r\n            wasm.stackRestore(beforeRunStack);\r\n        }\r\n    }\r\n    finally {\r\n        inputValues.forEach(wasm._OrtReleaseTensor);\r\n        inputAllocs.forEach(wasm._free);\r\n        wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n        runOptionsAllocs.forEach(wasm._free);\r\n    }\r\n};\r\nexports.run = run;\r\n/**\r\n * end profiling\r\n */\r\nvar endProfiling = function (sessionId) {\r\n    var wasm = wasm_factory_1.getInstance();\r\n    var session = activeSessions[sessionId];\r\n    if (!session) {\r\n        throw new Error('invalid session id');\r\n    }\r\n    var sessionHandle = session[0];\r\n    // profile file name is not used yet, but it must be freed.\r\n    var profileFileName = wasm._OrtEndProfiling(sessionHandle);\r\n    if (profileFileName === 0) {\r\n        throw new Error('Can\\'t get an profile file name');\r\n    }\r\n    wasm._OrtFree(profileFileName);\r\n};\r\nexports.endProfiling = endProfiling;\r\nvar extractTransferableBuffers = function (tensors) {\r\n    var e_1, _a;\r\n    var buffers = [];\r\n    try {\r\n        for (var tensors_1 = __values(tensors), tensors_1_1 = tensors_1.next(); !tensors_1_1.done; tensors_1_1 = tensors_1.next()) {\r\n            var tensor = tensors_1_1.value;\r\n            var data = tensor[2];\r\n            if (!Array.isArray(data) && data.buffer) {\r\n                buffers.push(data.buffer);\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (tensors_1_1 && !tensors_1_1.done && (_a = tensors_1.return)) _a.call(tensors_1);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return buffers;\r\n};\r\nexports.extractTransferableBuffers = extractTransferableBuffers;\r\n\n\n/***/ }),\n\n/***/ \"./lib/wasm/wasm-factory.ts\":\n/*!**********************************!*\\\n  !*** ./lib/wasm/wasm-factory.ts ***!\n  \\**********************************/\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __dirname = \"/\";\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.dispose = exports.getInstance = exports.initializeWebAssembly = void 0;\r\nvar path = __importStar(__webpack_require__(/*! path */ \"?7aa5\"));\r\nvar ort_wasm_threaded_js_1 = __importDefault(__webpack_require__(/*! ./binding/ort-wasm-threaded.js */ \"./lib/wasm/binding/ort-wasm-threaded.js\"));\r\nvar ort_wasm_js_1 = __importDefault(__webpack_require__(/*! ./binding/ort-wasm.js */ \"./lib/wasm/binding/ort-wasm.js\"));\r\nvar wasm;\r\nvar initialized = false;\r\nvar initializing = false;\r\nvar aborted = false;\r\nvar isMultiThreadSupported = function () {\r\n    try {\r\n        // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\r\n        if (typeof SharedArrayBuffer === 'undefined') {\r\n            return false;\r\n        }\r\n        // Test for transferability of SABs (for browsers. needed for Firefox)\r\n        // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n        if (typeof MessageChannel !== 'undefined') {\r\n            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n        }\r\n        // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n        // This typed array is a WebAssembly program containing threaded instructions.\r\n        return WebAssembly.validate(new Uint8Array([\r\n            0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5,\r\n            4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11\r\n        ]));\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nvar isSimdSupported = function () {\r\n    try {\r\n        // Test for WebAssembly SIMD capability (for both browsers and Node.js)\r\n        // This typed array is a WebAssembly program containing SIMD instructions.\r\n        return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nvar getWasmFileName = function (useSimd, useThreads) {\r\n    if (useThreads) {\r\n        return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\r\n    }\r\n    else {\r\n        return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\r\n    }\r\n};\r\nvar initializeWebAssembly = function (flags) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var timeout, numThreads, simd, useThreads, useSimd, wasmPrefixOverride, wasmFileName, wasmOverrideFileName, wasmPathOverride, isTimeout, tasks;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                if (initialized) {\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                }\r\n                if (initializing) {\r\n                    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n                }\r\n                if (aborted) {\r\n                    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n                }\r\n                initializing = true;\r\n                timeout = flags.initTimeout;\r\n                numThreads = flags.numThreads;\r\n                simd = flags.simd;\r\n                useThreads = numThreads > 1 && isMultiThreadSupported();\r\n                useSimd = simd && isSimdSupported();\r\n                wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\r\n                wasmFileName = getWasmFileName(false, useThreads);\r\n                wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\r\n                wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\r\n                isTimeout = false;\r\n                tasks = [];\r\n                // promise for timeout\r\n                if (timeout > 0) {\r\n                    tasks.push(new Promise(function (resolve) {\r\n                        setTimeout(function () {\r\n                            isTimeout = true;\r\n                            resolve();\r\n                        }, timeout);\r\n                    }));\r\n                }\r\n                // promise for module initialization\r\n                tasks.push(new Promise(function (resolve, reject) {\r\n                    var factory = useThreads ? ort_wasm_threaded_js_1.default : ort_wasm_js_1.default;\r\n                    var config = {\r\n                        locateFile: function (fileName, scriptDirectory) {\r\n                            if (fileName.endsWith('.worker.js') && typeof Blob !== 'undefined') {\r\n                                return URL.createObjectURL(new Blob([\r\n                                    // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                                    // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                                    __webpack_require__(/*! ./binding/ort-wasm-threaded.worker.js */ \"./lib/wasm/binding/ort-wasm-threaded.worker.js\")\r\n                                ], { type: 'text/javascript' }));\r\n                            }\r\n                            if (fileName === wasmFileName) {\r\n                                var prefix = wasmPrefixOverride !== null && wasmPrefixOverride !== void 0 ? wasmPrefixOverride : scriptDirectory;\r\n                                return wasmPathOverride !== null && wasmPathOverride !== void 0 ? wasmPathOverride : prefix + wasmOverrideFileName;\r\n                            }\r\n                            return scriptDirectory + fileName;\r\n                        }\r\n                    };\r\n                    if (useThreads) {\r\n                        if (typeof Blob === 'undefined') {\r\n                            config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n                        }\r\n                        else {\r\n                            var scriptSourceCode = \"var ortWasmThreaded=(function(){var _scriptDir;return \" + ort_wasm_threaded_js_1.default.toString() + \"})();\";\r\n                            config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: 'text/javascript' });\r\n                        }\r\n                    }\r\n                    factory(config).then(\r\n                    // wasm module initialized successfully\r\n                    function (module) {\r\n                        initializing = false;\r\n                        initialized = true;\r\n                        wasm = module;\r\n                        resolve();\r\n                    }, \r\n                    // wasm module failed to initialize\r\n                    function (what) {\r\n                        initializing = false;\r\n                        aborted = true;\r\n                        reject(what);\r\n                    });\r\n                }));\r\n                return [4 /*yield*/, Promise.race(tasks)];\r\n            case 1:\r\n                _a.sent();\r\n                if (isTimeout) {\r\n                    throw new Error(\"WebAssembly backend initializing failed due to timeout: \" + timeout + \"ms\");\r\n                }\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexports.initializeWebAssembly = initializeWebAssembly;\r\nvar getInstance = function () {\r\n    if (initialized && wasm) {\r\n        return wasm;\r\n    }\r\n    throw new Error('WebAssembly is not initialized yet.');\r\n};\r\nexports.getInstance = getInstance;\r\nvar dispose = function () {\r\n    var _a;\r\n    if (initialized && !initializing && !aborted) {\r\n        initializing = true;\r\n        (_a = wasm.PThread) === null || _a === void 0 ? void 0 : _a.terminateAllThreads();\r\n        wasm = undefined;\r\n        initializing = false;\r\n        initialized = false;\r\n        aborted = true;\r\n    }\r\n};\r\nexports.dispose = dispose;\r\n\n\n/***/ }),\n\n/***/ \"?63c8\":\n/*!********************!*\\\n  !*** fs (ignored) ***!\n  \\********************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"?aedb\":\n/*!********************!*\\\n  !*** os (ignored) ***!\n  \\********************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"?75c6\":\n/*!**********************!*\\\n  !*** path (ignored) ***!\n  \\**********************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"?674f\":\n/*!****************************!*\\\n  !*** perf_hooks (ignored) ***!\n  \\****************************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"?c6f7\":\n/*!********************************!*\\\n  !*** worker_threads (ignored) ***!\n  \\********************************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ \"?7aa5\":\n/*!**********************!*\\\n  !*** path (ignored) ***!\n  \\**********************/\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/global */\n/******/ \t!function() {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be in strict mode.\n!function() {\n\"use strict\";\nvar exports = __webpack_exports__;\n/*!*****************************************************************************************************!*\\\n  !*** ./node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[0]!./lib/wasm/proxy-worker/main.ts ***!\n  \\*****************************************************************************************************/\n\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar wasm_core_impl_1 = __webpack_require__(/*! ../wasm-core-impl */ \"./lib/wasm/wasm-core-impl.ts\");\r\nvar wasm_factory_1 = __webpack_require__(/*! ../wasm-factory */ \"./lib/wasm/wasm-factory.ts\");\r\nself.onmessage = function (ev) {\r\n    switch (ev.data.type) {\r\n        case 'init-wasm':\r\n            wasm_factory_1.initializeWebAssembly(ev.data.in)\r\n                .then(function () { return postMessage({ type: 'init-wasm' }); }, function (err) { return postMessage({ type: 'init-wasm', err: err }); });\r\n            break;\r\n        case 'init-ort':\r\n            try {\r\n                var _a = ev.data.in, numThreads = _a.numThreads, loggingLevel = _a.loggingLevel;\r\n                wasm_core_impl_1.initOrt(numThreads, loggingLevel);\r\n                postMessage({ type: 'init-ort' });\r\n            }\r\n            catch (err) {\r\n                postMessage({ type: 'init-ort', err: err });\r\n            }\r\n            break;\r\n        case 'create':\r\n            try {\r\n                var _b = ev.data.in, model = _b.model, options = _b.options;\r\n                var sessionMetadata = wasm_core_impl_1.createSession(model, options);\r\n                postMessage({ type: 'create', out: sessionMetadata });\r\n            }\r\n            catch (err) {\r\n                postMessage({ type: 'create', err: err });\r\n            }\r\n            break;\r\n        case 'release':\r\n            try {\r\n                var handler = ev.data.in;\r\n                wasm_core_impl_1.releaseSession(handler);\r\n                postMessage({ type: 'release' });\r\n            }\r\n            catch (err) {\r\n                postMessage({ type: 'release', err: err });\r\n            }\r\n            break;\r\n        case 'run':\r\n            try {\r\n                var _c = ev.data.in, sessionId = _c.sessionId, inputIndices = _c.inputIndices, inputs = _c.inputs, outputIndices = _c.outputIndices, options = _c.options;\r\n                var outputs = wasm_core_impl_1.run(sessionId, inputIndices, inputs, outputIndices, options);\r\n                postMessage({ type: 'run', out: outputs }, wasm_core_impl_1.extractTransferableBuffers(outputs));\r\n            }\r\n            catch (err) {\r\n                postMessage({ type: 'run', err: err });\r\n            }\r\n            break;\r\n        case 'end-profiling':\r\n            try {\r\n                var handler = ev.data.in;\r\n                wasm_core_impl_1.endProfiling(handler);\r\n                postMessage({ type: 'end-profiling' });\r\n            }\r\n            catch (err) {\r\n                postMessage({ type: 'end-profiling', err: err });\r\n            }\r\n            break;\r\n        default:\r\n    }\r\n};\r\n\n}();\n/******/ })()\n;\n", "Worker", undefined, undefined);
}


/***/ }),

/***/ "./node_modules/worker-loader/dist/runtime/inline.js":
/*!***********************************************************!*\
  !*** ./node_modules/worker-loader/dist/runtime/inline.js ***!
  \***********************************************************/
/***/ (function(module) {

"use strict";


/* eslint-env browser */

/* eslint-disable no-undef, no-use-before-define, new-cap */
module.exports = function (content, workerConstructor, workerOptions, url) {
  var globalScope = self || window;

  try {
    try {
      var blob;

      try {
        // New API
        blob = new globalScope.Blob([content]);
      } catch (e) {
        // BlobBuilder = Deprecated, but widely implemented
        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;
        blob = new BlobBuilder();
        blob.append(content);
        blob = blob.getBlob();
      }

      var URL = globalScope.URL || globalScope.webkitURL;
      var objectURL = URL.createObjectURL(blob);
      var worker = new globalScope[workerConstructor](objectURL, workerOptions);
      URL.revokeObjectURL(objectURL);
      return worker;
    } catch (e) {
      return new globalScope[workerConstructor]("data:application/javascript,".concat(encodeURIComponent(content)), workerOptions);
    }
  } catch (e) {
    if (!url) {
      throw Error("Inline worker is not supported");
    }

    return new globalScope[workerConstructor](url, workerOptions);
  }
};

/***/ }),

/***/ "?6c45":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?b3a2":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?63c8":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?aedb":
/*!********************!*\
  !*** os (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?75c6":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?674f":
/*!****************************!*\
  !*** perf_hooks (ignored) ***!
  \****************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?c6f7":
/*!********************************!*\
  !*** worker_threads (ignored) ***!
  \********************************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?7aa5":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?d87b":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?0757":
/*!********************!*\
  !*** os (ignored) ***!
  \********************/
/***/ (function() {

/* (ignored) */

/***/ }),

/***/ "?334c":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (function() {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,